
nucleo-timer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005184  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005364  08005364  00006364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053fc  080053fc  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080053fc  080053fc  000063fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005404  08005404  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005404  08005404  00006404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005408  08005408  00006408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800540c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000068  08005474  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08005474  000072b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f84  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002688  00000000  00000000  0001a01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  0001c6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d55  00000000  00000000  0001d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f21c  00000000  00000000  0001e515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129ac  00000000  00000000  0003d731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7f2a  00000000  00000000  000500dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118007  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005018  00000000  00000000  0011804c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0011d064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800534c 	.word	0x0800534c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800534c 	.word	0x0800534c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char* ptr, int len)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d002      	beq.n	8000604 <_write+0x18>
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b02      	cmp	r3, #2
 8000602:	d111      	bne.n	8000628 <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	b29a      	uxth	r2, r3
 8000608:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800060c:	68b9      	ldr	r1, [r7, #8]
 800060e:	4809      	ldr	r0, [pc, #36]	@ (8000634 <_write+0x48>)
 8000610:	f002 fcd6 	bl	8002fc0 <HAL_UART_Transmit>
 8000614:	4603      	mov	r3, r0
 8000616:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000618:	7dfb      	ldrb	r3, [r7, #23]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d101      	bne.n	8000622 <_write+0x36>
      return len;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	e004      	b.n	800062c <_write+0x40>
    else
      return -1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000626:	e001      	b.n	800062c <_write+0x40>
  }
  return -1;
 8000628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800062c:	4618      	mov	r0, r3
 800062e:	3718      	adds	r7, #24
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000d0 	.word	0x200000d0

08000638 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000640:	2120      	movs	r1, #32
 8000642:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000646:	f000 ff27 	bl	8001498 <HAL_GPIO_TogglePin>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fb42 	bl	8000ce2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f82f 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f913 	bl	800088c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000666:	f000 f8c5 	bl	80007f4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800066a:	f000 f875 	bl	8000758 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting nucleo-timer1\n");
 800066e:	4810      	ldr	r0, [pc, #64]	@ (80006b0 <main+0x5c>)
 8000670:	f004 f80a 	bl	8004688 <puts>

  HAL_TIM_Base_Start_IT(&htim2);
 8000674:	480f      	ldr	r0, [pc, #60]	@ (80006b4 <main+0x60>)
 8000676:	f001 ff77 	bl	8002568 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	603b      	str	r3, [r7, #0]
  uint32_t next_tick = TICK_DELAY;
 800067e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000682:	607b      	str	r3, [r7, #4]

  while (1)
  {
	  now = HAL_GetTick();
 8000684:	f000 fb92 	bl	8000dac <HAL_GetTick>
 8000688:	6038      	str	r0, [r7, #0]

	  if(now >= next_tick) {
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	d3f8      	bcc.n	8000684 <main+0x30>
		  printf("Tick %lu\n", now / 1000);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	4a08      	ldr	r2, [pc, #32]	@ (80006b8 <main+0x64>)
 8000696:	fba2 2303 	umull	r2, r3, r2, r3
 800069a:	099b      	lsrs	r3, r3, #6
 800069c:	4619      	mov	r1, r3
 800069e:	4807      	ldr	r0, [pc, #28]	@ (80006bc <main+0x68>)
 80006a0:	f003 ff8a 	bl	80045b8 <iprintf>

		  next_tick = now + TICK_DELAY;
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80006aa:	607b      	str	r3, [r7, #4]
	  now = HAL_GetTick();
 80006ac:	e7ea      	b.n	8000684 <main+0x30>
 80006ae:	bf00      	nop
 80006b0:	08005364 	.word	0x08005364
 80006b4:	20000084 	.word	0x20000084
 80006b8:	10624dd3 	.word	0x10624dd3
 80006bc:	0800537c 	.word	0x0800537c

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	2238      	movs	r2, #56	@ 0x38
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 f8ba 	bl	8004848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006e6:	f000 ff15 	bl	8001514 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2340      	movs	r3, #64	@ 0x40
 80006f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000704:	2319      	movs	r3, #25
 8000706:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0318 	add.w	r3, r7, #24
 8000718:	4618      	mov	r0, r3
 800071a:	f000 ffaf 	bl	800167c <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000724:	f000 f920 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2303      	movs	r3, #3
 800072e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2103      	movs	r1, #3
 8000740:	4618      	mov	r0, r3
 8000742:	f001 faad 	bl	8001ca0 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800074c:	f000 f90c 	bl	8000968 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3750      	adds	r7, #80	@ 0x50
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000776:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <MX_TIM2_Init+0x98>)
 8000778:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800077c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <MX_TIM2_Init+0x98>)
 8000780:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000784:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_TIM2_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_TIM2_Init+0x98>)
 800078e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000792:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000794:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_TIM2_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_TIM2_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a0:	4813      	ldr	r0, [pc, #76]	@ (80007f0 <MX_TIM2_Init+0x98>)
 80007a2:	f001 fe89 	bl	80024b8 <HAL_TIM_Base_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80007ac:	f000 f8dc 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	4619      	mov	r1, r3
 80007bc:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <MX_TIM2_Init+0x98>)
 80007be:	f002 f88d 	bl	80028dc <HAL_TIM_ConfigClockSource>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80007c8:	f000 f8ce 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_TIM2_Init+0x98>)
 80007da:	f002 fad9 	bl	8002d90 <HAL_TIMEx_MasterConfigSynchronization>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80007e4:	f000 f8c0 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000084 	.word	0x20000084

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 80007fa:	4a23      	ldr	r2, [pc, #140]	@ (8000888 <MX_USART2_UART_Init+0x94>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000800:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083c:	4811      	ldr	r0, [pc, #68]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 800083e:	f002 fb6f 	bl	8002f20 <HAL_UART_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000848:	f000 f88e 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	480d      	ldr	r0, [pc, #52]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000850:	f003 fd25 	bl	800429e <HAL_UARTEx_SetTxFifoThreshold>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800085a:	f000 f885 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	4808      	ldr	r0, [pc, #32]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000862:	f003 fd5a 	bl	800431a <HAL_UARTEx_SetRxFifoThreshold>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800086c:	f000 f87c 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000872:	f003 fcdb 	bl	800422c <HAL_UARTEx_DisableFifoMode>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800087c:	f000 f874 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200000d0 	.word	0x200000d0
 8000888:	40004400 	.word	0x40004400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000960 <MX_GPIO_Init+0xd4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	4a2e      	ldr	r2, [pc, #184]	@ (8000960 <MX_GPIO_Init+0xd4>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000960 <MX_GPIO_Init+0xd4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ba:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <MX_GPIO_Init+0xd4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a28      	ldr	r2, [pc, #160]	@ (8000960 <MX_GPIO_Init+0xd4>)
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <MX_GPIO_Init+0xd4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <MX_GPIO_Init+0xd4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	4a22      	ldr	r2, [pc, #136]	@ (8000960 <MX_GPIO_Init+0xd4>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008de:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <MX_GPIO_Init+0xd4>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_GPIO_Init+0xd4>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000960 <MX_GPIO_Init+0xd4>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_GPIO_Init+0xd4>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2120      	movs	r1, #32
 8000906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090a:	f000 fdad 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800090e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000914:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	480f      	ldr	r0, [pc, #60]	@ (8000964 <MX_GPIO_Init+0xd8>)
 8000926:	f000 fc1d 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800092a:	2320      	movs	r3, #32
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000944:	f000 fc0e 	bl	8001164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	2028      	movs	r0, #40	@ 0x28
 800094e:	f000 fb14 	bl	8000f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000952:	2028      	movs	r0, #40	@ 0x28
 8000954:	f000 fb2b 	bl	8000fae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	@ 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000
 8000964:	48000800 	.word	0x48000800

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <Error_Handler+0x8>

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097e:	4a0e      	ldr	r2, [pc, #56]	@ (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6613      	str	r3, [r2, #96]	@ 0x60
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <HAL_MspInit+0x44>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000996:	4a08      	ldr	r2, [pc, #32]	@ (80009b8 <HAL_MspInit+0x44>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099c:	6593      	str	r3, [r2, #88]	@ 0x58
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009aa:	f000 fe57 	bl	800165c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009cc:	d113      	bne.n	80009f6 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <HAL_TIM_Base_MspInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a00 <HAL_TIM_Base_MspInit+0x44>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <HAL_TIM_Base_MspInit+0x44>)
 80009dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	201c      	movs	r0, #28
 80009ec:	f000 fac5 	bl	8000f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009f0:	201c      	movs	r0, #28
 80009f2:	f000 fadc 	bl	8000fae <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000

08000a04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b09a      	sub	sp, #104	@ 0x68
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	2244      	movs	r2, #68	@ 0x44
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 ff0f 	bl	8004848 <memset>
  if(huart->Instance==USART2)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <HAL_UART_MspInit+0xb8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d13e      	bne.n	8000ab2 <HAL_UART_MspInit+0xae>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fb49 	bl	80020d8 <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a4c:	f7ff ff8c 	bl	8000968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a54:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_UART_MspInit+0xbc>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a80:	230c      	movs	r3, #12
 8000a82:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a90:	2307      	movs	r3, #7
 8000a92:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9e:	f000 fb61 	bl	8001164 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2026      	movs	r0, #38	@ 0x26
 8000aa8:	f000 fa67 	bl	8000f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aac:	2026      	movs	r0, #38	@ 0x26
 8000aae:	f000 fa7e 	bl	8000fae <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3768      	adds	r7, #104	@ 0x68
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <NMI_Handler+0x4>

08000acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <MemManage_Handler+0x4>

08000adc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1a:	f000 f935 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b28:	4802      	ldr	r0, [pc, #8]	@ (8000b34 <TIM2_IRQHandler+0x10>)
 8000b2a:	f001 fd87 	bl	800263c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000084 	.word	0x20000084

08000b38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b3c:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <USART2_IRQHandler+0x10>)
 8000b3e:	f002 facd 	bl	80030dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000d0 	.word	0x200000d0

08000b4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b50:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b54:	f000 fcba 	bl	80014cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e00a      	b.n	8000b84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b6e:	f3af 8000 	nop.w
 8000b72:	4601      	mov	r1, r0
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	b2ca      	uxtb	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf0      	blt.n	8000b6e <_read+0x12>
  }

  return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bbe:	605a      	str	r2, [r3, #4]
  return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_isatty>:

int _isatty(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	@ (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f003 fe58 	bl	80048e4 <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20008000 	.word	0x20008000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	20000164 	.word	0x20000164
 8000c68:	200002b8 	.word	0x200002b8

08000c6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	@ (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c90:	480d      	ldr	r0, [pc, #52]	@ (8000cc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c92:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c94:	f7ff ffea 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	@ (8000cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <LoopForever+0xe>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cdc <LoopForever+0x16>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f003 fe17 	bl	80048f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cc2:	f7ff fcc7 	bl	8000654 <main>

08000cc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc6:	e7fe      	b.n	8000cc6 <LoopForever>
  ldr   r0, =_estack
 8000cc8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cd4:	0800540c 	.word	0x0800540c
  ldr r2, =_sbss
 8000cd8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cdc:	200002b8 	.word	0x200002b8

08000ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_2_IRQHandler>

08000ce2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f939 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f000 f80e 	bl	8000d14 <HAL_InitTick>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	71fb      	strb	r3, [r7, #7]
 8000d02:	e001      	b.n	8000d08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d04:	f7ff fe36 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d08:	79fb      	ldrb	r3, [r7, #7]

}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d20:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <HAL_InitTick+0x68>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d022      	beq.n	8000d6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d28:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_InitTick+0x6c>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <HAL_InitTick+0x68>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 f944 	bl	8000fca <HAL_SYSTICK_Config>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10f      	bne.n	8000d68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b0f      	cmp	r3, #15
 8000d4c:	d809      	bhi.n	8000d62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d56:	f000 f910 	bl	8000f7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <HAL_InitTick+0x70>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e007      	b.n	8000d72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	e004      	b.n	8000d72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e001      	b.n	8000d72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <HAL_IncTick+0x1c>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <HAL_IncTick+0x20>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a03      	ldr	r2, [pc, #12]	@ (8000da4 <HAL_IncTick+0x1c>)
 8000d98:	6013      	str	r3, [r2, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	20000168 	.word	0x20000168
 8000da8:	20000008 	.word	0x20000008

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000168 	.word	0x20000168

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4907      	ldr	r1, [pc, #28]	@ (8000e60 <__NVIC_EnableIRQ+0x38>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	@ (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	@ 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff29 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff40 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff90 	bl	8000eb8 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5f 	bl	8000e64 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff33 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffa4 	bl	8000f20 <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d005      	beq.n	8001006 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e037      	b.n	8001076 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 020e 	bic.w	r2, r2, #14
 8001014:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001020:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001024:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103a:	f003 021f 	and.w	r2, r3, #31
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	2101      	movs	r1, #1
 8001044:	fa01 f202 	lsl.w	r2, r1, r2
 8001048:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001052:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00c      	beq.n	8001076 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001066:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800106a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001074:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d00d      	beq.n	80010c8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2204      	movs	r2, #4
 80010b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e047      	b.n	8001158 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 020e 	bic.w	r2, r2, #14
 80010d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fc:	f003 021f 	and.w	r2, r3, #31
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	2101      	movs	r1, #1
 8001106:	fa01 f202 	lsl.w	r2, r1, r2
 800110a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001114:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00c      	beq.n	8001138 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001128:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800112c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001136:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	4798      	blx	r3
    }
  }
  return status;
 8001158:	7bfb      	ldrb	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001172:	e15a      	b.n	800142a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 814c 	beq.w	8001424 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 0201 	and.w	r2, r3, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b03      	cmp	r3, #3
 8001210:	d017      	beq.n	8001242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0203 	and.w	r2, r3, #3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80a6 	beq.w	8001424 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001448 <HAL_GPIO_Init+0x2e4>)
 80012da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001448 <HAL_GPIO_Init+0x2e4>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80012e4:	4b58      	ldr	r3, [pc, #352]	@ (8001448 <HAL_GPIO_Init+0x2e4>)
 80012e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f0:	4a56      	ldr	r2, [pc, #344]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800131a:	d01f      	beq.n	800135c <HAL_GPIO_Init+0x1f8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a4c      	ldr	r2, [pc, #304]	@ (8001450 <HAL_GPIO_Init+0x2ec>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d019      	beq.n	8001358 <HAL_GPIO_Init+0x1f4>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a4b      	ldr	r2, [pc, #300]	@ (8001454 <HAL_GPIO_Init+0x2f0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d013      	beq.n	8001354 <HAL_GPIO_Init+0x1f0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a4a      	ldr	r2, [pc, #296]	@ (8001458 <HAL_GPIO_Init+0x2f4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d00d      	beq.n	8001350 <HAL_GPIO_Init+0x1ec>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a49      	ldr	r2, [pc, #292]	@ (800145c <HAL_GPIO_Init+0x2f8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d007      	beq.n	800134c <HAL_GPIO_Init+0x1e8>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a48      	ldr	r2, [pc, #288]	@ (8001460 <HAL_GPIO_Init+0x2fc>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d101      	bne.n	8001348 <HAL_GPIO_Init+0x1e4>
 8001344:	2305      	movs	r3, #5
 8001346:	e00a      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001348:	2306      	movs	r3, #6
 800134a:	e008      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 800134c:	2304      	movs	r3, #4
 800134e:	e006      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001350:	2303      	movs	r3, #3
 8001352:	e004      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001354:	2302      	movs	r3, #2
 8001356:	e002      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 800135c:	2300      	movs	r3, #0
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	f002 0203 	and.w	r2, r2, #3
 8001364:	0092      	lsls	r2, r2, #2
 8001366:	4093      	lsls	r3, r2
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800136e:	4937      	ldr	r1, [pc, #220]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800137c:	4b39      	ldr	r3, [pc, #228]	@ (8001464 <HAL_GPIO_Init+0x300>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a0:	4a30      	ldr	r2, [pc, #192]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ca:	4a26      	ldr	r2, [pc, #152]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800141e:	4a11      	ldr	r2, [pc, #68]	@ (8001464 <HAL_GPIO_Init+0x300>)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	f47f ae9d 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 800143a:	bf00      	nop
 800143c:	bf00      	nop
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000
 8001450:	48000400 	.word	0x48000400
 8001454:	48000800 	.word	0x48000800
 8001458:	48000c00 	.word	0x48000c00
 800145c:	48001000 	.word	0x48001000
 8001460:	48001400 	.word	0x48001400
 8001464:	40010400 	.word	0x40010400

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001484:	e002      	b.n	800148c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4013      	ands	r3, r2
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	43d9      	mvns	r1, r3
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	400b      	ands	r3, r1
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d8:	695a      	ldr	r2, [r3, #20]
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d006      	beq.n	80014f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014e2:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f806 	bl	80014fc <HAL_GPIO_EXTI_Callback>
  }
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40010400 	.word	0x40010400

080014fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d141      	bne.n	80015a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001522:	4b4b      	ldr	r3, [pc, #300]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800152a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800152e:	d131      	bne.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001530:	4b47      	ldr	r3, [pc, #284]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001536:	4a46      	ldr	r2, [pc, #280]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800153c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001540:	4b43      	ldr	r3, [pc, #268]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001548:	4a41      	ldr	r2, [pc, #260]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001550:	4b40      	ldr	r3, [pc, #256]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2232      	movs	r2, #50	@ 0x32
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	4a3f      	ldr	r2, [pc, #252]	@ (8001658 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800155c:	fba2 2303 	umull	r2, r3, r2, r3
 8001560:	0c9b      	lsrs	r3, r3, #18
 8001562:	3301      	adds	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001566:	e002      	b.n	800156e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	3b01      	subs	r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800156e:	4b38      	ldr	r3, [pc, #224]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800157a:	d102      	bne.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f2      	bne.n	8001568 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001582:	4b33      	ldr	r3, [pc, #204]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800158a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800158e:	d158      	bne.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e057      	b.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001594:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800159a:	4a2d      	ldr	r2, [pc, #180]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015a4:	e04d      	b.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015ac:	d141      	bne.n	8001632 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ae:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ba:	d131      	bne.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015bc:	4b24      	ldr	r3, [pc, #144]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015c2:	4a23      	ldr	r2, [pc, #140]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015cc:	4b20      	ldr	r3, [pc, #128]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2232      	movs	r2, #50	@ 0x32
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
 80015e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001658 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	0c9b      	lsrs	r3, r3, #18
 80015ee:	3301      	adds	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f2:	e002      	b.n	80015fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001606:	d102      	bne.n	800160e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f2      	bne.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800161a:	d112      	bne.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e011      	b.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001620:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001626:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001630:	e007      	b.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001640:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40007000 	.word	0x40007000
 8001654:	20000000 	.word	0x20000000
 8001658:	431bde83 	.word	0x431bde83

0800165c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800166a:	6093      	str	r3, [r2, #8]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40007000 	.word	0x40007000

0800167c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e2fe      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d075      	beq.n	8001786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800169a:	4b97      	ldr	r3, [pc, #604]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016a4:	4b94      	ldr	r3, [pc, #592]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2b0c      	cmp	r3, #12
 80016b2:	d102      	bne.n	80016ba <HAL_RCC_OscConfig+0x3e>
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d002      	beq.n	80016c0 <HAL_RCC_OscConfig+0x44>
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d10b      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	4b8d      	ldr	r3, [pc, #564]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d05b      	beq.n	8001784 <HAL_RCC_OscConfig+0x108>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d157      	bne.n	8001784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e2d9      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016e0:	d106      	bne.n	80016f0 <HAL_RCC_OscConfig+0x74>
 80016e2:	4b85      	ldr	r3, [pc, #532]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a84      	ldr	r2, [pc, #528]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e01d      	b.n	800172c <HAL_RCC_OscConfig+0xb0>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016f8:	d10c      	bne.n	8001714 <HAL_RCC_OscConfig+0x98>
 80016fa:	4b7f      	ldr	r3, [pc, #508]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a7e      	ldr	r2, [pc, #504]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	4b7c      	ldr	r3, [pc, #496]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a7b      	ldr	r2, [pc, #492]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 800170c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e00b      	b.n	800172c <HAL_RCC_OscConfig+0xb0>
 8001714:	4b78      	ldr	r3, [pc, #480]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a77      	ldr	r2, [pc, #476]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 800171a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b75      	ldr	r3, [pc, #468]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a74      	ldr	r2, [pc, #464]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800172a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d013      	beq.n	800175c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001734:	f7ff fb3a 	bl	8000dac <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800173c:	f7ff fb36 	bl	8000dac <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	@ 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e29e      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174e:	4b6a      	ldr	r3, [pc, #424]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0xc0>
 800175a:	e014      	b.n	8001786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff fb26 	bl	8000dac <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff fb22 	bl	8000dac <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	@ 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e28a      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001776:	4b60      	ldr	r3, [pc, #384]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0xe8>
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d075      	beq.n	800187e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001792:	4b59      	ldr	r3, [pc, #356]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800179c:	4b56      	ldr	r3, [pc, #344]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b0c      	cmp	r3, #12
 80017aa:	d102      	bne.n	80017b2 <HAL_RCC_OscConfig+0x136>
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d002      	beq.n	80017b8 <HAL_RCC_OscConfig+0x13c>
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d11f      	bne.n	80017f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b8:	4b4f      	ldr	r3, [pc, #316]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_OscConfig+0x154>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e25d      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b49      	ldr	r3, [pc, #292]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	061b      	lsls	r3, r3, #24
 80017de:	4946      	ldr	r1, [pc, #280]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017e4:	4b45      	ldr	r3, [pc, #276]	@ (80018fc <HAL_RCC_OscConfig+0x280>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fa93 	bl	8000d14 <HAL_InitTick>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d043      	beq.n	800187c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e249      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d023      	beq.n	8001848 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001800:	4b3d      	ldr	r3, [pc, #244]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a3c      	ldr	r2, [pc, #240]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff face 	bl	8000dac <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001814:	f7ff faca 	bl	8000dac <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e232      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001826:	4b34      	ldr	r3, [pc, #208]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001832:	4b31      	ldr	r3, [pc, #196]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	061b      	lsls	r3, r3, #24
 8001840:	492d      	ldr	r1, [pc, #180]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]
 8001846:	e01a      	b.n	800187e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001848:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2a      	ldr	r2, [pc, #168]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 800184e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff faaa 	bl	8000dac <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185c:	f7ff faa6 	bl	8000dac <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e20e      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800186e:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x1e0>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800187c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d041      	beq.n	800190e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d01c      	beq.n	80018cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001892:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 8001894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001898:	4a17      	ldr	r2, [pc, #92]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff fa83 	bl	8000dac <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018aa:	f7ff fa7f 	bl	8000dac <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1e7      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018bc:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 80018be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0ef      	beq.n	80018aa <HAL_RCC_OscConfig+0x22e>
 80018ca:	e020      	b.n	800190e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018cc:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 80018ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d2:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018dc:	f7ff fa66 	bl	8000dac <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e2:	e00d      	b.n	8001900 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e4:	f7ff fa62 	bl	8000dac <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d906      	bls.n	8001900 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e1ca      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001900:	4b8c      	ldr	r3, [pc, #560]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1ea      	bne.n	80018e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80a6 	beq.w	8001a68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001920:	4b84      	ldr	r3, [pc, #528]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_OscConfig+0x2b4>
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x2b6>
 8001930:	2300      	movs	r3, #0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00d      	beq.n	8001952 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b7f      	ldr	r3, [pc, #508]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193a:	4a7e      	ldr	r2, [pc, #504]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001940:	6593      	str	r3, [r2, #88]	@ 0x58
 8001942:	4b7c      	ldr	r3, [pc, #496]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800194e:	2301      	movs	r3, #1
 8001950:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001952:	4b79      	ldr	r3, [pc, #484]	@ (8001b38 <HAL_RCC_OscConfig+0x4bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d118      	bne.n	8001990 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800195e:	4b76      	ldr	r3, [pc, #472]	@ (8001b38 <HAL_RCC_OscConfig+0x4bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a75      	ldr	r2, [pc, #468]	@ (8001b38 <HAL_RCC_OscConfig+0x4bc>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196a:	f7ff fa1f 	bl	8000dac <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001972:	f7ff fa1b 	bl	8000dac <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e183      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001984:	4b6c      	ldr	r3, [pc, #432]	@ (8001b38 <HAL_RCC_OscConfig+0x4bc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d108      	bne.n	80019aa <HAL_RCC_OscConfig+0x32e>
 8001998:	4b66      	ldr	r3, [pc, #408]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199e:	4a65      	ldr	r2, [pc, #404]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019a8:	e024      	b.n	80019f4 <HAL_RCC_OscConfig+0x378>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d110      	bne.n	80019d4 <HAL_RCC_OscConfig+0x358>
 80019b2:	4b60      	ldr	r3, [pc, #384]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 80019b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b8:	4a5e      	ldr	r2, [pc, #376]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 80019c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c8:	4a5a      	ldr	r2, [pc, #360]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019d2:	e00f      	b.n	80019f4 <HAL_RCC_OscConfig+0x378>
 80019d4:	4b57      	ldr	r3, [pc, #348]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 80019d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019da:	4a56      	ldr	r2, [pc, #344]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e4:	4b53      	ldr	r3, [pc, #332]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ea:	4a52      	ldr	r2, [pc, #328]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d016      	beq.n	8001a2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fc:	f7ff f9d6 	bl	8000dac <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a04:	f7ff f9d2 	bl	8000dac <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e138      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1a:	4b46      	ldr	r3, [pc, #280]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0ed      	beq.n	8001a04 <HAL_RCC_OscConfig+0x388>
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2a:	f7ff f9bf 	bl	8000dac <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a30:	e00a      	b.n	8001a48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7ff f9bb 	bl	8000dac <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e121      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a48:	4b3a      	ldr	r3, [pc, #232]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1ed      	bne.n	8001a32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a56:	7ffb      	ldrb	r3, [r7, #31]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d105      	bne.n	8001a68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5c:	4b35      	ldr	r3, [pc, #212]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a60:	4a34      	ldr	r2, [pc, #208]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a66:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d03c      	beq.n	8001aee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a82:	4a2c      	ldr	r2, [pc, #176]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8c:	f7ff f98e 	bl	8000dac <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a94:	f7ff f98a 	bl	8000dac <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e0f2      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aa6:	4b23      	ldr	r3, [pc, #140]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ef      	beq.n	8001a94 <HAL_RCC_OscConfig+0x418>
 8001ab4:	e01b      	b.n	8001aee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001abc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f971 	bl	8000dac <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ace:	f7ff f96d 	bl	8000dac <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e0d5      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ae0:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1ef      	bne.n	8001ace <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 80c9 	beq.w	8001c8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001af8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	f000 8083 	beq.w	8001c0c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d15e      	bne.n	8001bcc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a08      	ldr	r2, [pc, #32]	@ (8001b34 <HAL_RCC_OscConfig+0x4b8>)
 8001b14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f947 	bl	8000dac <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b20:	e00c      	b.n	8001b3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff f943 	bl	8000dac <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d905      	bls.n	8001b3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e0ab      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3c:	4b55      	ldr	r3, [pc, #340]	@ (8001c94 <HAL_RCC_OscConfig+0x618>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1ec      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b48:	4b52      	ldr	r3, [pc, #328]	@ (8001c94 <HAL_RCC_OscConfig+0x618>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	4b52      	ldr	r3, [pc, #328]	@ (8001c98 <HAL_RCC_OscConfig+0x61c>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6a11      	ldr	r1, [r2, #32]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b58:	3a01      	subs	r2, #1
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	4311      	orrs	r1, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b62:	0212      	lsls	r2, r2, #8
 8001b64:	4311      	orrs	r1, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b6a:	0852      	lsrs	r2, r2, #1
 8001b6c:	3a01      	subs	r2, #1
 8001b6e:	0552      	lsls	r2, r2, #21
 8001b70:	4311      	orrs	r1, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b76:	0852      	lsrs	r2, r2, #1
 8001b78:	3a01      	subs	r2, #1
 8001b7a:	0652      	lsls	r2, r2, #25
 8001b7c:	4311      	orrs	r1, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b82:	06d2      	lsls	r2, r2, #27
 8001b84:	430a      	orrs	r2, r1
 8001b86:	4943      	ldr	r1, [pc, #268]	@ (8001c94 <HAL_RCC_OscConfig+0x618>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b8c:	4b41      	ldr	r3, [pc, #260]	@ (8001c94 <HAL_RCC_OscConfig+0x618>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a40      	ldr	r2, [pc, #256]	@ (8001c94 <HAL_RCC_OscConfig+0x618>)
 8001b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b98:	4b3e      	ldr	r3, [pc, #248]	@ (8001c94 <HAL_RCC_OscConfig+0x618>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a3d      	ldr	r2, [pc, #244]	@ (8001c94 <HAL_RCC_OscConfig+0x618>)
 8001b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ba2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f902 	bl	8000dac <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff f8fe 	bl	8000dac <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e066      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbe:	4b35      	ldr	r3, [pc, #212]	@ (8001c94 <HAL_RCC_OscConfig+0x618>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x530>
 8001bca:	e05e      	b.n	8001c8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bcc:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <HAL_RCC_OscConfig+0x618>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a30      	ldr	r2, [pc, #192]	@ (8001c94 <HAL_RCC_OscConfig+0x618>)
 8001bd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f8e8 	bl	8000dac <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff f8e4 	bl	8000dac <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e04c      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf2:	4b28      	ldr	r3, [pc, #160]	@ (8001c94 <HAL_RCC_OscConfig+0x618>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001bfe:	4b25      	ldr	r3, [pc, #148]	@ (8001c94 <HAL_RCC_OscConfig+0x618>)
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	4924      	ldr	r1, [pc, #144]	@ (8001c94 <HAL_RCC_OscConfig+0x618>)
 8001c04:	4b25      	ldr	r3, [pc, #148]	@ (8001c9c <HAL_RCC_OscConfig+0x620>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	60cb      	str	r3, [r1, #12]
 8001c0a:	e03e      	b.n	8001c8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e039      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c18:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <HAL_RCC_OscConfig+0x618>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d12c      	bne.n	8001c86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c36:	3b01      	subs	r3, #1
 8001c38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d123      	bne.n	8001c86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c48:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d11b      	bne.n	8001c86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c58:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d113      	bne.n	8001c86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	085b      	lsrs	r3, r3, #1
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d109      	bne.n	8001c86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	019f800c 	.word	0x019f800c
 8001c9c:	feeefffc 	.word	0xfeeefffc

08001ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e11e      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b91      	ldr	r3, [pc, #580]	@ (8001f00 <HAL_RCC_ClockConfig+0x260>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d910      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b8e      	ldr	r3, [pc, #568]	@ (8001f00 <HAL_RCC_ClockConfig+0x260>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 020f 	bic.w	r2, r3, #15
 8001cce:	498c      	ldr	r1, [pc, #560]	@ (8001f00 <HAL_RCC_ClockConfig+0x260>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b8a      	ldr	r3, [pc, #552]	@ (8001f00 <HAL_RCC_ClockConfig+0x260>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e106      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d073      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d129      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfc:	4b81      	ldr	r3, [pc, #516]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0f4      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d0c:	f000 f99e 	bl	800204c <RCC_GetSysClockFreqFromPLLSource>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4a7c      	ldr	r2, [pc, #496]	@ (8001f08 <HAL_RCC_ClockConfig+0x268>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d93f      	bls.n	8001d9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d1a:	4b7a      	ldr	r3, [pc, #488]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d033      	beq.n	8001d9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d12f      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d3a:	4b72      	ldr	r3, [pc, #456]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d42:	4a70      	ldr	r2, [pc, #448]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	e024      	b.n	8001d9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d58:	4b6a      	ldr	r3, [pc, #424]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0c6      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d68:	4b66      	ldr	r3, [pc, #408]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0be      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d78:	f000 f8ce 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4a61      	ldr	r2, [pc, #388]	@ (8001f08 <HAL_RCC_ClockConfig+0x268>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d909      	bls.n	8001d9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d86:	4b5f      	ldr	r3, [pc, #380]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d8e:	4a5d      	ldr	r2, [pc, #372]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d96:	2380      	movs	r3, #128	@ 0x80
 8001d98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f023 0203 	bic.w	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4957      	ldr	r1, [pc, #348]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dac:	f7fe fffe 	bl	8000dac <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db4:	f7fe fffa 	bl	8000dac <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e095      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	4b4e      	ldr	r3, [pc, #312]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 020c 	and.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1eb      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d023      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df4:	4b43      	ldr	r3, [pc, #268]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4a42      	ldr	r2, [pc, #264]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001dfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dfe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d007      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e14:	4a3b      	ldr	r2, [pc, #236]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001e16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e1c:	4b39      	ldr	r3, [pc, #228]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4936      	ldr	r1, [pc, #216]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b80      	cmp	r3, #128	@ 0x80
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e36:	4b33      	ldr	r3, [pc, #204]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4a32      	ldr	r2, [pc, #200]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001e3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e42:	4b2f      	ldr	r3, [pc, #188]	@ (8001f00 <HAL_RCC_ClockConfig+0x260>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d21d      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e50:	4b2b      	ldr	r3, [pc, #172]	@ (8001f00 <HAL_RCC_ClockConfig+0x260>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 020f 	bic.w	r2, r3, #15
 8001e58:	4929      	ldr	r1, [pc, #164]	@ (8001f00 <HAL_RCC_ClockConfig+0x260>)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e60:	f7fe ffa4 	bl	8000dac <HAL_GetTick>
 8001e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e68:	f7fe ffa0 	bl	8000dac <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e03b      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b20      	ldr	r3, [pc, #128]	@ (8001f00 <HAL_RCC_ClockConfig+0x260>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1ed      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e98:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4917      	ldr	r1, [pc, #92]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb6:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	490f      	ldr	r1, [pc, #60]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eca:	f000 f825 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <HAL_RCC_ClockConfig+0x264>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	490c      	ldr	r1, [pc, #48]	@ (8001f0c <HAL_RCC_ClockConfig+0x26c>)
 8001edc:	5ccb      	ldrb	r3, [r1, r3]
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f10 <HAL_RCC_ClockConfig+0x270>)
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <HAL_RCC_ClockConfig+0x274>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe ff10 	bl	8000d14 <HAL_InitTick>
 8001ef4:	4603      	mov	r3, r0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40022000 	.word	0x40022000
 8001f04:	40021000 	.word	0x40021000
 8001f08:	04c4b400 	.word	0x04c4b400
 8001f0c:	08005388 	.word	0x08005388
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000004 	.word	0x20000004

08001f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d102      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	e047      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f30:	4b27      	ldr	r3, [pc, #156]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f3c:	4b26      	ldr	r3, [pc, #152]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	e03e      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f42:	4b23      	ldr	r3, [pc, #140]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b0c      	cmp	r3, #12
 8001f4c:	d136      	bne.n	8001fbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f4e:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3301      	adds	r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d10c      	bne.n	8001f86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	4a16      	ldr	r2, [pc, #88]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f76:	68d2      	ldr	r2, [r2, #12]
 8001f78:	0a12      	lsrs	r2, r2, #8
 8001f7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	617b      	str	r3, [r7, #20]
      break;
 8001f84:	e00c      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f86:	4a13      	ldr	r2, [pc, #76]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	4a10      	ldr	r2, [pc, #64]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f90:	68d2      	ldr	r2, [r2, #12]
 8001f92:	0a12      	lsrs	r2, r2, #8
 8001f94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f98:	fb02 f303 	mul.w	r3, r2, r3
 8001f9c:	617b      	str	r3, [r7, #20]
      break;
 8001f9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0e5b      	lsrs	r3, r3, #25
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	3301      	adds	r3, #1
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	e001      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fc0:	693b      	ldr	r3, [r7, #16]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	371c      	adds	r7, #28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	016e3600 	.word	0x016e3600

08001fdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000000 	.word	0x20000000

08001ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ff8:	f7ff fff0 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4904      	ldr	r1, [pc, #16]	@ (800201c <HAL_RCC_GetPCLK1Freq+0x28>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	08005398 	.word	0x08005398

08002020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002024:	f7ff ffda 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	0adb      	lsrs	r3, r3, #11
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4904      	ldr	r1, [pc, #16]	@ (8002048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002040:	4618      	mov	r0, r3
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000
 8002048:	08005398 	.word	0x08005398

0800204c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002052:	4b1e      	ldr	r3, [pc, #120]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800205c:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3301      	adds	r3, #1
 8002068:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d10c      	bne.n	800208a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002070:	4a17      	ldr	r2, [pc, #92]	@ (80020d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	4a14      	ldr	r2, [pc, #80]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800207a:	68d2      	ldr	r2, [r2, #12]
 800207c:	0a12      	lsrs	r2, r2, #8
 800207e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	617b      	str	r3, [r7, #20]
    break;
 8002088:	e00c      	b.n	80020a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800208a:	4a12      	ldr	r2, [pc, #72]	@ (80020d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4a0e      	ldr	r2, [pc, #56]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002094:	68d2      	ldr	r2, [r2, #12]
 8002096:	0a12      	lsrs	r2, r2, #8
 8002098:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	617b      	str	r3, [r7, #20]
    break;
 80020a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020a4:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	0e5b      	lsrs	r3, r3, #25
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	3301      	adds	r3, #1
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80020be:	687b      	ldr	r3, [r7, #4]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40021000 	.word	0x40021000
 80020d0:	016e3600 	.word	0x016e3600
 80020d4:	00f42400 	.word	0x00f42400

080020d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020e0:	2300      	movs	r3, #0
 80020e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e4:	2300      	movs	r3, #0
 80020e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8098 	beq.w	8002226 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fa:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10d      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b40      	ldr	r3, [pc, #256]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210a:	4a3f      	ldr	r2, [pc, #252]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002110:	6593      	str	r3, [r2, #88]	@ 0x58
 8002112:	4b3d      	ldr	r3, [pc, #244]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002122:	4b3a      	ldr	r3, [pc, #232]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a39      	ldr	r2, [pc, #228]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800212e:	f7fe fe3d 	bl	8000dac <HAL_GetTick>
 8002132:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002134:	e009      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7fe fe39 	bl	8000dac <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d902      	bls.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	74fb      	strb	r3, [r7, #19]
        break;
 8002148:	e005      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800214a:	4b30      	ldr	r3, [pc, #192]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0ef      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002156:	7cfb      	ldrb	r3, [r7, #19]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d159      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800215c:	4b2a      	ldr	r3, [pc, #168]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002166:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01e      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	d019      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002178:	4b23      	ldr	r3, [pc, #140]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002182:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002184:	4b20      	ldr	r3, [pc, #128]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218a:	4a1f      	ldr	r2, [pc, #124]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002194:	4b1c      	ldr	r3, [pc, #112]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219a:	4a1b      	ldr	r2, [pc, #108]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800219c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021a4:	4a18      	ldr	r2, [pc, #96]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d016      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b6:	f7fe fdf9 	bl	8000dac <HAL_GetTick>
 80021ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021bc:	e00b      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7fe fdf5 	bl	8000dac <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d902      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	74fb      	strb	r3, [r7, #19]
            break;
 80021d4:	e006      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ec      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10b      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ea:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	4903      	ldr	r1, [pc, #12]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002200:	e008      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002202:	7cfb      	ldrb	r3, [r7, #19]
 8002204:	74bb      	strb	r3, [r7, #18]
 8002206:	e005      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002208:	40021000 	.word	0x40021000
 800220c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002210:	7cfb      	ldrb	r3, [r7, #19]
 8002212:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002214:	7c7b      	ldrb	r3, [r7, #17]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d105      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221a:	4ba6      	ldr	r3, [pc, #664]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221e:	4aa5      	ldr	r2, [pc, #660]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002220:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002224:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002232:	4ba0      	ldr	r3, [pc, #640]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002238:	f023 0203 	bic.w	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	499c      	ldr	r1, [pc, #624]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002254:	4b97      	ldr	r3, [pc, #604]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	f023 020c 	bic.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4994      	ldr	r1, [pc, #592]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002276:	4b8f      	ldr	r3, [pc, #572]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	498b      	ldr	r1, [pc, #556]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002298:	4b86      	ldr	r3, [pc, #536]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	4983      	ldr	r1, [pc, #524]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022ba:	4b7e      	ldr	r3, [pc, #504]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	497a      	ldr	r1, [pc, #488]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022dc:	4b75      	ldr	r3, [pc, #468]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	4972      	ldr	r1, [pc, #456]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022fe:	4b6d      	ldr	r3, [pc, #436]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002304:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	4969      	ldr	r1, [pc, #420]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002320:	4b64      	ldr	r3, [pc, #400]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002326:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4961      	ldr	r1, [pc, #388]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002342:	4b5c      	ldr	r3, [pc, #368]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002348:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	4958      	ldr	r1, [pc, #352]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d015      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002364:	4b53      	ldr	r3, [pc, #332]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002372:	4950      	ldr	r1, [pc, #320]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002382:	d105      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002384:	4b4b      	ldr	r3, [pc, #300]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a4a      	ldr	r2, [pc, #296]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800238e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002398:	2b00      	cmp	r3, #0
 800239a:	d015      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800239c:	4b45      	ldr	r3, [pc, #276]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023aa:	4942      	ldr	r1, [pc, #264]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ba:	d105      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023bc:	4b3d      	ldr	r3, [pc, #244]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a3c      	ldr	r2, [pc, #240]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023c6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d015      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023d4:	4b37      	ldr	r3, [pc, #220]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	4934      	ldr	r1, [pc, #208]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f2:	d105      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f4:	4b2f      	ldr	r3, [pc, #188]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a2e      	ldr	r2, [pc, #184]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d015      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800240c:	4b29      	ldr	r3, [pc, #164]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800241a:	4926      	ldr	r1, [pc, #152]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002426:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800242a:	d105      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242c:	4b21      	ldr	r3, [pc, #132]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a20      	ldr	r2, [pc, #128]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002436:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d015      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002452:	4918      	ldr	r1, [pc, #96]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002462:	d105      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002464:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800246e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d015      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800247c:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248a:	490a      	ldr	r1, [pc, #40]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800249a:	d105      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a04      	ldr	r2, [pc, #16]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000

080024b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e049      	b.n	800255e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fa6c 	bl	80009bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f000 fb12 	bl	8002b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d001      	beq.n	8002580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e04a      	b.n	8002616 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a21      	ldr	r2, [pc, #132]	@ (8002624 <HAL_TIM_Base_Start_IT+0xbc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d018      	beq.n	80025d4 <HAL_TIM_Base_Start_IT+0x6c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025aa:	d013      	beq.n	80025d4 <HAL_TIM_Base_Start_IT+0x6c>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002628 <HAL_TIM_Base_Start_IT+0xc0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00e      	beq.n	80025d4 <HAL_TIM_Base_Start_IT+0x6c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1c      	ldr	r2, [pc, #112]	@ (800262c <HAL_TIM_Base_Start_IT+0xc4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d009      	beq.n	80025d4 <HAL_TIM_Base_Start_IT+0x6c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002630 <HAL_TIM_Base_Start_IT+0xc8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d004      	beq.n	80025d4 <HAL_TIM_Base_Start_IT+0x6c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a19      	ldr	r2, [pc, #100]	@ (8002634 <HAL_TIM_Base_Start_IT+0xcc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d115      	bne.n	8002600 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	4b17      	ldr	r3, [pc, #92]	@ (8002638 <HAL_TIM_Base_Start_IT+0xd0>)
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d015      	beq.n	8002612 <HAL_TIM_Base_Start_IT+0xaa>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ec:	d011      	beq.n	8002612 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0201 	orr.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fe:	e008      	b.n	8002612 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e000      	b.n	8002614 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002612:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40000400 	.word	0x40000400
 800262c:	40000800 	.word	0x40000800
 8002630:	40013400 	.word	0x40013400
 8002634:	40014000 	.word	0x40014000
 8002638:	00010007 	.word	0x00010007

0800263c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d020      	beq.n	80026a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01b      	beq.n	80026a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0202 	mvn.w	r2, #2
 8002670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fa2c 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 800268c:	e005      	b.n	800269a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fa1e 	bl	8002ad0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fa2f 	bl	8002af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d020      	beq.n	80026ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01b      	beq.n	80026ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0204 	mvn.w	r2, #4
 80026bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2202      	movs	r2, #2
 80026c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fa06 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 80026d8:	e005      	b.n	80026e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f9f8 	bl	8002ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fa09 	bl	8002af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d020      	beq.n	8002738 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01b      	beq.n	8002738 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0208 	mvn.w	r2, #8
 8002708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2204      	movs	r2, #4
 800270e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f9e0 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 8002724:	e005      	b.n	8002732 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f9d2 	bl	8002ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f9e3 	bl	8002af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	d020      	beq.n	8002784 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0210 	mvn.w	r2, #16
 8002754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2208      	movs	r2, #8
 800275a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f9ba 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 8002770:	e005      	b.n	800277e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f9ac 	bl	8002ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f9bd 	bl	8002af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00c      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0201 	mvn.w	r2, #1
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fd ff48 	bl	8000638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00c      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80027ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 fb69 	bl	8002ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00c      	beq.n	80027fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80027f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fb61 	bl	8002ebc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00c      	beq.n	800281e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d007      	beq.n	800281e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f977 	bl	8002b0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00c      	beq.n	8002842 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b00      	cmp	r3, #0
 8002830:	d007      	beq.n	8002842 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f06f 0220 	mvn.w	r2, #32
 800283a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fb29 	bl	8002e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00c      	beq.n	8002866 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800285e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fb35 	bl	8002ed0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00c      	beq.n	800288a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d007      	beq.n	800288a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fb2d 	bl	8002ee4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00c      	beq.n	80028ae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80028a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fb25 	bl	8002ef8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00c      	beq.n	80028d2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80028ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fb1d 	bl	8002f0c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_TIM_ConfigClockSource+0x1c>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e0de      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x1da>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002916:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800291a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a63      	ldr	r2, [pc, #396]	@ (8002ac0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	f000 80a9 	beq.w	8002a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8002938:	4a61      	ldr	r2, [pc, #388]	@ (8002ac0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	f200 80ae 	bhi.w	8002a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8002940:	4a60      	ldr	r2, [pc, #384]	@ (8002ac4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	f000 80a1 	beq.w	8002a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8002948:	4a5e      	ldr	r2, [pc, #376]	@ (8002ac4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	f200 80a6 	bhi.w	8002a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8002950:	4a5d      	ldr	r2, [pc, #372]	@ (8002ac8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002952:	4293      	cmp	r3, r2
 8002954:	f000 8099 	beq.w	8002a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8002958:	4a5b      	ldr	r2, [pc, #364]	@ (8002ac8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800295a:	4293      	cmp	r3, r2
 800295c:	f200 809e 	bhi.w	8002a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8002960:	4a5a      	ldr	r2, [pc, #360]	@ (8002acc <HAL_TIM_ConfigClockSource+0x1f0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	f000 8091 	beq.w	8002a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8002968:	4a58      	ldr	r2, [pc, #352]	@ (8002acc <HAL_TIM_ConfigClockSource+0x1f0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	f200 8096 	bhi.w	8002a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8002970:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002974:	f000 8089 	beq.w	8002a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8002978:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800297c:	f200 808e 	bhi.w	8002a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8002980:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002984:	d03e      	beq.n	8002a04 <HAL_TIM_ConfigClockSource+0x128>
 8002986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800298a:	f200 8087 	bhi.w	8002a9c <HAL_TIM_ConfigClockSource+0x1c0>
 800298e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002992:	f000 8086 	beq.w	8002aa2 <HAL_TIM_ConfigClockSource+0x1c6>
 8002996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800299a:	d87f      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x1c0>
 800299c:	2b70      	cmp	r3, #112	@ 0x70
 800299e:	d01a      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0xfa>
 80029a0:	2b70      	cmp	r3, #112	@ 0x70
 80029a2:	d87b      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80029a4:	2b60      	cmp	r3, #96	@ 0x60
 80029a6:	d050      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x16e>
 80029a8:	2b60      	cmp	r3, #96	@ 0x60
 80029aa:	d877      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80029ac:	2b50      	cmp	r3, #80	@ 0x50
 80029ae:	d03c      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x14e>
 80029b0:	2b50      	cmp	r3, #80	@ 0x50
 80029b2:	d873      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80029b4:	2b40      	cmp	r3, #64	@ 0x40
 80029b6:	d058      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x18e>
 80029b8:	2b40      	cmp	r3, #64	@ 0x40
 80029ba:	d86f      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80029bc:	2b30      	cmp	r3, #48	@ 0x30
 80029be:	d064      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x1ae>
 80029c0:	2b30      	cmp	r3, #48	@ 0x30
 80029c2:	d86b      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	d060      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x1ae>
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d867      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d05c      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x1ae>
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d05a      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x1ae>
 80029d4:	e062      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029e6:	f000 f9b3 	bl	8002d50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	609a      	str	r2, [r3, #8]
      break;
 8002a02:	e04f      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a14:	f000 f99c 	bl	8002d50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a26:	609a      	str	r2, [r3, #8]
      break;
 8002a28:	e03c      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a36:	461a      	mov	r2, r3
 8002a38:	f000 f90e 	bl	8002c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2150      	movs	r1, #80	@ 0x50
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f967 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002a48:	e02c      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a56:	461a      	mov	r2, r3
 8002a58:	f000 f92d 	bl	8002cb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2160      	movs	r1, #96	@ 0x60
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f957 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002a68:	e01c      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a76:	461a      	mov	r2, r3
 8002a78:	f000 f8ee 	bl	8002c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2140      	movs	r1, #64	@ 0x40
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f947 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002a88:	e00c      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4619      	mov	r1, r3
 8002a94:	4610      	mov	r0, r2
 8002a96:	f000 f93e 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002a9a:	e003      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa0:	e000      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002aa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	00100070 	.word	0x00100070
 8002ac4:	00100040 	.word	0x00100040
 8002ac8:	00100030 	.word	0x00100030
 8002acc:	00100020 	.word	0x00100020

08002ad0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a42      	ldr	r2, [pc, #264]	@ (8002c3c <TIM_Base_SetConfig+0x11c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00f      	beq.n	8002b58 <TIM_Base_SetConfig+0x38>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3e:	d00b      	beq.n	8002b58 <TIM_Base_SetConfig+0x38>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a3f      	ldr	r2, [pc, #252]	@ (8002c40 <TIM_Base_SetConfig+0x120>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d007      	beq.n	8002b58 <TIM_Base_SetConfig+0x38>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a3e      	ldr	r2, [pc, #248]	@ (8002c44 <TIM_Base_SetConfig+0x124>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <TIM_Base_SetConfig+0x38>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a3d      	ldr	r2, [pc, #244]	@ (8002c48 <TIM_Base_SetConfig+0x128>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d108      	bne.n	8002b6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a33      	ldr	r2, [pc, #204]	@ (8002c3c <TIM_Base_SetConfig+0x11c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01b      	beq.n	8002baa <TIM_Base_SetConfig+0x8a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b78:	d017      	beq.n	8002baa <TIM_Base_SetConfig+0x8a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a30      	ldr	r2, [pc, #192]	@ (8002c40 <TIM_Base_SetConfig+0x120>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <TIM_Base_SetConfig+0x8a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a2f      	ldr	r2, [pc, #188]	@ (8002c44 <TIM_Base_SetConfig+0x124>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00f      	beq.n	8002baa <TIM_Base_SetConfig+0x8a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a2e      	ldr	r2, [pc, #184]	@ (8002c48 <TIM_Base_SetConfig+0x128>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00b      	beq.n	8002baa <TIM_Base_SetConfig+0x8a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a2d      	ldr	r2, [pc, #180]	@ (8002c4c <TIM_Base_SetConfig+0x12c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <TIM_Base_SetConfig+0x8a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a2c      	ldr	r2, [pc, #176]	@ (8002c50 <TIM_Base_SetConfig+0x130>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d003      	beq.n	8002baa <TIM_Base_SetConfig+0x8a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8002c54 <TIM_Base_SetConfig+0x134>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d108      	bne.n	8002bbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a16      	ldr	r2, [pc, #88]	@ (8002c3c <TIM_Base_SetConfig+0x11c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00f      	beq.n	8002c08 <TIM_Base_SetConfig+0xe8>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a17      	ldr	r2, [pc, #92]	@ (8002c48 <TIM_Base_SetConfig+0x128>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00b      	beq.n	8002c08 <TIM_Base_SetConfig+0xe8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a16      	ldr	r2, [pc, #88]	@ (8002c4c <TIM_Base_SetConfig+0x12c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d007      	beq.n	8002c08 <TIM_Base_SetConfig+0xe8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a15      	ldr	r2, [pc, #84]	@ (8002c50 <TIM_Base_SetConfig+0x130>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d003      	beq.n	8002c08 <TIM_Base_SetConfig+0xe8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a14      	ldr	r2, [pc, #80]	@ (8002c54 <TIM_Base_SetConfig+0x134>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d103      	bne.n	8002c10 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d105      	bne.n	8002c2e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f023 0201 	bic.w	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	611a      	str	r2, [r3, #16]
  }
}
 8002c2e:	bf00      	nop
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40012c00 	.word	0x40012c00
 8002c40:	40000400 	.word	0x40000400
 8002c44:	40000800 	.word	0x40000800
 8002c48:	40013400 	.word	0x40013400
 8002c4c:	40014000 	.word	0x40014000
 8002c50:	40014400 	.word	0x40014400
 8002c54:	40014800 	.word	0x40014800

08002c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f023 0201 	bic.w	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f023 030a 	bic.w	r3, r3, #10
 8002c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	621a      	str	r2, [r3, #32]
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b087      	sub	sp, #28
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f023 0210 	bic.w	r2, r3, #16
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	031b      	lsls	r3, r3, #12
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002cf2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002d2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f043 0307 	orr.w	r3, r3, #7
 8002d3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	609a      	str	r2, [r3, #8]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	021a      	lsls	r2, r3, #8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	609a      	str	r2, [r3, #8]
}
 8002d84:	bf00      	nop
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e065      	b.n	8002e74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d004      	beq.n	8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2b      	ldr	r2, [pc, #172]	@ (8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d108      	bne.n	8002dee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002de2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002df8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1b      	ldr	r2, [pc, #108]	@ (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d018      	beq.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1e:	d013      	beq.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a18      	ldr	r2, [pc, #96]	@ (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00e      	beq.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a17      	ldr	r2, [pc, #92]	@ (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d009      	beq.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a12      	ldr	r2, [pc, #72]	@ (8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a13      	ldr	r2, [pc, #76]	@ (8002e90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d10c      	bne.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	40012c00 	.word	0x40012c00
 8002e84:	40013400 	.word	0x40013400
 8002e88:	40000400 	.word	0x40000400
 8002e8c:	40000800 	.word	0x40000800
 8002e90:	40014000 	.word	0x40014000

08002e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e042      	b.n	8002fb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d106      	bne.n	8002f4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7fd fd5d 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2224      	movs	r2, #36	@ 0x24
 8002f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fee4 	bl	8003d38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fc15 	bl	80037a0 <UART_SetConfig>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e01b      	b.n	8002fb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 ff63 	bl	8003e7c <UART_CheckIdleState>
 8002fb6:	4603      	mov	r3, r0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	@ 0x28
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d17b      	bne.n	80030d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_UART_Transmit+0x26>
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e074      	b.n	80030d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2221      	movs	r2, #33	@ 0x21
 8002ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ffa:	f7fd fed7 	bl	8000dac <HAL_GetTick>
 8002ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	88fa      	ldrh	r2, [r7, #6]
 8003004:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003018:	d108      	bne.n	800302c <HAL_UART_Transmit+0x6c>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d104      	bne.n	800302c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	e003      	b.n	8003034 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003030:	2300      	movs	r3, #0
 8003032:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003034:	e030      	b.n	8003098 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2200      	movs	r2, #0
 800303e:	2180      	movs	r1, #128	@ 0x80
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 ffc5 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e03d      	b.n	80030d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10b      	bne.n	8003076 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800306c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	3302      	adds	r3, #2
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	e007      	b.n	8003086 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	3301      	adds	r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1c8      	bne.n	8003036 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2200      	movs	r2, #0
 80030ac:	2140      	movs	r1, #64	@ 0x40
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 ff8e 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e006      	b.n	80030d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e000      	b.n	80030d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
  }
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3720      	adds	r7, #32
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b0ba      	sub	sp, #232	@ 0xe8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003102:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003106:	f640 030f 	movw	r3, #2063	@ 0x80f
 800310a:	4013      	ands	r3, r2
 800310c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11b      	bne.n	8003150 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d009      	beq.n	8003150 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8300 	beq.w	8003746 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
      }
      return;
 800314e:	e2fa      	b.n	8003746 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8123 	beq.w	80033a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800315a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800315e:	4b8d      	ldr	r3, [pc, #564]	@ (8003394 <HAL_UART_IRQHandler+0x2b8>)
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003166:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800316a:	4b8b      	ldr	r3, [pc, #556]	@ (8003398 <HAL_UART_IRQHandler+0x2bc>)
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8116 	beq.w	80033a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d011      	beq.n	80031a4 <HAL_UART_IRQHandler+0xc8>
 8003180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2201      	movs	r2, #1
 8003192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d011      	beq.n	80031d4 <HAL_UART_IRQHandler+0xf8>
 80031b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00b      	beq.n	80031d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2202      	movs	r2, #2
 80031c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ca:	f043 0204 	orr.w	r2, r3, #4
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d011      	beq.n	8003204 <HAL_UART_IRQHandler+0x128>
 80031e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00b      	beq.n	8003204 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2204      	movs	r2, #4
 80031f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fa:	f043 0202 	orr.w	r2, r3, #2
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d017      	beq.n	8003240 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800321c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003220:	4b5c      	ldr	r3, [pc, #368]	@ (8003394 <HAL_UART_IRQHandler+0x2b8>)
 8003222:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2208      	movs	r2, #8
 800322e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003236:	f043 0208 	orr.w	r2, r3, #8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003248:	2b00      	cmp	r3, #0
 800324a:	d012      	beq.n	8003272 <HAL_UART_IRQHandler+0x196>
 800324c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003250:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00c      	beq.n	8003272 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003260:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8266 	beq.w	800374a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800327e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d013      	beq.n	80032b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800328a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d105      	bne.n	80032a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800329a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c6:	2b40      	cmp	r3, #64	@ 0x40
 80032c8:	d005      	beq.n	80032d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d054      	beq.n	8003380 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fee7 	bl	80040aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e6:	2b40      	cmp	r3, #64	@ 0x40
 80032e8:	d146      	bne.n	8003378 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3308      	adds	r3, #8
 80032f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003300:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003304:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3308      	adds	r3, #8
 8003312:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003316:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800331a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003322:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800332e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1d9      	bne.n	80032ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800333c:	2b00      	cmp	r3, #0
 800333e:	d017      	beq.n	8003370 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003346:	4a15      	ldr	r2, [pc, #84]	@ (800339c <HAL_UART_IRQHandler+0x2c0>)
 8003348:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd fe9f 	bl	8001094 <HAL_DMA_Abort_IT>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d019      	beq.n	8003390 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800336a:	4610      	mov	r0, r2
 800336c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336e:	e00f      	b.n	8003390 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f9ff 	bl	8003774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003376:	e00b      	b.n	8003390 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f9fb 	bl	8003774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337e:	e007      	b.n	8003390 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f9f7 	bl	8003774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800338e:	e1dc      	b.n	800374a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	bf00      	nop
    return;
 8003392:	e1da      	b.n	800374a <HAL_UART_IRQHandler+0x66e>
 8003394:	10000001 	.word	0x10000001
 8003398:	04000120 	.word	0x04000120
 800339c:	08004177 	.word	0x08004177

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	f040 8170 	bne.w	800368a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8169 	beq.w	800368a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8162 	beq.w	800368a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2210      	movs	r2, #16
 80033cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d8:	2b40      	cmp	r3, #64	@ 0x40
 80033da:	f040 80d8 	bne.w	800358e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80af 	beq.w	8003554 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80033fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003400:	429a      	cmp	r2, r3
 8003402:	f080 80a7 	bcs.w	8003554 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800340c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 8087 	bne.w	8003532 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003438:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800343c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003440:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800344e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003452:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800345a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800345e:	e841 2300 	strex	r3, r2, [r1]
 8003462:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1da      	bne.n	8003424 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3308      	adds	r3, #8
 8003474:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800347e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3308      	adds	r3, #8
 800348e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003492:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003496:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800349a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e1      	bne.n	800346e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3308      	adds	r3, #8
 80034b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80034ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3308      	adds	r3, #8
 80034ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80034ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80034d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80034dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e3      	bne.n	80034aa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003500:	f023 0310 	bic.w	r3, r3, #16
 8003504:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003512:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003514:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003518:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e4      	bne.n	80034f0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fd58 	bl	8000fe2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2202      	movs	r2, #2
 8003536:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003544:	b29b      	uxth	r3, r3
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	b29b      	uxth	r3, r3
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f91b 	bl	8003788 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003552:	e0fc      	b.n	800374e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800355a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800355e:	429a      	cmp	r2, r3
 8003560:	f040 80f5 	bne.w	800374e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b20      	cmp	r3, #32
 8003574:	f040 80eb 	bne.w	800374e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003584:	4619      	mov	r1, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8fe 	bl	8003788 <HAL_UARTEx_RxEventCallback>
      return;
 800358c:	e0df      	b.n	800374e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800359a:	b29b      	uxth	r3, r3
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80d1 	beq.w	8003752 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80035b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80cc 	beq.w	8003752 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80035de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035e4:	e841 2300 	strex	r3, r2, [r1]
 80035e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e4      	bne.n	80035ba <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3308      	adds	r3, #8
 80035f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3308      	adds	r3, #8
 8003614:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003618:	633a      	str	r2, [r7, #48]	@ 0x30
 800361a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800361e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003620:	e841 2300 	strex	r3, r2, [r1]
 8003624:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1e1      	bne.n	80035f0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	60fb      	str	r3, [r7, #12]
   return(result);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f023 0310 	bic.w	r3, r3, #16
 8003654:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003662:	61fb      	str	r3, [r7, #28]
 8003664:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	69b9      	ldr	r1, [r7, #24]
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	617b      	str	r3, [r7, #20]
   return(result);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e4      	bne.n	8003640 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800367c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f880 	bl	8003788 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003688:	e063      	b.n	8003752 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800368a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800368e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00e      	beq.n	80036b4 <HAL_UART_IRQHandler+0x5d8>
 8003696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800369a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80036aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fd9f 	bl	80041f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036b2:	e051      	b.n	8003758 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80036b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d014      	beq.n	80036ea <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80036c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80036cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d03a      	beq.n	8003756 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
    }
    return;
 80036e8:	e035      	b.n	8003756 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_UART_IRQHandler+0x62e>
 80036f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fd49 	bl	800419a <UART_EndTransmit_IT>
    return;
 8003708:	e026      	b.n	8003758 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800370a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800370e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <HAL_UART_IRQHandler+0x64e>
 8003716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800371a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fd78 	bl	8004218 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003728:	e016      	b.n	8003758 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800372a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d010      	beq.n	8003758 <HAL_UART_IRQHandler+0x67c>
 8003736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800373a:	2b00      	cmp	r3, #0
 800373c:	da0c      	bge.n	8003758 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fd60 	bl	8004204 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003744:	e008      	b.n	8003758 <HAL_UART_IRQHandler+0x67c>
      return;
 8003746:	bf00      	nop
 8003748:	e006      	b.n	8003758 <HAL_UART_IRQHandler+0x67c>
    return;
 800374a:	bf00      	nop
 800374c:	e004      	b.n	8003758 <HAL_UART_IRQHandler+0x67c>
      return;
 800374e:	bf00      	nop
 8003750:	e002      	b.n	8003758 <HAL_UART_IRQHandler+0x67c>
      return;
 8003752:	bf00      	nop
 8003754:	e000      	b.n	8003758 <HAL_UART_IRQHandler+0x67c>
    return;
 8003756:	bf00      	nop
  }
}
 8003758:	37e8      	adds	r7, #232	@ 0xe8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop

08003760 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a4:	b08c      	sub	sp, #48	@ 0x30
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	431a      	orrs	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	4bab      	ldr	r3, [pc, #684]	@ (8003a7c <UART_SetConfig+0x2dc>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037d8:	430b      	orrs	r3, r1
 80037da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4aa0      	ldr	r2, [pc, #640]	@ (8003a80 <UART_SetConfig+0x2e0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d004      	beq.n	800380c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003808:	4313      	orrs	r3, r2
 800380a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003816:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003820:	430b      	orrs	r3, r1
 8003822:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382a:	f023 010f 	bic.w	r1, r3, #15
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a91      	ldr	r2, [pc, #580]	@ (8003a84 <UART_SetConfig+0x2e4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d125      	bne.n	8003890 <UART_SetConfig+0xf0>
 8003844:	4b90      	ldr	r3, [pc, #576]	@ (8003a88 <UART_SetConfig+0x2e8>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b03      	cmp	r3, #3
 8003850:	d81a      	bhi.n	8003888 <UART_SetConfig+0xe8>
 8003852:	a201      	add	r2, pc, #4	@ (adr r2, 8003858 <UART_SetConfig+0xb8>)
 8003854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003858:	08003869 	.word	0x08003869
 800385c:	08003879 	.word	0x08003879
 8003860:	08003871 	.word	0x08003871
 8003864:	08003881 	.word	0x08003881
 8003868:	2301      	movs	r3, #1
 800386a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800386e:	e0d6      	b.n	8003a1e <UART_SetConfig+0x27e>
 8003870:	2302      	movs	r3, #2
 8003872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003876:	e0d2      	b.n	8003a1e <UART_SetConfig+0x27e>
 8003878:	2304      	movs	r3, #4
 800387a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387e:	e0ce      	b.n	8003a1e <UART_SetConfig+0x27e>
 8003880:	2308      	movs	r3, #8
 8003882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003886:	e0ca      	b.n	8003a1e <UART_SetConfig+0x27e>
 8003888:	2310      	movs	r3, #16
 800388a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800388e:	e0c6      	b.n	8003a1e <UART_SetConfig+0x27e>
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a7d      	ldr	r2, [pc, #500]	@ (8003a8c <UART_SetConfig+0x2ec>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d138      	bne.n	800390c <UART_SetConfig+0x16c>
 800389a:	4b7b      	ldr	r3, [pc, #492]	@ (8003a88 <UART_SetConfig+0x2e8>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b0c      	cmp	r3, #12
 80038a6:	d82d      	bhi.n	8003904 <UART_SetConfig+0x164>
 80038a8:	a201      	add	r2, pc, #4	@ (adr r2, 80038b0 <UART_SetConfig+0x110>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	080038e5 	.word	0x080038e5
 80038b4:	08003905 	.word	0x08003905
 80038b8:	08003905 	.word	0x08003905
 80038bc:	08003905 	.word	0x08003905
 80038c0:	080038f5 	.word	0x080038f5
 80038c4:	08003905 	.word	0x08003905
 80038c8:	08003905 	.word	0x08003905
 80038cc:	08003905 	.word	0x08003905
 80038d0:	080038ed 	.word	0x080038ed
 80038d4:	08003905 	.word	0x08003905
 80038d8:	08003905 	.word	0x08003905
 80038dc:	08003905 	.word	0x08003905
 80038e0:	080038fd 	.word	0x080038fd
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ea:	e098      	b.n	8003a1e <UART_SetConfig+0x27e>
 80038ec:	2302      	movs	r3, #2
 80038ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038f2:	e094      	b.n	8003a1e <UART_SetConfig+0x27e>
 80038f4:	2304      	movs	r3, #4
 80038f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038fa:	e090      	b.n	8003a1e <UART_SetConfig+0x27e>
 80038fc:	2308      	movs	r3, #8
 80038fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003902:	e08c      	b.n	8003a1e <UART_SetConfig+0x27e>
 8003904:	2310      	movs	r3, #16
 8003906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800390a:	e088      	b.n	8003a1e <UART_SetConfig+0x27e>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a5f      	ldr	r2, [pc, #380]	@ (8003a90 <UART_SetConfig+0x2f0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d125      	bne.n	8003962 <UART_SetConfig+0x1c2>
 8003916:	4b5c      	ldr	r3, [pc, #368]	@ (8003a88 <UART_SetConfig+0x2e8>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003920:	2b30      	cmp	r3, #48	@ 0x30
 8003922:	d016      	beq.n	8003952 <UART_SetConfig+0x1b2>
 8003924:	2b30      	cmp	r3, #48	@ 0x30
 8003926:	d818      	bhi.n	800395a <UART_SetConfig+0x1ba>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d00a      	beq.n	8003942 <UART_SetConfig+0x1a2>
 800392c:	2b20      	cmp	r3, #32
 800392e:	d814      	bhi.n	800395a <UART_SetConfig+0x1ba>
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <UART_SetConfig+0x19a>
 8003934:	2b10      	cmp	r3, #16
 8003936:	d008      	beq.n	800394a <UART_SetConfig+0x1aa>
 8003938:	e00f      	b.n	800395a <UART_SetConfig+0x1ba>
 800393a:	2300      	movs	r3, #0
 800393c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003940:	e06d      	b.n	8003a1e <UART_SetConfig+0x27e>
 8003942:	2302      	movs	r3, #2
 8003944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003948:	e069      	b.n	8003a1e <UART_SetConfig+0x27e>
 800394a:	2304      	movs	r3, #4
 800394c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003950:	e065      	b.n	8003a1e <UART_SetConfig+0x27e>
 8003952:	2308      	movs	r3, #8
 8003954:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003958:	e061      	b.n	8003a1e <UART_SetConfig+0x27e>
 800395a:	2310      	movs	r3, #16
 800395c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003960:	e05d      	b.n	8003a1e <UART_SetConfig+0x27e>
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a4b      	ldr	r2, [pc, #300]	@ (8003a94 <UART_SetConfig+0x2f4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d125      	bne.n	80039b8 <UART_SetConfig+0x218>
 800396c:	4b46      	ldr	r3, [pc, #280]	@ (8003a88 <UART_SetConfig+0x2e8>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003972:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003976:	2bc0      	cmp	r3, #192	@ 0xc0
 8003978:	d016      	beq.n	80039a8 <UART_SetConfig+0x208>
 800397a:	2bc0      	cmp	r3, #192	@ 0xc0
 800397c:	d818      	bhi.n	80039b0 <UART_SetConfig+0x210>
 800397e:	2b80      	cmp	r3, #128	@ 0x80
 8003980:	d00a      	beq.n	8003998 <UART_SetConfig+0x1f8>
 8003982:	2b80      	cmp	r3, #128	@ 0x80
 8003984:	d814      	bhi.n	80039b0 <UART_SetConfig+0x210>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <UART_SetConfig+0x1f0>
 800398a:	2b40      	cmp	r3, #64	@ 0x40
 800398c:	d008      	beq.n	80039a0 <UART_SetConfig+0x200>
 800398e:	e00f      	b.n	80039b0 <UART_SetConfig+0x210>
 8003990:	2300      	movs	r3, #0
 8003992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003996:	e042      	b.n	8003a1e <UART_SetConfig+0x27e>
 8003998:	2302      	movs	r3, #2
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800399e:	e03e      	b.n	8003a1e <UART_SetConfig+0x27e>
 80039a0:	2304      	movs	r3, #4
 80039a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039a6:	e03a      	b.n	8003a1e <UART_SetConfig+0x27e>
 80039a8:	2308      	movs	r3, #8
 80039aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ae:	e036      	b.n	8003a1e <UART_SetConfig+0x27e>
 80039b0:	2310      	movs	r3, #16
 80039b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039b6:	e032      	b.n	8003a1e <UART_SetConfig+0x27e>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a30      	ldr	r2, [pc, #192]	@ (8003a80 <UART_SetConfig+0x2e0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d12a      	bne.n	8003a18 <UART_SetConfig+0x278>
 80039c2:	4b31      	ldr	r3, [pc, #196]	@ (8003a88 <UART_SetConfig+0x2e8>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039d0:	d01a      	beq.n	8003a08 <UART_SetConfig+0x268>
 80039d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039d6:	d81b      	bhi.n	8003a10 <UART_SetConfig+0x270>
 80039d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039dc:	d00c      	beq.n	80039f8 <UART_SetConfig+0x258>
 80039de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039e2:	d815      	bhi.n	8003a10 <UART_SetConfig+0x270>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <UART_SetConfig+0x250>
 80039e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ec:	d008      	beq.n	8003a00 <UART_SetConfig+0x260>
 80039ee:	e00f      	b.n	8003a10 <UART_SetConfig+0x270>
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039f6:	e012      	b.n	8003a1e <UART_SetConfig+0x27e>
 80039f8:	2302      	movs	r3, #2
 80039fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039fe:	e00e      	b.n	8003a1e <UART_SetConfig+0x27e>
 8003a00:	2304      	movs	r3, #4
 8003a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a06:	e00a      	b.n	8003a1e <UART_SetConfig+0x27e>
 8003a08:	2308      	movs	r3, #8
 8003a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a0e:	e006      	b.n	8003a1e <UART_SetConfig+0x27e>
 8003a10:	2310      	movs	r3, #16
 8003a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a16:	e002      	b.n	8003a1e <UART_SetConfig+0x27e>
 8003a18:	2310      	movs	r3, #16
 8003a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a17      	ldr	r2, [pc, #92]	@ (8003a80 <UART_SetConfig+0x2e0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	f040 80a8 	bne.w	8003b7a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d834      	bhi.n	8003a9c <UART_SetConfig+0x2fc>
 8003a32:	a201      	add	r2, pc, #4	@ (adr r2, 8003a38 <UART_SetConfig+0x298>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003a5d 	.word	0x08003a5d
 8003a3c:	08003a9d 	.word	0x08003a9d
 8003a40:	08003a65 	.word	0x08003a65
 8003a44:	08003a9d 	.word	0x08003a9d
 8003a48:	08003a6b 	.word	0x08003a6b
 8003a4c:	08003a9d 	.word	0x08003a9d
 8003a50:	08003a9d 	.word	0x08003a9d
 8003a54:	08003a9d 	.word	0x08003a9d
 8003a58:	08003a73 	.word	0x08003a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a5c:	f7fe faca 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8003a60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a62:	e021      	b.n	8003aa8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a64:	4b0c      	ldr	r3, [pc, #48]	@ (8003a98 <UART_SetConfig+0x2f8>)
 8003a66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a68:	e01e      	b.n	8003aa8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a6a:	f7fe fa55 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8003a6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a70:	e01a      	b.n	8003aa8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a78:	e016      	b.n	8003aa8 <UART_SetConfig+0x308>
 8003a7a:	bf00      	nop
 8003a7c:	cfff69f3 	.word	0xcfff69f3
 8003a80:	40008000 	.word	0x40008000
 8003a84:	40013800 	.word	0x40013800
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40004400 	.word	0x40004400
 8003a90:	40004800 	.word	0x40004800
 8003a94:	40004c00 	.word	0x40004c00
 8003a98:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003aa6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 812a 	beq.w	8003d04 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	4a9e      	ldr	r2, [pc, #632]	@ (8003d30 <UART_SetConfig+0x590>)
 8003ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aba:	461a      	mov	r2, r3
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4413      	add	r3, r2
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d305      	bcc.n	8003ae0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d903      	bls.n	8003ae8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ae6:	e10d      	b.n	8003d04 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aea:	2200      	movs	r2, #0
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	60fa      	str	r2, [r7, #12]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	4a8e      	ldr	r2, [pc, #568]	@ (8003d30 <UART_SetConfig+0x590>)
 8003af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2200      	movs	r2, #0
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b0a:	f7fc fbd9 	bl	80002c0 <__aeabi_uldivmod>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	020b      	lsls	r3, r1, #8
 8003b20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b24:	0202      	lsls	r2, r0, #8
 8003b26:	6979      	ldr	r1, [r7, #20]
 8003b28:	6849      	ldr	r1, [r1, #4]
 8003b2a:	0849      	lsrs	r1, r1, #1
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	460c      	mov	r4, r1
 8003b30:	4605      	mov	r5, r0
 8003b32:	eb12 0804 	adds.w	r8, r2, r4
 8003b36:	eb43 0905 	adc.w	r9, r3, r5
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	469a      	mov	sl, r3
 8003b42:	4693      	mov	fp, r2
 8003b44:	4652      	mov	r2, sl
 8003b46:	465b      	mov	r3, fp
 8003b48:	4640      	mov	r0, r8
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	f7fc fbb8 	bl	80002c0 <__aeabi_uldivmod>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4613      	mov	r3, r2
 8003b56:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b5e:	d308      	bcc.n	8003b72 <UART_SetConfig+0x3d2>
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b66:	d204      	bcs.n	8003b72 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6a3a      	ldr	r2, [r7, #32]
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	e0c8      	b.n	8003d04 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b78:	e0c4      	b.n	8003d04 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b82:	d167      	bne.n	8003c54 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003b84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d828      	bhi.n	8003bde <UART_SetConfig+0x43e>
 8003b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b94 <UART_SetConfig+0x3f4>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003bb9 	.word	0x08003bb9
 8003b98:	08003bc1 	.word	0x08003bc1
 8003b9c:	08003bc9 	.word	0x08003bc9
 8003ba0:	08003bdf 	.word	0x08003bdf
 8003ba4:	08003bcf 	.word	0x08003bcf
 8003ba8:	08003bdf 	.word	0x08003bdf
 8003bac:	08003bdf 	.word	0x08003bdf
 8003bb0:	08003bdf 	.word	0x08003bdf
 8003bb4:	08003bd7 	.word	0x08003bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb8:	f7fe fa1c 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8003bbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bbe:	e014      	b.n	8003bea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bc0:	f7fe fa2e 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 8003bc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bc6:	e010      	b.n	8003bea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8003d34 <UART_SetConfig+0x594>)
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bcc:	e00d      	b.n	8003bea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bce:	f7fe f9a3 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8003bd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bd4:	e009      	b.n	8003bea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bdc:	e005      	b.n	8003bea <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003be8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8089 	beq.w	8003d04 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	4a4e      	ldr	r2, [pc, #312]	@ (8003d30 <UART_SetConfig+0x590>)
 8003bf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c04:	005a      	lsls	r2, r3, #1
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	441a      	add	r2, r3
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	2b0f      	cmp	r3, #15
 8003c1c:	d916      	bls.n	8003c4c <UART_SetConfig+0x4ac>
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c24:	d212      	bcs.n	8003c4c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	f023 030f 	bic.w	r3, r3, #15
 8003c2e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	8bfb      	ldrh	r3, [r7, #30]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	8bfa      	ldrh	r2, [r7, #30]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	e05b      	b.n	8003d04 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c52:	e057      	b.n	8003d04 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d828      	bhi.n	8003cae <UART_SetConfig+0x50e>
 8003c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c64 <UART_SetConfig+0x4c4>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c89 	.word	0x08003c89
 8003c68:	08003c91 	.word	0x08003c91
 8003c6c:	08003c99 	.word	0x08003c99
 8003c70:	08003caf 	.word	0x08003caf
 8003c74:	08003c9f 	.word	0x08003c9f
 8003c78:	08003caf 	.word	0x08003caf
 8003c7c:	08003caf 	.word	0x08003caf
 8003c80:	08003caf 	.word	0x08003caf
 8003c84:	08003ca7 	.word	0x08003ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c88:	f7fe f9b4 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8003c8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c8e:	e014      	b.n	8003cba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c90:	f7fe f9c6 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 8003c94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c96:	e010      	b.n	8003cba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c98:	4b26      	ldr	r3, [pc, #152]	@ (8003d34 <UART_SetConfig+0x594>)
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c9c:	e00d      	b.n	8003cba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9e:	f7fe f93b 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8003ca2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ca4:	e009      	b.n	8003cba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003caa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cac:	e005      	b.n	8003cba <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003cb8:	bf00      	nop
    }

    if (pclk != 0U)
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d021      	beq.n	8003d04 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8003d30 <UART_SetConfig+0x590>)
 8003cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	fbb3 f2f2 	udiv	r2, r3, r2
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	441a      	add	r2, r3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	2b0f      	cmp	r3, #15
 8003ce8:	d909      	bls.n	8003cfe <UART_SetConfig+0x55e>
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf0:	d205      	bcs.n	8003cfe <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60da      	str	r2, [r3, #12]
 8003cfc:	e002      	b.n	8003d04 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2200      	movs	r2, #0
 8003d18:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003d20:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3730      	adds	r7, #48	@ 0x30
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2e:	bf00      	nop
 8003d30:	080053a0 	.word	0x080053a0
 8003d34:	00f42400 	.word	0x00f42400

08003d38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01a      	beq.n	8003e4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e36:	d10a      	bne.n	8003e4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	605a      	str	r2, [r3, #4]
  }
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b098      	sub	sp, #96	@ 0x60
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e8c:	f7fc ff8e 	bl	8000dac <HAL_GetTick>
 8003e90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d12f      	bne.n	8003f00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ea0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f88e 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d022      	beq.n	8003f00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ece:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ede:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e6      	bne.n	8003eba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e063      	b.n	8003fc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d149      	bne.n	8003fa2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f16:	2200      	movs	r2, #0
 8003f18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f857 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d03c      	beq.n	8003fa2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	623b      	str	r3, [r7, #32]
   return(result);
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f46:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e6      	bne.n	8003f28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3308      	adds	r3, #8
 8003f60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3308      	adds	r3, #8
 8003f78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f7a:	61fa      	str	r2, [r7, #28]
 8003f7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	69b9      	ldr	r1, [r7, #24]
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	e841 2300 	strex	r3, r2, [r1]
 8003f86:	617b      	str	r3, [r7, #20]
   return(result);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1e5      	bne.n	8003f5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e012      	b.n	8003fc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3758      	adds	r7, #88	@ 0x58
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe0:	e04f      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fe8:	d04b      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fea:	f7fc fedf 	bl	8000dac <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d302      	bcc.n	8004000 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e04e      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d037      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b80      	cmp	r3, #128	@ 0x80
 8004016:	d034      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b40      	cmp	r3, #64	@ 0x40
 800401c:	d031      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b08      	cmp	r3, #8
 800402a:	d110      	bne.n	800404e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2208      	movs	r2, #8
 8004032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f838 	bl	80040aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2208      	movs	r2, #8
 800403e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e029      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800405c:	d111      	bne.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f81e 	bl	80040aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e00f      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4013      	ands	r3, r2
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	429a      	cmp	r2, r3
 8004090:	bf0c      	ite	eq
 8004092:	2301      	moveq	r3, #1
 8004094:	2300      	movne	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	429a      	cmp	r2, r3
 800409e:	d0a0      	beq.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b095      	sub	sp, #84	@ 0x54
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80040d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e6      	bne.n	80040b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3308      	adds	r3, #8
 80040ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3308      	adds	r3, #8
 8004106:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004108:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800410a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800410e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e3      	bne.n	80040e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d118      	bne.n	8004156 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	60bb      	str	r3, [r7, #8]
   return(result);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f023 0310 	bic.w	r3, r3, #16
 8004138:	647b      	str	r3, [r7, #68]	@ 0x44
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	6979      	ldr	r1, [r7, #20]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	613b      	str	r3, [r7, #16]
   return(result);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e6      	bne.n	8004124 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800416a:	bf00      	nop
 800416c:	3754      	adds	r7, #84	@ 0x54
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7ff faf1 	bl	8003774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b088      	sub	sp, #32
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	6979      	ldr	r1, [r7, #20]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	613b      	str	r3, [r7, #16]
   return(result);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e6      	bne.n	80041a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff fabc 	bl	8003760 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041e8:	bf00      	nop
 80041ea:	3720      	adds	r7, #32
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_UARTEx_DisableFifoMode+0x16>
 800423e:	2302      	movs	r3, #2
 8004240:	e027      	b.n	8004292 <HAL_UARTEx_DisableFifoMode+0x66>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2224      	movs	r2, #36	@ 0x24
 800424e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0201 	bic.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004270:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e02d      	b.n	8004312 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2224      	movs	r2, #36	@ 0x24
 80042c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0201 	bic.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f850 	bl	8004398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800432e:	2302      	movs	r3, #2
 8004330:	e02d      	b.n	800438e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2224      	movs	r2, #36	@ 0x24
 800433e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0201 	bic.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f812 	bl	8004398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d108      	bne.n	80043ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80043b8:	e031      	b.n	800441e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80043ba:	2308      	movs	r3, #8
 80043bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80043be:	2308      	movs	r3, #8
 80043c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	0e5b      	lsrs	r3, r3, #25
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	0f5b      	lsrs	r3, r3, #29
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043e2:	7bbb      	ldrb	r3, [r7, #14]
 80043e4:	7b3a      	ldrb	r2, [r7, #12]
 80043e6:	4911      	ldr	r1, [pc, #68]	@ (800442c <UARTEx_SetNbDataToProcess+0x94>)
 80043e8:	5c8a      	ldrb	r2, [r1, r2]
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80043ee:	7b3a      	ldrb	r2, [r7, #12]
 80043f0:	490f      	ldr	r1, [pc, #60]	@ (8004430 <UARTEx_SetNbDataToProcess+0x98>)
 80043f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	7b7a      	ldrb	r2, [r7, #13]
 8004404:	4909      	ldr	r1, [pc, #36]	@ (800442c <UARTEx_SetNbDataToProcess+0x94>)
 8004406:	5c8a      	ldrb	r2, [r1, r2]
 8004408:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800440c:	7b7a      	ldrb	r2, [r7, #13]
 800440e:	4908      	ldr	r1, [pc, #32]	@ (8004430 <UARTEx_SetNbDataToProcess+0x98>)
 8004410:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004412:	fb93 f3f2 	sdiv	r3, r3, r2
 8004416:	b29a      	uxth	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	080053b8 	.word	0x080053b8
 8004430:	080053c0 	.word	0x080053c0

08004434 <std>:
 8004434:	2300      	movs	r3, #0
 8004436:	b510      	push	{r4, lr}
 8004438:	4604      	mov	r4, r0
 800443a:	e9c0 3300 	strd	r3, r3, [r0]
 800443e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004442:	6083      	str	r3, [r0, #8]
 8004444:	8181      	strh	r1, [r0, #12]
 8004446:	6643      	str	r3, [r0, #100]	@ 0x64
 8004448:	81c2      	strh	r2, [r0, #14]
 800444a:	6183      	str	r3, [r0, #24]
 800444c:	4619      	mov	r1, r3
 800444e:	2208      	movs	r2, #8
 8004450:	305c      	adds	r0, #92	@ 0x5c
 8004452:	f000 f9f9 	bl	8004848 <memset>
 8004456:	4b0d      	ldr	r3, [pc, #52]	@ (800448c <std+0x58>)
 8004458:	6263      	str	r3, [r4, #36]	@ 0x24
 800445a:	4b0d      	ldr	r3, [pc, #52]	@ (8004490 <std+0x5c>)
 800445c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800445e:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <std+0x60>)
 8004460:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004462:	4b0d      	ldr	r3, [pc, #52]	@ (8004498 <std+0x64>)
 8004464:	6323      	str	r3, [r4, #48]	@ 0x30
 8004466:	4b0d      	ldr	r3, [pc, #52]	@ (800449c <std+0x68>)
 8004468:	6224      	str	r4, [r4, #32]
 800446a:	429c      	cmp	r4, r3
 800446c:	d006      	beq.n	800447c <std+0x48>
 800446e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004472:	4294      	cmp	r4, r2
 8004474:	d002      	beq.n	800447c <std+0x48>
 8004476:	33d0      	adds	r3, #208	@ 0xd0
 8004478:	429c      	cmp	r4, r3
 800447a:	d105      	bne.n	8004488 <std+0x54>
 800447c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004484:	f000 ba58 	b.w	8004938 <__retarget_lock_init_recursive>
 8004488:	bd10      	pop	{r4, pc}
 800448a:	bf00      	nop
 800448c:	08004699 	.word	0x08004699
 8004490:	080046bb 	.word	0x080046bb
 8004494:	080046f3 	.word	0x080046f3
 8004498:	08004717 	.word	0x08004717
 800449c:	2000016c 	.word	0x2000016c

080044a0 <stdio_exit_handler>:
 80044a0:	4a02      	ldr	r2, [pc, #8]	@ (80044ac <stdio_exit_handler+0xc>)
 80044a2:	4903      	ldr	r1, [pc, #12]	@ (80044b0 <stdio_exit_handler+0x10>)
 80044a4:	4803      	ldr	r0, [pc, #12]	@ (80044b4 <stdio_exit_handler+0x14>)
 80044a6:	f000 b869 	b.w	800457c <_fwalk_sglue>
 80044aa:	bf00      	nop
 80044ac:	2000000c 	.word	0x2000000c
 80044b0:	080051d5 	.word	0x080051d5
 80044b4:	2000001c 	.word	0x2000001c

080044b8 <cleanup_stdio>:
 80044b8:	6841      	ldr	r1, [r0, #4]
 80044ba:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <cleanup_stdio+0x34>)
 80044bc:	4299      	cmp	r1, r3
 80044be:	b510      	push	{r4, lr}
 80044c0:	4604      	mov	r4, r0
 80044c2:	d001      	beq.n	80044c8 <cleanup_stdio+0x10>
 80044c4:	f000 fe86 	bl	80051d4 <_fflush_r>
 80044c8:	68a1      	ldr	r1, [r4, #8]
 80044ca:	4b09      	ldr	r3, [pc, #36]	@ (80044f0 <cleanup_stdio+0x38>)
 80044cc:	4299      	cmp	r1, r3
 80044ce:	d002      	beq.n	80044d6 <cleanup_stdio+0x1e>
 80044d0:	4620      	mov	r0, r4
 80044d2:	f000 fe7f 	bl	80051d4 <_fflush_r>
 80044d6:	68e1      	ldr	r1, [r4, #12]
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <cleanup_stdio+0x3c>)
 80044da:	4299      	cmp	r1, r3
 80044dc:	d004      	beq.n	80044e8 <cleanup_stdio+0x30>
 80044de:	4620      	mov	r0, r4
 80044e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044e4:	f000 be76 	b.w	80051d4 <_fflush_r>
 80044e8:	bd10      	pop	{r4, pc}
 80044ea:	bf00      	nop
 80044ec:	2000016c 	.word	0x2000016c
 80044f0:	200001d4 	.word	0x200001d4
 80044f4:	2000023c 	.word	0x2000023c

080044f8 <global_stdio_init.part.0>:
 80044f8:	b510      	push	{r4, lr}
 80044fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <global_stdio_init.part.0+0x30>)
 80044fc:	4c0b      	ldr	r4, [pc, #44]	@ (800452c <global_stdio_init.part.0+0x34>)
 80044fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004530 <global_stdio_init.part.0+0x38>)
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	4620      	mov	r0, r4
 8004504:	2200      	movs	r2, #0
 8004506:	2104      	movs	r1, #4
 8004508:	f7ff ff94 	bl	8004434 <std>
 800450c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004510:	2201      	movs	r2, #1
 8004512:	2109      	movs	r1, #9
 8004514:	f7ff ff8e 	bl	8004434 <std>
 8004518:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800451c:	2202      	movs	r2, #2
 800451e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004522:	2112      	movs	r1, #18
 8004524:	f7ff bf86 	b.w	8004434 <std>
 8004528:	200002a4 	.word	0x200002a4
 800452c:	2000016c 	.word	0x2000016c
 8004530:	080044a1 	.word	0x080044a1

08004534 <__sfp_lock_acquire>:
 8004534:	4801      	ldr	r0, [pc, #4]	@ (800453c <__sfp_lock_acquire+0x8>)
 8004536:	f000 ba00 	b.w	800493a <__retarget_lock_acquire_recursive>
 800453a:	bf00      	nop
 800453c:	200002ad 	.word	0x200002ad

08004540 <__sfp_lock_release>:
 8004540:	4801      	ldr	r0, [pc, #4]	@ (8004548 <__sfp_lock_release+0x8>)
 8004542:	f000 b9fb 	b.w	800493c <__retarget_lock_release_recursive>
 8004546:	bf00      	nop
 8004548:	200002ad 	.word	0x200002ad

0800454c <__sinit>:
 800454c:	b510      	push	{r4, lr}
 800454e:	4604      	mov	r4, r0
 8004550:	f7ff fff0 	bl	8004534 <__sfp_lock_acquire>
 8004554:	6a23      	ldr	r3, [r4, #32]
 8004556:	b11b      	cbz	r3, 8004560 <__sinit+0x14>
 8004558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800455c:	f7ff bff0 	b.w	8004540 <__sfp_lock_release>
 8004560:	4b04      	ldr	r3, [pc, #16]	@ (8004574 <__sinit+0x28>)
 8004562:	6223      	str	r3, [r4, #32]
 8004564:	4b04      	ldr	r3, [pc, #16]	@ (8004578 <__sinit+0x2c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f5      	bne.n	8004558 <__sinit+0xc>
 800456c:	f7ff ffc4 	bl	80044f8 <global_stdio_init.part.0>
 8004570:	e7f2      	b.n	8004558 <__sinit+0xc>
 8004572:	bf00      	nop
 8004574:	080044b9 	.word	0x080044b9
 8004578:	200002a4 	.word	0x200002a4

0800457c <_fwalk_sglue>:
 800457c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004580:	4607      	mov	r7, r0
 8004582:	4688      	mov	r8, r1
 8004584:	4614      	mov	r4, r2
 8004586:	2600      	movs	r6, #0
 8004588:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800458c:	f1b9 0901 	subs.w	r9, r9, #1
 8004590:	d505      	bpl.n	800459e <_fwalk_sglue+0x22>
 8004592:	6824      	ldr	r4, [r4, #0]
 8004594:	2c00      	cmp	r4, #0
 8004596:	d1f7      	bne.n	8004588 <_fwalk_sglue+0xc>
 8004598:	4630      	mov	r0, r6
 800459a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800459e:	89ab      	ldrh	r3, [r5, #12]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d907      	bls.n	80045b4 <_fwalk_sglue+0x38>
 80045a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045a8:	3301      	adds	r3, #1
 80045aa:	d003      	beq.n	80045b4 <_fwalk_sglue+0x38>
 80045ac:	4629      	mov	r1, r5
 80045ae:	4638      	mov	r0, r7
 80045b0:	47c0      	blx	r8
 80045b2:	4306      	orrs	r6, r0
 80045b4:	3568      	adds	r5, #104	@ 0x68
 80045b6:	e7e9      	b.n	800458c <_fwalk_sglue+0x10>

080045b8 <iprintf>:
 80045b8:	b40f      	push	{r0, r1, r2, r3}
 80045ba:	b507      	push	{r0, r1, r2, lr}
 80045bc:	4906      	ldr	r1, [pc, #24]	@ (80045d8 <iprintf+0x20>)
 80045be:	ab04      	add	r3, sp, #16
 80045c0:	6808      	ldr	r0, [r1, #0]
 80045c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80045c6:	6881      	ldr	r1, [r0, #8]
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	f000 fadb 	bl	8004b84 <_vfiprintf_r>
 80045ce:	b003      	add	sp, #12
 80045d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80045d4:	b004      	add	sp, #16
 80045d6:	4770      	bx	lr
 80045d8:	20000018 	.word	0x20000018

080045dc <_puts_r>:
 80045dc:	6a03      	ldr	r3, [r0, #32]
 80045de:	b570      	push	{r4, r5, r6, lr}
 80045e0:	6884      	ldr	r4, [r0, #8]
 80045e2:	4605      	mov	r5, r0
 80045e4:	460e      	mov	r6, r1
 80045e6:	b90b      	cbnz	r3, 80045ec <_puts_r+0x10>
 80045e8:	f7ff ffb0 	bl	800454c <__sinit>
 80045ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045ee:	07db      	lsls	r3, r3, #31
 80045f0:	d405      	bmi.n	80045fe <_puts_r+0x22>
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	0598      	lsls	r0, r3, #22
 80045f6:	d402      	bmi.n	80045fe <_puts_r+0x22>
 80045f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045fa:	f000 f99e 	bl	800493a <__retarget_lock_acquire_recursive>
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	0719      	lsls	r1, r3, #28
 8004602:	d502      	bpl.n	800460a <_puts_r+0x2e>
 8004604:	6923      	ldr	r3, [r4, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d135      	bne.n	8004676 <_puts_r+0x9a>
 800460a:	4621      	mov	r1, r4
 800460c:	4628      	mov	r0, r5
 800460e:	f000 f8c5 	bl	800479c <__swsetup_r>
 8004612:	b380      	cbz	r0, 8004676 <_puts_r+0x9a>
 8004614:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004618:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800461a:	07da      	lsls	r2, r3, #31
 800461c:	d405      	bmi.n	800462a <_puts_r+0x4e>
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	059b      	lsls	r3, r3, #22
 8004622:	d402      	bmi.n	800462a <_puts_r+0x4e>
 8004624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004626:	f000 f989 	bl	800493c <__retarget_lock_release_recursive>
 800462a:	4628      	mov	r0, r5
 800462c:	bd70      	pop	{r4, r5, r6, pc}
 800462e:	2b00      	cmp	r3, #0
 8004630:	da04      	bge.n	800463c <_puts_r+0x60>
 8004632:	69a2      	ldr	r2, [r4, #24]
 8004634:	429a      	cmp	r2, r3
 8004636:	dc17      	bgt.n	8004668 <_puts_r+0x8c>
 8004638:	290a      	cmp	r1, #10
 800463a:	d015      	beq.n	8004668 <_puts_r+0x8c>
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	6022      	str	r2, [r4, #0]
 8004642:	7019      	strb	r1, [r3, #0]
 8004644:	68a3      	ldr	r3, [r4, #8]
 8004646:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800464a:	3b01      	subs	r3, #1
 800464c:	60a3      	str	r3, [r4, #8]
 800464e:	2900      	cmp	r1, #0
 8004650:	d1ed      	bne.n	800462e <_puts_r+0x52>
 8004652:	2b00      	cmp	r3, #0
 8004654:	da11      	bge.n	800467a <_puts_r+0x9e>
 8004656:	4622      	mov	r2, r4
 8004658:	210a      	movs	r1, #10
 800465a:	4628      	mov	r0, r5
 800465c:	f000 f85f 	bl	800471e <__swbuf_r>
 8004660:	3001      	adds	r0, #1
 8004662:	d0d7      	beq.n	8004614 <_puts_r+0x38>
 8004664:	250a      	movs	r5, #10
 8004666:	e7d7      	b.n	8004618 <_puts_r+0x3c>
 8004668:	4622      	mov	r2, r4
 800466a:	4628      	mov	r0, r5
 800466c:	f000 f857 	bl	800471e <__swbuf_r>
 8004670:	3001      	adds	r0, #1
 8004672:	d1e7      	bne.n	8004644 <_puts_r+0x68>
 8004674:	e7ce      	b.n	8004614 <_puts_r+0x38>
 8004676:	3e01      	subs	r6, #1
 8004678:	e7e4      	b.n	8004644 <_puts_r+0x68>
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	6022      	str	r2, [r4, #0]
 8004680:	220a      	movs	r2, #10
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	e7ee      	b.n	8004664 <_puts_r+0x88>
	...

08004688 <puts>:
 8004688:	4b02      	ldr	r3, [pc, #8]	@ (8004694 <puts+0xc>)
 800468a:	4601      	mov	r1, r0
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	f7ff bfa5 	b.w	80045dc <_puts_r>
 8004692:	bf00      	nop
 8004694:	20000018 	.word	0x20000018

08004698 <__sread>:
 8004698:	b510      	push	{r4, lr}
 800469a:	460c      	mov	r4, r1
 800469c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a0:	f000 f8fc 	bl	800489c <_read_r>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	bfab      	itete	ge
 80046a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80046aa:	89a3      	ldrhlt	r3, [r4, #12]
 80046ac:	181b      	addge	r3, r3, r0
 80046ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80046b2:	bfac      	ite	ge
 80046b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80046b6:	81a3      	strhlt	r3, [r4, #12]
 80046b8:	bd10      	pop	{r4, pc}

080046ba <__swrite>:
 80046ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046be:	461f      	mov	r7, r3
 80046c0:	898b      	ldrh	r3, [r1, #12]
 80046c2:	05db      	lsls	r3, r3, #23
 80046c4:	4605      	mov	r5, r0
 80046c6:	460c      	mov	r4, r1
 80046c8:	4616      	mov	r6, r2
 80046ca:	d505      	bpl.n	80046d8 <__swrite+0x1e>
 80046cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d0:	2302      	movs	r3, #2
 80046d2:	2200      	movs	r2, #0
 80046d4:	f000 f8d0 	bl	8004878 <_lseek_r>
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046e2:	81a3      	strh	r3, [r4, #12]
 80046e4:	4632      	mov	r2, r6
 80046e6:	463b      	mov	r3, r7
 80046e8:	4628      	mov	r0, r5
 80046ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046ee:	f000 b8e7 	b.w	80048c0 <_write_r>

080046f2 <__sseek>:
 80046f2:	b510      	push	{r4, lr}
 80046f4:	460c      	mov	r4, r1
 80046f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046fa:	f000 f8bd 	bl	8004878 <_lseek_r>
 80046fe:	1c43      	adds	r3, r0, #1
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	bf15      	itete	ne
 8004704:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004706:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800470a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800470e:	81a3      	strheq	r3, [r4, #12]
 8004710:	bf18      	it	ne
 8004712:	81a3      	strhne	r3, [r4, #12]
 8004714:	bd10      	pop	{r4, pc}

08004716 <__sclose>:
 8004716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800471a:	f000 b89d 	b.w	8004858 <_close_r>

0800471e <__swbuf_r>:
 800471e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004720:	460e      	mov	r6, r1
 8004722:	4614      	mov	r4, r2
 8004724:	4605      	mov	r5, r0
 8004726:	b118      	cbz	r0, 8004730 <__swbuf_r+0x12>
 8004728:	6a03      	ldr	r3, [r0, #32]
 800472a:	b90b      	cbnz	r3, 8004730 <__swbuf_r+0x12>
 800472c:	f7ff ff0e 	bl	800454c <__sinit>
 8004730:	69a3      	ldr	r3, [r4, #24]
 8004732:	60a3      	str	r3, [r4, #8]
 8004734:	89a3      	ldrh	r3, [r4, #12]
 8004736:	071a      	lsls	r2, r3, #28
 8004738:	d501      	bpl.n	800473e <__swbuf_r+0x20>
 800473a:	6923      	ldr	r3, [r4, #16]
 800473c:	b943      	cbnz	r3, 8004750 <__swbuf_r+0x32>
 800473e:	4621      	mov	r1, r4
 8004740:	4628      	mov	r0, r5
 8004742:	f000 f82b 	bl	800479c <__swsetup_r>
 8004746:	b118      	cbz	r0, 8004750 <__swbuf_r+0x32>
 8004748:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800474c:	4638      	mov	r0, r7
 800474e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	6922      	ldr	r2, [r4, #16]
 8004754:	1a98      	subs	r0, r3, r2
 8004756:	6963      	ldr	r3, [r4, #20]
 8004758:	b2f6      	uxtb	r6, r6
 800475a:	4283      	cmp	r3, r0
 800475c:	4637      	mov	r7, r6
 800475e:	dc05      	bgt.n	800476c <__swbuf_r+0x4e>
 8004760:	4621      	mov	r1, r4
 8004762:	4628      	mov	r0, r5
 8004764:	f000 fd36 	bl	80051d4 <_fflush_r>
 8004768:	2800      	cmp	r0, #0
 800476a:	d1ed      	bne.n	8004748 <__swbuf_r+0x2a>
 800476c:	68a3      	ldr	r3, [r4, #8]
 800476e:	3b01      	subs	r3, #1
 8004770:	60a3      	str	r3, [r4, #8]
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	6022      	str	r2, [r4, #0]
 8004778:	701e      	strb	r6, [r3, #0]
 800477a:	6962      	ldr	r2, [r4, #20]
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	429a      	cmp	r2, r3
 8004780:	d004      	beq.n	800478c <__swbuf_r+0x6e>
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	07db      	lsls	r3, r3, #31
 8004786:	d5e1      	bpl.n	800474c <__swbuf_r+0x2e>
 8004788:	2e0a      	cmp	r6, #10
 800478a:	d1df      	bne.n	800474c <__swbuf_r+0x2e>
 800478c:	4621      	mov	r1, r4
 800478e:	4628      	mov	r0, r5
 8004790:	f000 fd20 	bl	80051d4 <_fflush_r>
 8004794:	2800      	cmp	r0, #0
 8004796:	d0d9      	beq.n	800474c <__swbuf_r+0x2e>
 8004798:	e7d6      	b.n	8004748 <__swbuf_r+0x2a>
	...

0800479c <__swsetup_r>:
 800479c:	b538      	push	{r3, r4, r5, lr}
 800479e:	4b29      	ldr	r3, [pc, #164]	@ (8004844 <__swsetup_r+0xa8>)
 80047a0:	4605      	mov	r5, r0
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	460c      	mov	r4, r1
 80047a6:	b118      	cbz	r0, 80047b0 <__swsetup_r+0x14>
 80047a8:	6a03      	ldr	r3, [r0, #32]
 80047aa:	b90b      	cbnz	r3, 80047b0 <__swsetup_r+0x14>
 80047ac:	f7ff fece 	bl	800454c <__sinit>
 80047b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047b4:	0719      	lsls	r1, r3, #28
 80047b6:	d422      	bmi.n	80047fe <__swsetup_r+0x62>
 80047b8:	06da      	lsls	r2, r3, #27
 80047ba:	d407      	bmi.n	80047cc <__swsetup_r+0x30>
 80047bc:	2209      	movs	r2, #9
 80047be:	602a      	str	r2, [r5, #0]
 80047c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047c4:	81a3      	strh	r3, [r4, #12]
 80047c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047ca:	e033      	b.n	8004834 <__swsetup_r+0x98>
 80047cc:	0758      	lsls	r0, r3, #29
 80047ce:	d512      	bpl.n	80047f6 <__swsetup_r+0x5a>
 80047d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047d2:	b141      	cbz	r1, 80047e6 <__swsetup_r+0x4a>
 80047d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047d8:	4299      	cmp	r1, r3
 80047da:	d002      	beq.n	80047e2 <__swsetup_r+0x46>
 80047dc:	4628      	mov	r0, r5
 80047de:	f000 f8af 	bl	8004940 <_free_r>
 80047e2:	2300      	movs	r3, #0
 80047e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047ec:	81a3      	strh	r3, [r4, #12]
 80047ee:	2300      	movs	r3, #0
 80047f0:	6063      	str	r3, [r4, #4]
 80047f2:	6923      	ldr	r3, [r4, #16]
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	89a3      	ldrh	r3, [r4, #12]
 80047f8:	f043 0308 	orr.w	r3, r3, #8
 80047fc:	81a3      	strh	r3, [r4, #12]
 80047fe:	6923      	ldr	r3, [r4, #16]
 8004800:	b94b      	cbnz	r3, 8004816 <__swsetup_r+0x7a>
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800480c:	d003      	beq.n	8004816 <__swsetup_r+0x7a>
 800480e:	4621      	mov	r1, r4
 8004810:	4628      	mov	r0, r5
 8004812:	f000 fd2d 	bl	8005270 <__smakebuf_r>
 8004816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800481a:	f013 0201 	ands.w	r2, r3, #1
 800481e:	d00a      	beq.n	8004836 <__swsetup_r+0x9a>
 8004820:	2200      	movs	r2, #0
 8004822:	60a2      	str	r2, [r4, #8]
 8004824:	6962      	ldr	r2, [r4, #20]
 8004826:	4252      	negs	r2, r2
 8004828:	61a2      	str	r2, [r4, #24]
 800482a:	6922      	ldr	r2, [r4, #16]
 800482c:	b942      	cbnz	r2, 8004840 <__swsetup_r+0xa4>
 800482e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004832:	d1c5      	bne.n	80047c0 <__swsetup_r+0x24>
 8004834:	bd38      	pop	{r3, r4, r5, pc}
 8004836:	0799      	lsls	r1, r3, #30
 8004838:	bf58      	it	pl
 800483a:	6962      	ldrpl	r2, [r4, #20]
 800483c:	60a2      	str	r2, [r4, #8]
 800483e:	e7f4      	b.n	800482a <__swsetup_r+0x8e>
 8004840:	2000      	movs	r0, #0
 8004842:	e7f7      	b.n	8004834 <__swsetup_r+0x98>
 8004844:	20000018 	.word	0x20000018

08004848 <memset>:
 8004848:	4402      	add	r2, r0
 800484a:	4603      	mov	r3, r0
 800484c:	4293      	cmp	r3, r2
 800484e:	d100      	bne.n	8004852 <memset+0xa>
 8004850:	4770      	bx	lr
 8004852:	f803 1b01 	strb.w	r1, [r3], #1
 8004856:	e7f9      	b.n	800484c <memset+0x4>

08004858 <_close_r>:
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	4d06      	ldr	r5, [pc, #24]	@ (8004874 <_close_r+0x1c>)
 800485c:	2300      	movs	r3, #0
 800485e:	4604      	mov	r4, r0
 8004860:	4608      	mov	r0, r1
 8004862:	602b      	str	r3, [r5, #0]
 8004864:	f7fc f997 	bl	8000b96 <_close>
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d102      	bne.n	8004872 <_close_r+0x1a>
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	b103      	cbz	r3, 8004872 <_close_r+0x1a>
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	bd38      	pop	{r3, r4, r5, pc}
 8004874:	200002a8 	.word	0x200002a8

08004878 <_lseek_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	4d07      	ldr	r5, [pc, #28]	@ (8004898 <_lseek_r+0x20>)
 800487c:	4604      	mov	r4, r0
 800487e:	4608      	mov	r0, r1
 8004880:	4611      	mov	r1, r2
 8004882:	2200      	movs	r2, #0
 8004884:	602a      	str	r2, [r5, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	f7fc f9ac 	bl	8000be4 <_lseek>
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	d102      	bne.n	8004896 <_lseek_r+0x1e>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	b103      	cbz	r3, 8004896 <_lseek_r+0x1e>
 8004894:	6023      	str	r3, [r4, #0]
 8004896:	bd38      	pop	{r3, r4, r5, pc}
 8004898:	200002a8 	.word	0x200002a8

0800489c <_read_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	4d07      	ldr	r5, [pc, #28]	@ (80048bc <_read_r+0x20>)
 80048a0:	4604      	mov	r4, r0
 80048a2:	4608      	mov	r0, r1
 80048a4:	4611      	mov	r1, r2
 80048a6:	2200      	movs	r2, #0
 80048a8:	602a      	str	r2, [r5, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f7fc f956 	bl	8000b5c <_read>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d102      	bne.n	80048ba <_read_r+0x1e>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	b103      	cbz	r3, 80048ba <_read_r+0x1e>
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	200002a8 	.word	0x200002a8

080048c0 <_write_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4d07      	ldr	r5, [pc, #28]	@ (80048e0 <_write_r+0x20>)
 80048c4:	4604      	mov	r4, r0
 80048c6:	4608      	mov	r0, r1
 80048c8:	4611      	mov	r1, r2
 80048ca:	2200      	movs	r2, #0
 80048cc:	602a      	str	r2, [r5, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f7fb fe8c 	bl	80005ec <_write>
 80048d4:	1c43      	adds	r3, r0, #1
 80048d6:	d102      	bne.n	80048de <_write_r+0x1e>
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	b103      	cbz	r3, 80048de <_write_r+0x1e>
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	bd38      	pop	{r3, r4, r5, pc}
 80048e0:	200002a8 	.word	0x200002a8

080048e4 <__errno>:
 80048e4:	4b01      	ldr	r3, [pc, #4]	@ (80048ec <__errno+0x8>)
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000018 	.word	0x20000018

080048f0 <__libc_init_array>:
 80048f0:	b570      	push	{r4, r5, r6, lr}
 80048f2:	4d0d      	ldr	r5, [pc, #52]	@ (8004928 <__libc_init_array+0x38>)
 80048f4:	4c0d      	ldr	r4, [pc, #52]	@ (800492c <__libc_init_array+0x3c>)
 80048f6:	1b64      	subs	r4, r4, r5
 80048f8:	10a4      	asrs	r4, r4, #2
 80048fa:	2600      	movs	r6, #0
 80048fc:	42a6      	cmp	r6, r4
 80048fe:	d109      	bne.n	8004914 <__libc_init_array+0x24>
 8004900:	4d0b      	ldr	r5, [pc, #44]	@ (8004930 <__libc_init_array+0x40>)
 8004902:	4c0c      	ldr	r4, [pc, #48]	@ (8004934 <__libc_init_array+0x44>)
 8004904:	f000 fd22 	bl	800534c <_init>
 8004908:	1b64      	subs	r4, r4, r5
 800490a:	10a4      	asrs	r4, r4, #2
 800490c:	2600      	movs	r6, #0
 800490e:	42a6      	cmp	r6, r4
 8004910:	d105      	bne.n	800491e <__libc_init_array+0x2e>
 8004912:	bd70      	pop	{r4, r5, r6, pc}
 8004914:	f855 3b04 	ldr.w	r3, [r5], #4
 8004918:	4798      	blx	r3
 800491a:	3601      	adds	r6, #1
 800491c:	e7ee      	b.n	80048fc <__libc_init_array+0xc>
 800491e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004922:	4798      	blx	r3
 8004924:	3601      	adds	r6, #1
 8004926:	e7f2      	b.n	800490e <__libc_init_array+0x1e>
 8004928:	08005404 	.word	0x08005404
 800492c:	08005404 	.word	0x08005404
 8004930:	08005404 	.word	0x08005404
 8004934:	08005408 	.word	0x08005408

08004938 <__retarget_lock_init_recursive>:
 8004938:	4770      	bx	lr

0800493a <__retarget_lock_acquire_recursive>:
 800493a:	4770      	bx	lr

0800493c <__retarget_lock_release_recursive>:
 800493c:	4770      	bx	lr
	...

08004940 <_free_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4605      	mov	r5, r0
 8004944:	2900      	cmp	r1, #0
 8004946:	d041      	beq.n	80049cc <_free_r+0x8c>
 8004948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800494c:	1f0c      	subs	r4, r1, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	bfb8      	it	lt
 8004952:	18e4      	addlt	r4, r4, r3
 8004954:	f000 f8e0 	bl	8004b18 <__malloc_lock>
 8004958:	4a1d      	ldr	r2, [pc, #116]	@ (80049d0 <_free_r+0x90>)
 800495a:	6813      	ldr	r3, [r2, #0]
 800495c:	b933      	cbnz	r3, 800496c <_free_r+0x2c>
 800495e:	6063      	str	r3, [r4, #4]
 8004960:	6014      	str	r4, [r2, #0]
 8004962:	4628      	mov	r0, r5
 8004964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004968:	f000 b8dc 	b.w	8004b24 <__malloc_unlock>
 800496c:	42a3      	cmp	r3, r4
 800496e:	d908      	bls.n	8004982 <_free_r+0x42>
 8004970:	6820      	ldr	r0, [r4, #0]
 8004972:	1821      	adds	r1, r4, r0
 8004974:	428b      	cmp	r3, r1
 8004976:	bf01      	itttt	eq
 8004978:	6819      	ldreq	r1, [r3, #0]
 800497a:	685b      	ldreq	r3, [r3, #4]
 800497c:	1809      	addeq	r1, r1, r0
 800497e:	6021      	streq	r1, [r4, #0]
 8004980:	e7ed      	b.n	800495e <_free_r+0x1e>
 8004982:	461a      	mov	r2, r3
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	b10b      	cbz	r3, 800498c <_free_r+0x4c>
 8004988:	42a3      	cmp	r3, r4
 800498a:	d9fa      	bls.n	8004982 <_free_r+0x42>
 800498c:	6811      	ldr	r1, [r2, #0]
 800498e:	1850      	adds	r0, r2, r1
 8004990:	42a0      	cmp	r0, r4
 8004992:	d10b      	bne.n	80049ac <_free_r+0x6c>
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	4401      	add	r1, r0
 8004998:	1850      	adds	r0, r2, r1
 800499a:	4283      	cmp	r3, r0
 800499c:	6011      	str	r1, [r2, #0]
 800499e:	d1e0      	bne.n	8004962 <_free_r+0x22>
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	6053      	str	r3, [r2, #4]
 80049a6:	4408      	add	r0, r1
 80049a8:	6010      	str	r0, [r2, #0]
 80049aa:	e7da      	b.n	8004962 <_free_r+0x22>
 80049ac:	d902      	bls.n	80049b4 <_free_r+0x74>
 80049ae:	230c      	movs	r3, #12
 80049b0:	602b      	str	r3, [r5, #0]
 80049b2:	e7d6      	b.n	8004962 <_free_r+0x22>
 80049b4:	6820      	ldr	r0, [r4, #0]
 80049b6:	1821      	adds	r1, r4, r0
 80049b8:	428b      	cmp	r3, r1
 80049ba:	bf04      	itt	eq
 80049bc:	6819      	ldreq	r1, [r3, #0]
 80049be:	685b      	ldreq	r3, [r3, #4]
 80049c0:	6063      	str	r3, [r4, #4]
 80049c2:	bf04      	itt	eq
 80049c4:	1809      	addeq	r1, r1, r0
 80049c6:	6021      	streq	r1, [r4, #0]
 80049c8:	6054      	str	r4, [r2, #4]
 80049ca:	e7ca      	b.n	8004962 <_free_r+0x22>
 80049cc:	bd38      	pop	{r3, r4, r5, pc}
 80049ce:	bf00      	nop
 80049d0:	200002b4 	.word	0x200002b4

080049d4 <sbrk_aligned>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004a14 <sbrk_aligned+0x40>)
 80049d8:	460c      	mov	r4, r1
 80049da:	6831      	ldr	r1, [r6, #0]
 80049dc:	4605      	mov	r5, r0
 80049de:	b911      	cbnz	r1, 80049e6 <sbrk_aligned+0x12>
 80049e0:	f000 fca4 	bl	800532c <_sbrk_r>
 80049e4:	6030      	str	r0, [r6, #0]
 80049e6:	4621      	mov	r1, r4
 80049e8:	4628      	mov	r0, r5
 80049ea:	f000 fc9f 	bl	800532c <_sbrk_r>
 80049ee:	1c43      	adds	r3, r0, #1
 80049f0:	d103      	bne.n	80049fa <sbrk_aligned+0x26>
 80049f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80049f6:	4620      	mov	r0, r4
 80049f8:	bd70      	pop	{r4, r5, r6, pc}
 80049fa:	1cc4      	adds	r4, r0, #3
 80049fc:	f024 0403 	bic.w	r4, r4, #3
 8004a00:	42a0      	cmp	r0, r4
 8004a02:	d0f8      	beq.n	80049f6 <sbrk_aligned+0x22>
 8004a04:	1a21      	subs	r1, r4, r0
 8004a06:	4628      	mov	r0, r5
 8004a08:	f000 fc90 	bl	800532c <_sbrk_r>
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d1f2      	bne.n	80049f6 <sbrk_aligned+0x22>
 8004a10:	e7ef      	b.n	80049f2 <sbrk_aligned+0x1e>
 8004a12:	bf00      	nop
 8004a14:	200002b0 	.word	0x200002b0

08004a18 <_malloc_r>:
 8004a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a1c:	1ccd      	adds	r5, r1, #3
 8004a1e:	f025 0503 	bic.w	r5, r5, #3
 8004a22:	3508      	adds	r5, #8
 8004a24:	2d0c      	cmp	r5, #12
 8004a26:	bf38      	it	cc
 8004a28:	250c      	movcc	r5, #12
 8004a2a:	2d00      	cmp	r5, #0
 8004a2c:	4606      	mov	r6, r0
 8004a2e:	db01      	blt.n	8004a34 <_malloc_r+0x1c>
 8004a30:	42a9      	cmp	r1, r5
 8004a32:	d904      	bls.n	8004a3e <_malloc_r+0x26>
 8004a34:	230c      	movs	r3, #12
 8004a36:	6033      	str	r3, [r6, #0]
 8004a38:	2000      	movs	r0, #0
 8004a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b14 <_malloc_r+0xfc>
 8004a42:	f000 f869 	bl	8004b18 <__malloc_lock>
 8004a46:	f8d8 3000 	ldr.w	r3, [r8]
 8004a4a:	461c      	mov	r4, r3
 8004a4c:	bb44      	cbnz	r4, 8004aa0 <_malloc_r+0x88>
 8004a4e:	4629      	mov	r1, r5
 8004a50:	4630      	mov	r0, r6
 8004a52:	f7ff ffbf 	bl	80049d4 <sbrk_aligned>
 8004a56:	1c43      	adds	r3, r0, #1
 8004a58:	4604      	mov	r4, r0
 8004a5a:	d158      	bne.n	8004b0e <_malloc_r+0xf6>
 8004a5c:	f8d8 4000 	ldr.w	r4, [r8]
 8004a60:	4627      	mov	r7, r4
 8004a62:	2f00      	cmp	r7, #0
 8004a64:	d143      	bne.n	8004aee <_malloc_r+0xd6>
 8004a66:	2c00      	cmp	r4, #0
 8004a68:	d04b      	beq.n	8004b02 <_malloc_r+0xea>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	4639      	mov	r1, r7
 8004a6e:	4630      	mov	r0, r6
 8004a70:	eb04 0903 	add.w	r9, r4, r3
 8004a74:	f000 fc5a 	bl	800532c <_sbrk_r>
 8004a78:	4581      	cmp	r9, r0
 8004a7a:	d142      	bne.n	8004b02 <_malloc_r+0xea>
 8004a7c:	6821      	ldr	r1, [r4, #0]
 8004a7e:	1a6d      	subs	r5, r5, r1
 8004a80:	4629      	mov	r1, r5
 8004a82:	4630      	mov	r0, r6
 8004a84:	f7ff ffa6 	bl	80049d4 <sbrk_aligned>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d03a      	beq.n	8004b02 <_malloc_r+0xea>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	442b      	add	r3, r5
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	f8d8 3000 	ldr.w	r3, [r8]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	bb62      	cbnz	r2, 8004af4 <_malloc_r+0xdc>
 8004a9a:	f8c8 7000 	str.w	r7, [r8]
 8004a9e:	e00f      	b.n	8004ac0 <_malloc_r+0xa8>
 8004aa0:	6822      	ldr	r2, [r4, #0]
 8004aa2:	1b52      	subs	r2, r2, r5
 8004aa4:	d420      	bmi.n	8004ae8 <_malloc_r+0xd0>
 8004aa6:	2a0b      	cmp	r2, #11
 8004aa8:	d917      	bls.n	8004ada <_malloc_r+0xc2>
 8004aaa:	1961      	adds	r1, r4, r5
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	6025      	str	r5, [r4, #0]
 8004ab0:	bf18      	it	ne
 8004ab2:	6059      	strne	r1, [r3, #4]
 8004ab4:	6863      	ldr	r3, [r4, #4]
 8004ab6:	bf08      	it	eq
 8004ab8:	f8c8 1000 	streq.w	r1, [r8]
 8004abc:	5162      	str	r2, [r4, r5]
 8004abe:	604b      	str	r3, [r1, #4]
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f000 f82f 	bl	8004b24 <__malloc_unlock>
 8004ac6:	f104 000b 	add.w	r0, r4, #11
 8004aca:	1d23      	adds	r3, r4, #4
 8004acc:	f020 0007 	bic.w	r0, r0, #7
 8004ad0:	1ac2      	subs	r2, r0, r3
 8004ad2:	bf1c      	itt	ne
 8004ad4:	1a1b      	subne	r3, r3, r0
 8004ad6:	50a3      	strne	r3, [r4, r2]
 8004ad8:	e7af      	b.n	8004a3a <_malloc_r+0x22>
 8004ada:	6862      	ldr	r2, [r4, #4]
 8004adc:	42a3      	cmp	r3, r4
 8004ade:	bf0c      	ite	eq
 8004ae0:	f8c8 2000 	streq.w	r2, [r8]
 8004ae4:	605a      	strne	r2, [r3, #4]
 8004ae6:	e7eb      	b.n	8004ac0 <_malloc_r+0xa8>
 8004ae8:	4623      	mov	r3, r4
 8004aea:	6864      	ldr	r4, [r4, #4]
 8004aec:	e7ae      	b.n	8004a4c <_malloc_r+0x34>
 8004aee:	463c      	mov	r4, r7
 8004af0:	687f      	ldr	r7, [r7, #4]
 8004af2:	e7b6      	b.n	8004a62 <_malloc_r+0x4a>
 8004af4:	461a      	mov	r2, r3
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	42a3      	cmp	r3, r4
 8004afa:	d1fb      	bne.n	8004af4 <_malloc_r+0xdc>
 8004afc:	2300      	movs	r3, #0
 8004afe:	6053      	str	r3, [r2, #4]
 8004b00:	e7de      	b.n	8004ac0 <_malloc_r+0xa8>
 8004b02:	230c      	movs	r3, #12
 8004b04:	6033      	str	r3, [r6, #0]
 8004b06:	4630      	mov	r0, r6
 8004b08:	f000 f80c 	bl	8004b24 <__malloc_unlock>
 8004b0c:	e794      	b.n	8004a38 <_malloc_r+0x20>
 8004b0e:	6005      	str	r5, [r0, #0]
 8004b10:	e7d6      	b.n	8004ac0 <_malloc_r+0xa8>
 8004b12:	bf00      	nop
 8004b14:	200002b4 	.word	0x200002b4

08004b18 <__malloc_lock>:
 8004b18:	4801      	ldr	r0, [pc, #4]	@ (8004b20 <__malloc_lock+0x8>)
 8004b1a:	f7ff bf0e 	b.w	800493a <__retarget_lock_acquire_recursive>
 8004b1e:	bf00      	nop
 8004b20:	200002ac 	.word	0x200002ac

08004b24 <__malloc_unlock>:
 8004b24:	4801      	ldr	r0, [pc, #4]	@ (8004b2c <__malloc_unlock+0x8>)
 8004b26:	f7ff bf09 	b.w	800493c <__retarget_lock_release_recursive>
 8004b2a:	bf00      	nop
 8004b2c:	200002ac 	.word	0x200002ac

08004b30 <__sfputc_r>:
 8004b30:	6893      	ldr	r3, [r2, #8]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	b410      	push	{r4}
 8004b38:	6093      	str	r3, [r2, #8]
 8004b3a:	da08      	bge.n	8004b4e <__sfputc_r+0x1e>
 8004b3c:	6994      	ldr	r4, [r2, #24]
 8004b3e:	42a3      	cmp	r3, r4
 8004b40:	db01      	blt.n	8004b46 <__sfputc_r+0x16>
 8004b42:	290a      	cmp	r1, #10
 8004b44:	d103      	bne.n	8004b4e <__sfputc_r+0x1e>
 8004b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b4a:	f7ff bde8 	b.w	800471e <__swbuf_r>
 8004b4e:	6813      	ldr	r3, [r2, #0]
 8004b50:	1c58      	adds	r0, r3, #1
 8004b52:	6010      	str	r0, [r2, #0]
 8004b54:	7019      	strb	r1, [r3, #0]
 8004b56:	4608      	mov	r0, r1
 8004b58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <__sfputs_r>:
 8004b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b60:	4606      	mov	r6, r0
 8004b62:	460f      	mov	r7, r1
 8004b64:	4614      	mov	r4, r2
 8004b66:	18d5      	adds	r5, r2, r3
 8004b68:	42ac      	cmp	r4, r5
 8004b6a:	d101      	bne.n	8004b70 <__sfputs_r+0x12>
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	e007      	b.n	8004b80 <__sfputs_r+0x22>
 8004b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b74:	463a      	mov	r2, r7
 8004b76:	4630      	mov	r0, r6
 8004b78:	f7ff ffda 	bl	8004b30 <__sfputc_r>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	d1f3      	bne.n	8004b68 <__sfputs_r+0xa>
 8004b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b84 <_vfiprintf_r>:
 8004b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b88:	460d      	mov	r5, r1
 8004b8a:	b09d      	sub	sp, #116	@ 0x74
 8004b8c:	4614      	mov	r4, r2
 8004b8e:	4698      	mov	r8, r3
 8004b90:	4606      	mov	r6, r0
 8004b92:	b118      	cbz	r0, 8004b9c <_vfiprintf_r+0x18>
 8004b94:	6a03      	ldr	r3, [r0, #32]
 8004b96:	b90b      	cbnz	r3, 8004b9c <_vfiprintf_r+0x18>
 8004b98:	f7ff fcd8 	bl	800454c <__sinit>
 8004b9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b9e:	07d9      	lsls	r1, r3, #31
 8004ba0:	d405      	bmi.n	8004bae <_vfiprintf_r+0x2a>
 8004ba2:	89ab      	ldrh	r3, [r5, #12]
 8004ba4:	059a      	lsls	r2, r3, #22
 8004ba6:	d402      	bmi.n	8004bae <_vfiprintf_r+0x2a>
 8004ba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004baa:	f7ff fec6 	bl	800493a <__retarget_lock_acquire_recursive>
 8004bae:	89ab      	ldrh	r3, [r5, #12]
 8004bb0:	071b      	lsls	r3, r3, #28
 8004bb2:	d501      	bpl.n	8004bb8 <_vfiprintf_r+0x34>
 8004bb4:	692b      	ldr	r3, [r5, #16]
 8004bb6:	b99b      	cbnz	r3, 8004be0 <_vfiprintf_r+0x5c>
 8004bb8:	4629      	mov	r1, r5
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f7ff fdee 	bl	800479c <__swsetup_r>
 8004bc0:	b170      	cbz	r0, 8004be0 <_vfiprintf_r+0x5c>
 8004bc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004bc4:	07dc      	lsls	r4, r3, #31
 8004bc6:	d504      	bpl.n	8004bd2 <_vfiprintf_r+0x4e>
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bcc:	b01d      	add	sp, #116	@ 0x74
 8004bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd2:	89ab      	ldrh	r3, [r5, #12]
 8004bd4:	0598      	lsls	r0, r3, #22
 8004bd6:	d4f7      	bmi.n	8004bc8 <_vfiprintf_r+0x44>
 8004bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bda:	f7ff feaf 	bl	800493c <__retarget_lock_release_recursive>
 8004bde:	e7f3      	b.n	8004bc8 <_vfiprintf_r+0x44>
 8004be0:	2300      	movs	r3, #0
 8004be2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004be4:	2320      	movs	r3, #32
 8004be6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bea:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bee:	2330      	movs	r3, #48	@ 0x30
 8004bf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004da0 <_vfiprintf_r+0x21c>
 8004bf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bf8:	f04f 0901 	mov.w	r9, #1
 8004bfc:	4623      	mov	r3, r4
 8004bfe:	469a      	mov	sl, r3
 8004c00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c04:	b10a      	cbz	r2, 8004c0a <_vfiprintf_r+0x86>
 8004c06:	2a25      	cmp	r2, #37	@ 0x25
 8004c08:	d1f9      	bne.n	8004bfe <_vfiprintf_r+0x7a>
 8004c0a:	ebba 0b04 	subs.w	fp, sl, r4
 8004c0e:	d00b      	beq.n	8004c28 <_vfiprintf_r+0xa4>
 8004c10:	465b      	mov	r3, fp
 8004c12:	4622      	mov	r2, r4
 8004c14:	4629      	mov	r1, r5
 8004c16:	4630      	mov	r0, r6
 8004c18:	f7ff ffa1 	bl	8004b5e <__sfputs_r>
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	f000 80a7 	beq.w	8004d70 <_vfiprintf_r+0x1ec>
 8004c22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c24:	445a      	add	r2, fp
 8004c26:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c28:	f89a 3000 	ldrb.w	r3, [sl]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 809f 	beq.w	8004d70 <_vfiprintf_r+0x1ec>
 8004c32:	2300      	movs	r3, #0
 8004c34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c3c:	f10a 0a01 	add.w	sl, sl, #1
 8004c40:	9304      	str	r3, [sp, #16]
 8004c42:	9307      	str	r3, [sp, #28]
 8004c44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c48:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c4a:	4654      	mov	r4, sl
 8004c4c:	2205      	movs	r2, #5
 8004c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c52:	4853      	ldr	r0, [pc, #332]	@ (8004da0 <_vfiprintf_r+0x21c>)
 8004c54:	f7fb fae4 	bl	8000220 <memchr>
 8004c58:	9a04      	ldr	r2, [sp, #16]
 8004c5a:	b9d8      	cbnz	r0, 8004c94 <_vfiprintf_r+0x110>
 8004c5c:	06d1      	lsls	r1, r2, #27
 8004c5e:	bf44      	itt	mi
 8004c60:	2320      	movmi	r3, #32
 8004c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c66:	0713      	lsls	r3, r2, #28
 8004c68:	bf44      	itt	mi
 8004c6a:	232b      	movmi	r3, #43	@ 0x2b
 8004c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c70:	f89a 3000 	ldrb.w	r3, [sl]
 8004c74:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c76:	d015      	beq.n	8004ca4 <_vfiprintf_r+0x120>
 8004c78:	9a07      	ldr	r2, [sp, #28]
 8004c7a:	4654      	mov	r4, sl
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f04f 0c0a 	mov.w	ip, #10
 8004c82:	4621      	mov	r1, r4
 8004c84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c88:	3b30      	subs	r3, #48	@ 0x30
 8004c8a:	2b09      	cmp	r3, #9
 8004c8c:	d94b      	bls.n	8004d26 <_vfiprintf_r+0x1a2>
 8004c8e:	b1b0      	cbz	r0, 8004cbe <_vfiprintf_r+0x13a>
 8004c90:	9207      	str	r2, [sp, #28]
 8004c92:	e014      	b.n	8004cbe <_vfiprintf_r+0x13a>
 8004c94:	eba0 0308 	sub.w	r3, r0, r8
 8004c98:	fa09 f303 	lsl.w	r3, r9, r3
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	9304      	str	r3, [sp, #16]
 8004ca0:	46a2      	mov	sl, r4
 8004ca2:	e7d2      	b.n	8004c4a <_vfiprintf_r+0xc6>
 8004ca4:	9b03      	ldr	r3, [sp, #12]
 8004ca6:	1d19      	adds	r1, r3, #4
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	9103      	str	r1, [sp, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bfbb      	ittet	lt
 8004cb0:	425b      	neglt	r3, r3
 8004cb2:	f042 0202 	orrlt.w	r2, r2, #2
 8004cb6:	9307      	strge	r3, [sp, #28]
 8004cb8:	9307      	strlt	r3, [sp, #28]
 8004cba:	bfb8      	it	lt
 8004cbc:	9204      	strlt	r2, [sp, #16]
 8004cbe:	7823      	ldrb	r3, [r4, #0]
 8004cc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8004cc2:	d10a      	bne.n	8004cda <_vfiprintf_r+0x156>
 8004cc4:	7863      	ldrb	r3, [r4, #1]
 8004cc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cc8:	d132      	bne.n	8004d30 <_vfiprintf_r+0x1ac>
 8004cca:	9b03      	ldr	r3, [sp, #12]
 8004ccc:	1d1a      	adds	r2, r3, #4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	9203      	str	r2, [sp, #12]
 8004cd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cd6:	3402      	adds	r4, #2
 8004cd8:	9305      	str	r3, [sp, #20]
 8004cda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004db0 <_vfiprintf_r+0x22c>
 8004cde:	7821      	ldrb	r1, [r4, #0]
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	4650      	mov	r0, sl
 8004ce4:	f7fb fa9c 	bl	8000220 <memchr>
 8004ce8:	b138      	cbz	r0, 8004cfa <_vfiprintf_r+0x176>
 8004cea:	9b04      	ldr	r3, [sp, #16]
 8004cec:	eba0 000a 	sub.w	r0, r0, sl
 8004cf0:	2240      	movs	r2, #64	@ 0x40
 8004cf2:	4082      	lsls	r2, r0
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	3401      	adds	r4, #1
 8004cf8:	9304      	str	r3, [sp, #16]
 8004cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cfe:	4829      	ldr	r0, [pc, #164]	@ (8004da4 <_vfiprintf_r+0x220>)
 8004d00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d04:	2206      	movs	r2, #6
 8004d06:	f7fb fa8b 	bl	8000220 <memchr>
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	d03f      	beq.n	8004d8e <_vfiprintf_r+0x20a>
 8004d0e:	4b26      	ldr	r3, [pc, #152]	@ (8004da8 <_vfiprintf_r+0x224>)
 8004d10:	bb1b      	cbnz	r3, 8004d5a <_vfiprintf_r+0x1d6>
 8004d12:	9b03      	ldr	r3, [sp, #12]
 8004d14:	3307      	adds	r3, #7
 8004d16:	f023 0307 	bic.w	r3, r3, #7
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	9303      	str	r3, [sp, #12]
 8004d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d20:	443b      	add	r3, r7
 8004d22:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d24:	e76a      	b.n	8004bfc <_vfiprintf_r+0x78>
 8004d26:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	e7a8      	b.n	8004c82 <_vfiprintf_r+0xfe>
 8004d30:	2300      	movs	r3, #0
 8004d32:	3401      	adds	r4, #1
 8004d34:	9305      	str	r3, [sp, #20]
 8004d36:	4619      	mov	r1, r3
 8004d38:	f04f 0c0a 	mov.w	ip, #10
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d42:	3a30      	subs	r2, #48	@ 0x30
 8004d44:	2a09      	cmp	r2, #9
 8004d46:	d903      	bls.n	8004d50 <_vfiprintf_r+0x1cc>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0c6      	beq.n	8004cda <_vfiprintf_r+0x156>
 8004d4c:	9105      	str	r1, [sp, #20]
 8004d4e:	e7c4      	b.n	8004cda <_vfiprintf_r+0x156>
 8004d50:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d54:	4604      	mov	r4, r0
 8004d56:	2301      	movs	r3, #1
 8004d58:	e7f0      	b.n	8004d3c <_vfiprintf_r+0x1b8>
 8004d5a:	ab03      	add	r3, sp, #12
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	462a      	mov	r2, r5
 8004d60:	4b12      	ldr	r3, [pc, #72]	@ (8004dac <_vfiprintf_r+0x228>)
 8004d62:	a904      	add	r1, sp, #16
 8004d64:	4630      	mov	r0, r6
 8004d66:	f3af 8000 	nop.w
 8004d6a:	4607      	mov	r7, r0
 8004d6c:	1c78      	adds	r0, r7, #1
 8004d6e:	d1d6      	bne.n	8004d1e <_vfiprintf_r+0x19a>
 8004d70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d72:	07d9      	lsls	r1, r3, #31
 8004d74:	d405      	bmi.n	8004d82 <_vfiprintf_r+0x1fe>
 8004d76:	89ab      	ldrh	r3, [r5, #12]
 8004d78:	059a      	lsls	r2, r3, #22
 8004d7a:	d402      	bmi.n	8004d82 <_vfiprintf_r+0x1fe>
 8004d7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d7e:	f7ff fddd 	bl	800493c <__retarget_lock_release_recursive>
 8004d82:	89ab      	ldrh	r3, [r5, #12]
 8004d84:	065b      	lsls	r3, r3, #25
 8004d86:	f53f af1f 	bmi.w	8004bc8 <_vfiprintf_r+0x44>
 8004d8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d8c:	e71e      	b.n	8004bcc <_vfiprintf_r+0x48>
 8004d8e:	ab03      	add	r3, sp, #12
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	462a      	mov	r2, r5
 8004d94:	4b05      	ldr	r3, [pc, #20]	@ (8004dac <_vfiprintf_r+0x228>)
 8004d96:	a904      	add	r1, sp, #16
 8004d98:	4630      	mov	r0, r6
 8004d9a:	f000 f879 	bl	8004e90 <_printf_i>
 8004d9e:	e7e4      	b.n	8004d6a <_vfiprintf_r+0x1e6>
 8004da0:	080053c8 	.word	0x080053c8
 8004da4:	080053d2 	.word	0x080053d2
 8004da8:	00000000 	.word	0x00000000
 8004dac:	08004b5f 	.word	0x08004b5f
 8004db0:	080053ce 	.word	0x080053ce

08004db4 <_printf_common>:
 8004db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db8:	4616      	mov	r6, r2
 8004dba:	4698      	mov	r8, r3
 8004dbc:	688a      	ldr	r2, [r1, #8]
 8004dbe:	690b      	ldr	r3, [r1, #16]
 8004dc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	bfb8      	it	lt
 8004dc8:	4613      	movlt	r3, r2
 8004dca:	6033      	str	r3, [r6, #0]
 8004dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004dd0:	4607      	mov	r7, r0
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	b10a      	cbz	r2, 8004dda <_printf_common+0x26>
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	6033      	str	r3, [r6, #0]
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	0699      	lsls	r1, r3, #26
 8004dde:	bf42      	ittt	mi
 8004de0:	6833      	ldrmi	r3, [r6, #0]
 8004de2:	3302      	addmi	r3, #2
 8004de4:	6033      	strmi	r3, [r6, #0]
 8004de6:	6825      	ldr	r5, [r4, #0]
 8004de8:	f015 0506 	ands.w	r5, r5, #6
 8004dec:	d106      	bne.n	8004dfc <_printf_common+0x48>
 8004dee:	f104 0a19 	add.w	sl, r4, #25
 8004df2:	68e3      	ldr	r3, [r4, #12]
 8004df4:	6832      	ldr	r2, [r6, #0]
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	42ab      	cmp	r3, r5
 8004dfa:	dc26      	bgt.n	8004e4a <_printf_common+0x96>
 8004dfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e00:	6822      	ldr	r2, [r4, #0]
 8004e02:	3b00      	subs	r3, #0
 8004e04:	bf18      	it	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	0692      	lsls	r2, r2, #26
 8004e0a:	d42b      	bmi.n	8004e64 <_printf_common+0xb0>
 8004e0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e10:	4641      	mov	r1, r8
 8004e12:	4638      	mov	r0, r7
 8004e14:	47c8      	blx	r9
 8004e16:	3001      	adds	r0, #1
 8004e18:	d01e      	beq.n	8004e58 <_printf_common+0xa4>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	6922      	ldr	r2, [r4, #16]
 8004e1e:	f003 0306 	and.w	r3, r3, #6
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	bf02      	ittt	eq
 8004e26:	68e5      	ldreq	r5, [r4, #12]
 8004e28:	6833      	ldreq	r3, [r6, #0]
 8004e2a:	1aed      	subeq	r5, r5, r3
 8004e2c:	68a3      	ldr	r3, [r4, #8]
 8004e2e:	bf0c      	ite	eq
 8004e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e34:	2500      	movne	r5, #0
 8004e36:	4293      	cmp	r3, r2
 8004e38:	bfc4      	itt	gt
 8004e3a:	1a9b      	subgt	r3, r3, r2
 8004e3c:	18ed      	addgt	r5, r5, r3
 8004e3e:	2600      	movs	r6, #0
 8004e40:	341a      	adds	r4, #26
 8004e42:	42b5      	cmp	r5, r6
 8004e44:	d11a      	bne.n	8004e7c <_printf_common+0xc8>
 8004e46:	2000      	movs	r0, #0
 8004e48:	e008      	b.n	8004e5c <_printf_common+0xa8>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	4652      	mov	r2, sl
 8004e4e:	4641      	mov	r1, r8
 8004e50:	4638      	mov	r0, r7
 8004e52:	47c8      	blx	r9
 8004e54:	3001      	adds	r0, #1
 8004e56:	d103      	bne.n	8004e60 <_printf_common+0xac>
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e60:	3501      	adds	r5, #1
 8004e62:	e7c6      	b.n	8004df2 <_printf_common+0x3e>
 8004e64:	18e1      	adds	r1, r4, r3
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	2030      	movs	r0, #48	@ 0x30
 8004e6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e6e:	4422      	add	r2, r4
 8004e70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e78:	3302      	adds	r3, #2
 8004e7a:	e7c7      	b.n	8004e0c <_printf_common+0x58>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	4622      	mov	r2, r4
 8004e80:	4641      	mov	r1, r8
 8004e82:	4638      	mov	r0, r7
 8004e84:	47c8      	blx	r9
 8004e86:	3001      	adds	r0, #1
 8004e88:	d0e6      	beq.n	8004e58 <_printf_common+0xa4>
 8004e8a:	3601      	adds	r6, #1
 8004e8c:	e7d9      	b.n	8004e42 <_printf_common+0x8e>
	...

08004e90 <_printf_i>:
 8004e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e94:	7e0f      	ldrb	r7, [r1, #24]
 8004e96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e98:	2f78      	cmp	r7, #120	@ 0x78
 8004e9a:	4691      	mov	r9, r2
 8004e9c:	4680      	mov	r8, r0
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	469a      	mov	sl, r3
 8004ea2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ea6:	d807      	bhi.n	8004eb8 <_printf_i+0x28>
 8004ea8:	2f62      	cmp	r7, #98	@ 0x62
 8004eaa:	d80a      	bhi.n	8004ec2 <_printf_i+0x32>
 8004eac:	2f00      	cmp	r7, #0
 8004eae:	f000 80d1 	beq.w	8005054 <_printf_i+0x1c4>
 8004eb2:	2f58      	cmp	r7, #88	@ 0x58
 8004eb4:	f000 80b8 	beq.w	8005028 <_printf_i+0x198>
 8004eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ebc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ec0:	e03a      	b.n	8004f38 <_printf_i+0xa8>
 8004ec2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ec6:	2b15      	cmp	r3, #21
 8004ec8:	d8f6      	bhi.n	8004eb8 <_printf_i+0x28>
 8004eca:	a101      	add	r1, pc, #4	@ (adr r1, 8004ed0 <_printf_i+0x40>)
 8004ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ed0:	08004f29 	.word	0x08004f29
 8004ed4:	08004f3d 	.word	0x08004f3d
 8004ed8:	08004eb9 	.word	0x08004eb9
 8004edc:	08004eb9 	.word	0x08004eb9
 8004ee0:	08004eb9 	.word	0x08004eb9
 8004ee4:	08004eb9 	.word	0x08004eb9
 8004ee8:	08004f3d 	.word	0x08004f3d
 8004eec:	08004eb9 	.word	0x08004eb9
 8004ef0:	08004eb9 	.word	0x08004eb9
 8004ef4:	08004eb9 	.word	0x08004eb9
 8004ef8:	08004eb9 	.word	0x08004eb9
 8004efc:	0800503b 	.word	0x0800503b
 8004f00:	08004f67 	.word	0x08004f67
 8004f04:	08004ff5 	.word	0x08004ff5
 8004f08:	08004eb9 	.word	0x08004eb9
 8004f0c:	08004eb9 	.word	0x08004eb9
 8004f10:	0800505d 	.word	0x0800505d
 8004f14:	08004eb9 	.word	0x08004eb9
 8004f18:	08004f67 	.word	0x08004f67
 8004f1c:	08004eb9 	.word	0x08004eb9
 8004f20:	08004eb9 	.word	0x08004eb9
 8004f24:	08004ffd 	.word	0x08004ffd
 8004f28:	6833      	ldr	r3, [r6, #0]
 8004f2a:	1d1a      	adds	r2, r3, #4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6032      	str	r2, [r6, #0]
 8004f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e09c      	b.n	8005076 <_printf_i+0x1e6>
 8004f3c:	6833      	ldr	r3, [r6, #0]
 8004f3e:	6820      	ldr	r0, [r4, #0]
 8004f40:	1d19      	adds	r1, r3, #4
 8004f42:	6031      	str	r1, [r6, #0]
 8004f44:	0606      	lsls	r6, r0, #24
 8004f46:	d501      	bpl.n	8004f4c <_printf_i+0xbc>
 8004f48:	681d      	ldr	r5, [r3, #0]
 8004f4a:	e003      	b.n	8004f54 <_printf_i+0xc4>
 8004f4c:	0645      	lsls	r5, r0, #25
 8004f4e:	d5fb      	bpl.n	8004f48 <_printf_i+0xb8>
 8004f50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f54:	2d00      	cmp	r5, #0
 8004f56:	da03      	bge.n	8004f60 <_printf_i+0xd0>
 8004f58:	232d      	movs	r3, #45	@ 0x2d
 8004f5a:	426d      	negs	r5, r5
 8004f5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f60:	4858      	ldr	r0, [pc, #352]	@ (80050c4 <_printf_i+0x234>)
 8004f62:	230a      	movs	r3, #10
 8004f64:	e011      	b.n	8004f8a <_printf_i+0xfa>
 8004f66:	6821      	ldr	r1, [r4, #0]
 8004f68:	6833      	ldr	r3, [r6, #0]
 8004f6a:	0608      	lsls	r0, r1, #24
 8004f6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f70:	d402      	bmi.n	8004f78 <_printf_i+0xe8>
 8004f72:	0649      	lsls	r1, r1, #25
 8004f74:	bf48      	it	mi
 8004f76:	b2ad      	uxthmi	r5, r5
 8004f78:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f7a:	4852      	ldr	r0, [pc, #328]	@ (80050c4 <_printf_i+0x234>)
 8004f7c:	6033      	str	r3, [r6, #0]
 8004f7e:	bf14      	ite	ne
 8004f80:	230a      	movne	r3, #10
 8004f82:	2308      	moveq	r3, #8
 8004f84:	2100      	movs	r1, #0
 8004f86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f8a:	6866      	ldr	r6, [r4, #4]
 8004f8c:	60a6      	str	r6, [r4, #8]
 8004f8e:	2e00      	cmp	r6, #0
 8004f90:	db05      	blt.n	8004f9e <_printf_i+0x10e>
 8004f92:	6821      	ldr	r1, [r4, #0]
 8004f94:	432e      	orrs	r6, r5
 8004f96:	f021 0104 	bic.w	r1, r1, #4
 8004f9a:	6021      	str	r1, [r4, #0]
 8004f9c:	d04b      	beq.n	8005036 <_printf_i+0x1a6>
 8004f9e:	4616      	mov	r6, r2
 8004fa0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fa4:	fb03 5711 	mls	r7, r3, r1, r5
 8004fa8:	5dc7      	ldrb	r7, [r0, r7]
 8004faa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fae:	462f      	mov	r7, r5
 8004fb0:	42bb      	cmp	r3, r7
 8004fb2:	460d      	mov	r5, r1
 8004fb4:	d9f4      	bls.n	8004fa0 <_printf_i+0x110>
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d10b      	bne.n	8004fd2 <_printf_i+0x142>
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	07df      	lsls	r7, r3, #31
 8004fbe:	d508      	bpl.n	8004fd2 <_printf_i+0x142>
 8004fc0:	6923      	ldr	r3, [r4, #16]
 8004fc2:	6861      	ldr	r1, [r4, #4]
 8004fc4:	4299      	cmp	r1, r3
 8004fc6:	bfde      	ittt	le
 8004fc8:	2330      	movle	r3, #48	@ 0x30
 8004fca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fce:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004fd2:	1b92      	subs	r2, r2, r6
 8004fd4:	6122      	str	r2, [r4, #16]
 8004fd6:	f8cd a000 	str.w	sl, [sp]
 8004fda:	464b      	mov	r3, r9
 8004fdc:	aa03      	add	r2, sp, #12
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	f7ff fee7 	bl	8004db4 <_printf_common>
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d14a      	bne.n	8005080 <_printf_i+0x1f0>
 8004fea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fee:	b004      	add	sp, #16
 8004ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	f043 0320 	orr.w	r3, r3, #32
 8004ffa:	6023      	str	r3, [r4, #0]
 8004ffc:	4832      	ldr	r0, [pc, #200]	@ (80050c8 <_printf_i+0x238>)
 8004ffe:	2778      	movs	r7, #120	@ 0x78
 8005000:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	6831      	ldr	r1, [r6, #0]
 8005008:	061f      	lsls	r7, r3, #24
 800500a:	f851 5b04 	ldr.w	r5, [r1], #4
 800500e:	d402      	bmi.n	8005016 <_printf_i+0x186>
 8005010:	065f      	lsls	r7, r3, #25
 8005012:	bf48      	it	mi
 8005014:	b2ad      	uxthmi	r5, r5
 8005016:	6031      	str	r1, [r6, #0]
 8005018:	07d9      	lsls	r1, r3, #31
 800501a:	bf44      	itt	mi
 800501c:	f043 0320 	orrmi.w	r3, r3, #32
 8005020:	6023      	strmi	r3, [r4, #0]
 8005022:	b11d      	cbz	r5, 800502c <_printf_i+0x19c>
 8005024:	2310      	movs	r3, #16
 8005026:	e7ad      	b.n	8004f84 <_printf_i+0xf4>
 8005028:	4826      	ldr	r0, [pc, #152]	@ (80050c4 <_printf_i+0x234>)
 800502a:	e7e9      	b.n	8005000 <_printf_i+0x170>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	f023 0320 	bic.w	r3, r3, #32
 8005032:	6023      	str	r3, [r4, #0]
 8005034:	e7f6      	b.n	8005024 <_printf_i+0x194>
 8005036:	4616      	mov	r6, r2
 8005038:	e7bd      	b.n	8004fb6 <_printf_i+0x126>
 800503a:	6833      	ldr	r3, [r6, #0]
 800503c:	6825      	ldr	r5, [r4, #0]
 800503e:	6961      	ldr	r1, [r4, #20]
 8005040:	1d18      	adds	r0, r3, #4
 8005042:	6030      	str	r0, [r6, #0]
 8005044:	062e      	lsls	r6, r5, #24
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	d501      	bpl.n	800504e <_printf_i+0x1be>
 800504a:	6019      	str	r1, [r3, #0]
 800504c:	e002      	b.n	8005054 <_printf_i+0x1c4>
 800504e:	0668      	lsls	r0, r5, #25
 8005050:	d5fb      	bpl.n	800504a <_printf_i+0x1ba>
 8005052:	8019      	strh	r1, [r3, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	6123      	str	r3, [r4, #16]
 8005058:	4616      	mov	r6, r2
 800505a:	e7bc      	b.n	8004fd6 <_printf_i+0x146>
 800505c:	6833      	ldr	r3, [r6, #0]
 800505e:	1d1a      	adds	r2, r3, #4
 8005060:	6032      	str	r2, [r6, #0]
 8005062:	681e      	ldr	r6, [r3, #0]
 8005064:	6862      	ldr	r2, [r4, #4]
 8005066:	2100      	movs	r1, #0
 8005068:	4630      	mov	r0, r6
 800506a:	f7fb f8d9 	bl	8000220 <memchr>
 800506e:	b108      	cbz	r0, 8005074 <_printf_i+0x1e4>
 8005070:	1b80      	subs	r0, r0, r6
 8005072:	6060      	str	r0, [r4, #4]
 8005074:	6863      	ldr	r3, [r4, #4]
 8005076:	6123      	str	r3, [r4, #16]
 8005078:	2300      	movs	r3, #0
 800507a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800507e:	e7aa      	b.n	8004fd6 <_printf_i+0x146>
 8005080:	6923      	ldr	r3, [r4, #16]
 8005082:	4632      	mov	r2, r6
 8005084:	4649      	mov	r1, r9
 8005086:	4640      	mov	r0, r8
 8005088:	47d0      	blx	sl
 800508a:	3001      	adds	r0, #1
 800508c:	d0ad      	beq.n	8004fea <_printf_i+0x15a>
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	079b      	lsls	r3, r3, #30
 8005092:	d413      	bmi.n	80050bc <_printf_i+0x22c>
 8005094:	68e0      	ldr	r0, [r4, #12]
 8005096:	9b03      	ldr	r3, [sp, #12]
 8005098:	4298      	cmp	r0, r3
 800509a:	bfb8      	it	lt
 800509c:	4618      	movlt	r0, r3
 800509e:	e7a6      	b.n	8004fee <_printf_i+0x15e>
 80050a0:	2301      	movs	r3, #1
 80050a2:	4632      	mov	r2, r6
 80050a4:	4649      	mov	r1, r9
 80050a6:	4640      	mov	r0, r8
 80050a8:	47d0      	blx	sl
 80050aa:	3001      	adds	r0, #1
 80050ac:	d09d      	beq.n	8004fea <_printf_i+0x15a>
 80050ae:	3501      	adds	r5, #1
 80050b0:	68e3      	ldr	r3, [r4, #12]
 80050b2:	9903      	ldr	r1, [sp, #12]
 80050b4:	1a5b      	subs	r3, r3, r1
 80050b6:	42ab      	cmp	r3, r5
 80050b8:	dcf2      	bgt.n	80050a0 <_printf_i+0x210>
 80050ba:	e7eb      	b.n	8005094 <_printf_i+0x204>
 80050bc:	2500      	movs	r5, #0
 80050be:	f104 0619 	add.w	r6, r4, #25
 80050c2:	e7f5      	b.n	80050b0 <_printf_i+0x220>
 80050c4:	080053d9 	.word	0x080053d9
 80050c8:	080053ea 	.word	0x080053ea

080050cc <__sflush_r>:
 80050cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050d4:	0716      	lsls	r6, r2, #28
 80050d6:	4605      	mov	r5, r0
 80050d8:	460c      	mov	r4, r1
 80050da:	d454      	bmi.n	8005186 <__sflush_r+0xba>
 80050dc:	684b      	ldr	r3, [r1, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	dc02      	bgt.n	80050e8 <__sflush_r+0x1c>
 80050e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	dd48      	ble.n	800517a <__sflush_r+0xae>
 80050e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050ea:	2e00      	cmp	r6, #0
 80050ec:	d045      	beq.n	800517a <__sflush_r+0xae>
 80050ee:	2300      	movs	r3, #0
 80050f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80050f4:	682f      	ldr	r7, [r5, #0]
 80050f6:	6a21      	ldr	r1, [r4, #32]
 80050f8:	602b      	str	r3, [r5, #0]
 80050fa:	d030      	beq.n	800515e <__sflush_r+0x92>
 80050fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	0759      	lsls	r1, r3, #29
 8005102:	d505      	bpl.n	8005110 <__sflush_r+0x44>
 8005104:	6863      	ldr	r3, [r4, #4]
 8005106:	1ad2      	subs	r2, r2, r3
 8005108:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800510a:	b10b      	cbz	r3, 8005110 <__sflush_r+0x44>
 800510c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800510e:	1ad2      	subs	r2, r2, r3
 8005110:	2300      	movs	r3, #0
 8005112:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005114:	6a21      	ldr	r1, [r4, #32]
 8005116:	4628      	mov	r0, r5
 8005118:	47b0      	blx	r6
 800511a:	1c43      	adds	r3, r0, #1
 800511c:	89a3      	ldrh	r3, [r4, #12]
 800511e:	d106      	bne.n	800512e <__sflush_r+0x62>
 8005120:	6829      	ldr	r1, [r5, #0]
 8005122:	291d      	cmp	r1, #29
 8005124:	d82b      	bhi.n	800517e <__sflush_r+0xb2>
 8005126:	4a2a      	ldr	r2, [pc, #168]	@ (80051d0 <__sflush_r+0x104>)
 8005128:	40ca      	lsrs	r2, r1
 800512a:	07d6      	lsls	r6, r2, #31
 800512c:	d527      	bpl.n	800517e <__sflush_r+0xb2>
 800512e:	2200      	movs	r2, #0
 8005130:	6062      	str	r2, [r4, #4]
 8005132:	04d9      	lsls	r1, r3, #19
 8005134:	6922      	ldr	r2, [r4, #16]
 8005136:	6022      	str	r2, [r4, #0]
 8005138:	d504      	bpl.n	8005144 <__sflush_r+0x78>
 800513a:	1c42      	adds	r2, r0, #1
 800513c:	d101      	bne.n	8005142 <__sflush_r+0x76>
 800513e:	682b      	ldr	r3, [r5, #0]
 8005140:	b903      	cbnz	r3, 8005144 <__sflush_r+0x78>
 8005142:	6560      	str	r0, [r4, #84]	@ 0x54
 8005144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005146:	602f      	str	r7, [r5, #0]
 8005148:	b1b9      	cbz	r1, 800517a <__sflush_r+0xae>
 800514a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800514e:	4299      	cmp	r1, r3
 8005150:	d002      	beq.n	8005158 <__sflush_r+0x8c>
 8005152:	4628      	mov	r0, r5
 8005154:	f7ff fbf4 	bl	8004940 <_free_r>
 8005158:	2300      	movs	r3, #0
 800515a:	6363      	str	r3, [r4, #52]	@ 0x34
 800515c:	e00d      	b.n	800517a <__sflush_r+0xae>
 800515e:	2301      	movs	r3, #1
 8005160:	4628      	mov	r0, r5
 8005162:	47b0      	blx	r6
 8005164:	4602      	mov	r2, r0
 8005166:	1c50      	adds	r0, r2, #1
 8005168:	d1c9      	bne.n	80050fe <__sflush_r+0x32>
 800516a:	682b      	ldr	r3, [r5, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0c6      	beq.n	80050fe <__sflush_r+0x32>
 8005170:	2b1d      	cmp	r3, #29
 8005172:	d001      	beq.n	8005178 <__sflush_r+0xac>
 8005174:	2b16      	cmp	r3, #22
 8005176:	d11e      	bne.n	80051b6 <__sflush_r+0xea>
 8005178:	602f      	str	r7, [r5, #0]
 800517a:	2000      	movs	r0, #0
 800517c:	e022      	b.n	80051c4 <__sflush_r+0xf8>
 800517e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005182:	b21b      	sxth	r3, r3
 8005184:	e01b      	b.n	80051be <__sflush_r+0xf2>
 8005186:	690f      	ldr	r7, [r1, #16]
 8005188:	2f00      	cmp	r7, #0
 800518a:	d0f6      	beq.n	800517a <__sflush_r+0xae>
 800518c:	0793      	lsls	r3, r2, #30
 800518e:	680e      	ldr	r6, [r1, #0]
 8005190:	bf08      	it	eq
 8005192:	694b      	ldreq	r3, [r1, #20]
 8005194:	600f      	str	r7, [r1, #0]
 8005196:	bf18      	it	ne
 8005198:	2300      	movne	r3, #0
 800519a:	eba6 0807 	sub.w	r8, r6, r7
 800519e:	608b      	str	r3, [r1, #8]
 80051a0:	f1b8 0f00 	cmp.w	r8, #0
 80051a4:	dde9      	ble.n	800517a <__sflush_r+0xae>
 80051a6:	6a21      	ldr	r1, [r4, #32]
 80051a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80051aa:	4643      	mov	r3, r8
 80051ac:	463a      	mov	r2, r7
 80051ae:	4628      	mov	r0, r5
 80051b0:	47b0      	blx	r6
 80051b2:	2800      	cmp	r0, #0
 80051b4:	dc08      	bgt.n	80051c8 <__sflush_r+0xfc>
 80051b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051c8:	4407      	add	r7, r0
 80051ca:	eba8 0800 	sub.w	r8, r8, r0
 80051ce:	e7e7      	b.n	80051a0 <__sflush_r+0xd4>
 80051d0:	20400001 	.word	0x20400001

080051d4 <_fflush_r>:
 80051d4:	b538      	push	{r3, r4, r5, lr}
 80051d6:	690b      	ldr	r3, [r1, #16]
 80051d8:	4605      	mov	r5, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	b913      	cbnz	r3, 80051e4 <_fflush_r+0x10>
 80051de:	2500      	movs	r5, #0
 80051e0:	4628      	mov	r0, r5
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	b118      	cbz	r0, 80051ee <_fflush_r+0x1a>
 80051e6:	6a03      	ldr	r3, [r0, #32]
 80051e8:	b90b      	cbnz	r3, 80051ee <_fflush_r+0x1a>
 80051ea:	f7ff f9af 	bl	800454c <__sinit>
 80051ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f3      	beq.n	80051de <_fflush_r+0xa>
 80051f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80051f8:	07d0      	lsls	r0, r2, #31
 80051fa:	d404      	bmi.n	8005206 <_fflush_r+0x32>
 80051fc:	0599      	lsls	r1, r3, #22
 80051fe:	d402      	bmi.n	8005206 <_fflush_r+0x32>
 8005200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005202:	f7ff fb9a 	bl	800493a <__retarget_lock_acquire_recursive>
 8005206:	4628      	mov	r0, r5
 8005208:	4621      	mov	r1, r4
 800520a:	f7ff ff5f 	bl	80050cc <__sflush_r>
 800520e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005210:	07da      	lsls	r2, r3, #31
 8005212:	4605      	mov	r5, r0
 8005214:	d4e4      	bmi.n	80051e0 <_fflush_r+0xc>
 8005216:	89a3      	ldrh	r3, [r4, #12]
 8005218:	059b      	lsls	r3, r3, #22
 800521a:	d4e1      	bmi.n	80051e0 <_fflush_r+0xc>
 800521c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800521e:	f7ff fb8d 	bl	800493c <__retarget_lock_release_recursive>
 8005222:	e7dd      	b.n	80051e0 <_fflush_r+0xc>

08005224 <__swhatbuf_r>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	460c      	mov	r4, r1
 8005228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522c:	2900      	cmp	r1, #0
 800522e:	b096      	sub	sp, #88	@ 0x58
 8005230:	4615      	mov	r5, r2
 8005232:	461e      	mov	r6, r3
 8005234:	da0d      	bge.n	8005252 <__swhatbuf_r+0x2e>
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800523c:	f04f 0100 	mov.w	r1, #0
 8005240:	bf14      	ite	ne
 8005242:	2340      	movne	r3, #64	@ 0x40
 8005244:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005248:	2000      	movs	r0, #0
 800524a:	6031      	str	r1, [r6, #0]
 800524c:	602b      	str	r3, [r5, #0]
 800524e:	b016      	add	sp, #88	@ 0x58
 8005250:	bd70      	pop	{r4, r5, r6, pc}
 8005252:	466a      	mov	r2, sp
 8005254:	f000 f848 	bl	80052e8 <_fstat_r>
 8005258:	2800      	cmp	r0, #0
 800525a:	dbec      	blt.n	8005236 <__swhatbuf_r+0x12>
 800525c:	9901      	ldr	r1, [sp, #4]
 800525e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005262:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005266:	4259      	negs	r1, r3
 8005268:	4159      	adcs	r1, r3
 800526a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800526e:	e7eb      	b.n	8005248 <__swhatbuf_r+0x24>

08005270 <__smakebuf_r>:
 8005270:	898b      	ldrh	r3, [r1, #12]
 8005272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005274:	079d      	lsls	r5, r3, #30
 8005276:	4606      	mov	r6, r0
 8005278:	460c      	mov	r4, r1
 800527a:	d507      	bpl.n	800528c <__smakebuf_r+0x1c>
 800527c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005280:	6023      	str	r3, [r4, #0]
 8005282:	6123      	str	r3, [r4, #16]
 8005284:	2301      	movs	r3, #1
 8005286:	6163      	str	r3, [r4, #20]
 8005288:	b003      	add	sp, #12
 800528a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800528c:	ab01      	add	r3, sp, #4
 800528e:	466a      	mov	r2, sp
 8005290:	f7ff ffc8 	bl	8005224 <__swhatbuf_r>
 8005294:	9f00      	ldr	r7, [sp, #0]
 8005296:	4605      	mov	r5, r0
 8005298:	4639      	mov	r1, r7
 800529a:	4630      	mov	r0, r6
 800529c:	f7ff fbbc 	bl	8004a18 <_malloc_r>
 80052a0:	b948      	cbnz	r0, 80052b6 <__smakebuf_r+0x46>
 80052a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052a6:	059a      	lsls	r2, r3, #22
 80052a8:	d4ee      	bmi.n	8005288 <__smakebuf_r+0x18>
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	f043 0302 	orr.w	r3, r3, #2
 80052b2:	81a3      	strh	r3, [r4, #12]
 80052b4:	e7e2      	b.n	800527c <__smakebuf_r+0xc>
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	6020      	str	r0, [r4, #0]
 80052ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052be:	81a3      	strh	r3, [r4, #12]
 80052c0:	9b01      	ldr	r3, [sp, #4]
 80052c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80052c6:	b15b      	cbz	r3, 80052e0 <__smakebuf_r+0x70>
 80052c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052cc:	4630      	mov	r0, r6
 80052ce:	f000 f81d 	bl	800530c <_isatty_r>
 80052d2:	b128      	cbz	r0, 80052e0 <__smakebuf_r+0x70>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	f023 0303 	bic.w	r3, r3, #3
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	81a3      	strh	r3, [r4, #12]
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	431d      	orrs	r5, r3
 80052e4:	81a5      	strh	r5, [r4, #12]
 80052e6:	e7cf      	b.n	8005288 <__smakebuf_r+0x18>

080052e8 <_fstat_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	4d07      	ldr	r5, [pc, #28]	@ (8005308 <_fstat_r+0x20>)
 80052ec:	2300      	movs	r3, #0
 80052ee:	4604      	mov	r4, r0
 80052f0:	4608      	mov	r0, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	602b      	str	r3, [r5, #0]
 80052f6:	f7fb fc5a 	bl	8000bae <_fstat>
 80052fa:	1c43      	adds	r3, r0, #1
 80052fc:	d102      	bne.n	8005304 <_fstat_r+0x1c>
 80052fe:	682b      	ldr	r3, [r5, #0]
 8005300:	b103      	cbz	r3, 8005304 <_fstat_r+0x1c>
 8005302:	6023      	str	r3, [r4, #0]
 8005304:	bd38      	pop	{r3, r4, r5, pc}
 8005306:	bf00      	nop
 8005308:	200002a8 	.word	0x200002a8

0800530c <_isatty_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	4d06      	ldr	r5, [pc, #24]	@ (8005328 <_isatty_r+0x1c>)
 8005310:	2300      	movs	r3, #0
 8005312:	4604      	mov	r4, r0
 8005314:	4608      	mov	r0, r1
 8005316:	602b      	str	r3, [r5, #0]
 8005318:	f7fb fc59 	bl	8000bce <_isatty>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d102      	bne.n	8005326 <_isatty_r+0x1a>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	b103      	cbz	r3, 8005326 <_isatty_r+0x1a>
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	200002a8 	.word	0x200002a8

0800532c <_sbrk_r>:
 800532c:	b538      	push	{r3, r4, r5, lr}
 800532e:	4d06      	ldr	r5, [pc, #24]	@ (8005348 <_sbrk_r+0x1c>)
 8005330:	2300      	movs	r3, #0
 8005332:	4604      	mov	r4, r0
 8005334:	4608      	mov	r0, r1
 8005336:	602b      	str	r3, [r5, #0]
 8005338:	f7fb fc62 	bl	8000c00 <_sbrk>
 800533c:	1c43      	adds	r3, r0, #1
 800533e:	d102      	bne.n	8005346 <_sbrk_r+0x1a>
 8005340:	682b      	ldr	r3, [r5, #0]
 8005342:	b103      	cbz	r3, 8005346 <_sbrk_r+0x1a>
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	bd38      	pop	{r3, r4, r5, pc}
 8005348:	200002a8 	.word	0x200002a8

0800534c <_init>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr

08005358 <_fini>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr
