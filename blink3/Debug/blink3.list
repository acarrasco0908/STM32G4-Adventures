
blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000468c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800486c  0800486c  0000586c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004934  08004934  00006070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004934  08004934  00005934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800493c  0800493c  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800493c  0800493c  0000593c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004940  08004940  00005940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004944  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000070  080049b4  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080049b4  00006278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d888  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002034  00000000  00000000  00013928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00015960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000849  00000000  00000000  00016438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd0a  00000000  00000000  00016c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8f6  00000000  00000000  0003498b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b88a6  00000000  00000000  00041281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9b27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003310  00000000  00000000  000f9b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000fce7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004854 	.word	0x08004854

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004854 	.word	0x08004854

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char* ptr, int len)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d002      	beq.n	8000604 <_write+0x18>
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b02      	cmp	r3, #2
 8000602:	d111      	bne.n	8000628 <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	b29a      	uxth	r2, r3
 8000608:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800060c:	68b9      	ldr	r1, [r7, #8]
 800060e:	4809      	ldr	r0, [pc, #36]	@ (8000634 <_write+0x48>)
 8000610:	f001 ff5a 	bl	80024c8 <HAL_UART_Transmit>
 8000614:	4603      	mov	r3, r0
 8000616:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000618:	7dfb      	ldrb	r3, [r7, #23]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d101      	bne.n	8000622 <_write+0x36>
      return len;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	e004      	b.n	800062c <_write+0x40>
    else
      return -1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000626:	e001      	b.n	800062c <_write+0x40>
  }
  return -1;
 8000628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800062c:	4618      	mov	r0, r3
 800062e:	3718      	adds	r7, #24
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000008c 	.word	0x2000008c

08000638 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin) {
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000648:	d102      	bne.n	8000650 <HAL_GPIO_EXTI_Callback+0x18>
		button_press = 1;
 800064a:	4b04      	ldr	r3, [pc, #16]	@ (800065c <HAL_GPIO_EXTI_Callback+0x24>)
 800064c:	2201      	movs	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
	}
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	20000120 	.word	0x20000120

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000666:	f000 fb00 	bl	8000c6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066a:	f000 f869 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f000 f8ff 	bl	8000870 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000672:	f000 f8b1 	bl	80007d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Blink2 Starting \n");
 8000676:	482a      	ldr	r0, [pc, #168]	@ (8000720 <main+0xc0>)
 8000678:	f003 fa8a 	bl	8003b90 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  uint32_t next_blink = 500;
 8000680:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000684:	60fb      	str	r3, [r7, #12]
  uint32_t next_tick = 1000;
 8000686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068a:	60bb      	str	r3, [r7, #8]
  uint32_t loop_cnt = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]

  while (1)
  {
	  now = HAL_GetTick();
 8000690:	f000 fb50 	bl	8000d34 <HAL_GetTick>
 8000694:	6038      	str	r0, [r7, #0]

	  if(now >= next_blink) {
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	429a      	cmp	r2, r3
 800069c:	d311      	bcc.n	80006c2 <main+0x62>
		  printf("Toggling GPIO\n");
 800069e:	4821      	ldr	r0, [pc, #132]	@ (8000724 <main+0xc4>)
 80006a0:	f003 fa76 	bl	8003b90 <puts>

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006a4:	2120      	movs	r1, #32
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006aa:	f000 feb9 	bl	8001420 <HAL_GPIO_TogglePin>

		  next_blink = now + blink_delays[blink_delay];
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <main+0xc8>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <main+0xcc>)
 80006b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80006ba:	461a      	mov	r2, r3
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	60fb      	str	r3, [r7, #12]
	  }

	  if(now >= next_tick) {
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d30f      	bcc.n	80006ea <main+0x8a>
		  printf("Tick %lu (loop count = %lu)\n", now / 1000, loop_cnt);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	4a18      	ldr	r2, [pc, #96]	@ (8000730 <main+0xd0>)
 80006ce:	fba2 2303 	umull	r2, r3, r2, r3
 80006d2:	099b      	lsrs	r3, r3, #6
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4619      	mov	r1, r3
 80006d8:	4816      	ldr	r0, [pc, #88]	@ (8000734 <main+0xd4>)
 80006da:	f003 f9f1 	bl	8003ac0 <iprintf>

		  loop_cnt = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
		  next_tick = now + 1000;
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80006e8:	60bb      	str	r3, [r7, #8]
	  }

	  if(button_press) {
 80006ea:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <main+0xd8>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d012      	beq.n	8000718 <main+0xb8>

		  printf("Button pressed\n");
 80006f2:	4812      	ldr	r0, [pc, #72]	@ (800073c <main+0xdc>)
 80006f4:	f003 fa4c 	bl	8003b90 <puts>

		  ++blink_delay;
 80006f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <main+0xc8>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <main+0xc8>)
 8000702:	701a      	strb	r2, [r3, #0]
		  if(blink_delay >= sizeof(blink_delays) / sizeof(blink_delays[0])) {
 8000704:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <main+0xc8>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b02      	cmp	r3, #2
 800070a:	d902      	bls.n	8000712 <main+0xb2>
			  blink_delay = 0;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <main+0xc8>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
		  }

		  button_press = 0;
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <main+0xd8>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
	  }

	  ++loop_cnt;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3301      	adds	r3, #1
 800071c:	607b      	str	r3, [r7, #4]
	  now = HAL_GetTick();
 800071e:	e7b7      	b.n	8000690 <main+0x30>
 8000720:	0800486c 	.word	0x0800486c
 8000724:	08004880 	.word	0x08004880
 8000728:	20000121 	.word	0x20000121
 800072c:	20000000 	.word	0x20000000
 8000730:	10624dd3 	.word	0x10624dd3
 8000734:	08004890 	.word	0x08004890
 8000738:	20000120 	.word	0x20000120
 800073c:	080048b0 	.word	0x080048b0

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	@ 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0318 	add.w	r3, r7, #24
 800074a:	2238      	movs	r2, #56	@ 0x38
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f003 fafe 	bl	8003d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000762:	2000      	movs	r0, #0
 8000764:	f000 fe8e 	bl	8001484 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	2340      	movs	r3, #64	@ 0x40
 8000774:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077a:	2302      	movs	r3, #2
 800077c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800077e:	2304      	movs	r3, #4
 8000780:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000782:	2355      	movs	r3, #85	@ 0x55
 8000784:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	4618      	mov	r0, r3
 8000798:	f000 ff28 	bl	80015ec <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007a2:	f000 f8d3 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2303      	movs	r3, #3
 80007ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2104      	movs	r1, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fa26 	bl	8001c10 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007ca:	f000 f8bf 	bl	800094c <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3750      	adds	r7, #80	@ 0x50
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 80007de:	4a23      	ldr	r2, [pc, #140]	@ (800086c <MX_USART2_UART_Init+0x94>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80007e2:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 80007e4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000820:	4811      	ldr	r0, [pc, #68]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 8000822:	f001 fe01 	bl	8002428 <HAL_UART_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800082c:	f000 f88e 	bl	800094c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	480d      	ldr	r0, [pc, #52]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 8000834:	f002 ffb7 	bl	80037a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800083e:	f000 f885 	bl	800094c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4808      	ldr	r0, [pc, #32]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 8000846:	f002 ffec 	bl	8003822 <HAL_UARTEx_SetRxFifoThreshold>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000850:	f000 f87c 	bl	800094c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_USART2_UART_Init+0x90>)
 8000856:	f002 ff6d 	bl	8003734 <HAL_UARTEx_DisableFifoMode>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000860:	f000 f874 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000008c 	.word	0x2000008c
 800086c:	40004400 	.word	0x40004400

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b2f      	ldr	r3, [pc, #188]	@ (8000944 <MX_GPIO_Init+0xd4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	4a2e      	ldr	r2, [pc, #184]	@ (8000944 <MX_GPIO_Init+0xd4>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000892:	4b2c      	ldr	r3, [pc, #176]	@ (8000944 <MX_GPIO_Init+0xd4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089e:	4b29      	ldr	r3, [pc, #164]	@ (8000944 <MX_GPIO_Init+0xd4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	4a28      	ldr	r2, [pc, #160]	@ (8000944 <MX_GPIO_Init+0xd4>)
 80008a4:	f043 0320 	orr.w	r3, r3, #32
 80008a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008aa:	4b26      	ldr	r3, [pc, #152]	@ (8000944 <MX_GPIO_Init+0xd4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	f003 0320 	and.w	r3, r3, #32
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b23      	ldr	r3, [pc, #140]	@ (8000944 <MX_GPIO_Init+0xd4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	4a22      	ldr	r2, [pc, #136]	@ (8000944 <MX_GPIO_Init+0xd4>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c2:	4b20      	ldr	r3, [pc, #128]	@ (8000944 <MX_GPIO_Init+0xd4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <MX_GPIO_Init+0xd4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000944 <MX_GPIO_Init+0xd4>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008da:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <MX_GPIO_Init+0xd4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2120      	movs	r1, #32
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ee:	f000 fd7f 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008fe:	2302      	movs	r3, #2
 8000900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	480f      	ldr	r0, [pc, #60]	@ (8000948 <MX_GPIO_Init+0xd8>)
 800090a:	f000 fbef 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800090e:	2320      	movs	r3, #32
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000928:	f000 fbe0 	bl	80010ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	2028      	movs	r0, #40	@ 0x28
 8000932:	f000 fae6 	bl	8000f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000936:	2028      	movs	r0, #40	@ 0x28
 8000938:	f000 fafd 	bl	8000f36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	@ 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40021000 	.word	0x40021000
 8000948:	48000800 	.word	0x48000800

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_MspInit+0x44>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000962:	4a0e      	ldr	r2, [pc, #56]	@ (800099c <HAL_MspInit+0x44>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6613      	str	r3, [r2, #96]	@ 0x60
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <HAL_MspInit+0x44>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <HAL_MspInit+0x44>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097a:	4a08      	ldr	r2, [pc, #32]	@ (800099c <HAL_MspInit+0x44>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000980:	6593      	str	r3, [r2, #88]	@ 0x58
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_MspInit+0x44>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800098e:	f000 fe1d 	bl	80015cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b09a      	sub	sp, #104	@ 0x68
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	2244      	movs	r2, #68	@ 0x44
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f003 f9c5 	bl	8003d50 <memset>
  if(huart->Instance==USART2)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a23      	ldr	r2, [pc, #140]	@ (8000a58 <HAL_UART_MspInit+0xb8>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d13e      	bne.n	8000a4e <HAL_UART_MspInit+0xae>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fb33 	bl	8002048 <HAL_RCCEx_PeriphCLKConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009e8:	f7ff ffb0 	bl	800094c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <HAL_UART_MspInit+0xbc>)
 80009ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a5c <HAL_UART_MspInit+0xbc>)
 80009f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f8:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <HAL_UART_MspInit+0xbc>)
 80009fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <HAL_UART_MspInit+0xbc>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	4a14      	ldr	r2, [pc, #80]	@ (8000a5c <HAL_UART_MspInit+0xbc>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <HAL_UART_MspInit+0xbc>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3a:	f000 fb57 	bl	80010ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2026      	movs	r0, #38	@ 0x26
 8000a44:	f000 fa5d 	bl	8000f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a48:	2026      	movs	r0, #38	@ 0x26
 8000a4a:	f000 fa74 	bl	8000f36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a4e:	bf00      	nop
 8000a50:	3768      	adds	r7, #104	@ 0x68
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	40021000 	.word	0x40021000

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <NMI_Handler+0x4>

08000a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <MemManage_Handler+0x4>

08000a78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab6:	f000 f92b 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ac4:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <USART2_IRQHandler+0x10>)
 8000ac6:	f001 fd8d 	bl	80025e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000008c 	.word	0x2000008c

08000ad4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ad8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000adc:	f000 fcba 	bl	8001454 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	e00a      	b.n	8000b0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000af6:	f3af 8000 	nop.w
 8000afa:	4601      	mov	r1, r0
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	b2ca      	uxtb	r2, r1
 8000b04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dbf0      	blt.n	8000af6 <_read+0x12>
  }

  return len;
 8000b14:	687b      	ldr	r3, [r7, #4]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b46:	605a      	str	r2, [r3, #4]
  return 0;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <_isatty>:

int _isatty(int file)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b90:	4a14      	ldr	r2, [pc, #80]	@ (8000be4 <_sbrk+0x5c>)
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <_sbrk+0x60>)
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b9c:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <_sbrk+0x64>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <_sbrk+0x68>)
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d207      	bcs.n	8000bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb8:	f003 f918 	bl	8003dec <__errno>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bc6:	e009      	b.n	8000bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bce:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <_sbrk+0x64>)
 8000bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20008000 	.word	0x20008000
 8000be8:	00000400 	.word	0x00000400
 8000bec:	20000124 	.word	0x20000124
 8000bf0:	20000278 	.word	0x20000278

08000bf4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c18:	480d      	ldr	r0, [pc, #52]	@ (8000c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c1c:	f7ff ffea 	bl	8000bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	@ (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000c46:	f003 f8d7 	bl	8003df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c4a:	f7ff fd09 	bl	8000660 <main>

08000c4e <LoopForever>:

LoopForever:
    b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   r0, =_estack
 8000c50:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c5c:	08004944 	.word	0x08004944
  ldr r2, =_sbss
 8000c60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c64:	20000278 	.word	0x20000278

08000c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_2_IRQHandler>

08000c6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f939 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 f80e 	bl	8000c9c <HAL_InitTick>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e001      	b.n	8000c90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c8c:	f7ff fe64 	bl	8000958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c90:	79fb      	ldrb	r3, [r7, #7]

}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <HAL_InitTick+0x68>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d022      	beq.n	8000cf6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cb0:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <HAL_InitTick+0x6c>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <HAL_InitTick+0x68>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f944 	bl	8000f52 <HAL_SYSTICK_Config>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10f      	bne.n	8000cf0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b0f      	cmp	r3, #15
 8000cd4:	d809      	bhi.n	8000cea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cde:	f000 f910 	bl	8000f02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <HAL_InitTick+0x70>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	e007      	b.n	8000cfa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
 8000cee:	e004      	b.n	8000cfa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	73fb      	strb	r3, [r7, #15]
 8000cf4:	e001      	b.n	8000cfa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000010 	.word	0x20000010
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	2000000c 	.word	0x2000000c

08000d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <HAL_IncTick+0x1c>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a03      	ldr	r2, [pc, #12]	@ (8000d2c <HAL_IncTick+0x1c>)
 8000d20:	6013      	str	r3, [r2, #0]
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	20000128 	.word	0x20000128
 8000d30:	20000010 	.word	0x20000010

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <HAL_GetTick+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000128 	.word	0x20000128

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db0b      	blt.n	8000dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 021f 	and.w	r2, r3, #31
 8000dc8:	4907      	ldr	r1, [pc, #28]	@ (8000de8 <__NVIC_EnableIRQ+0x38>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	@ (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	@ (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	@ 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ecc:	f7ff ff8e 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff29 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff40 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff90 	bl	8000e40 <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5f 	bl	8000dec <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff33 	bl	8000db0 <__NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffa4 	bl	8000ea8 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b085      	sub	sp, #20
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d005      	beq.n	8000f8e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2204      	movs	r2, #4
 8000f86:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	e037      	b.n	8000ffe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 020e 	bic.w	r2, r2, #14
 8000f9c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0201 	bic.w	r2, r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f003 021f 	and.w	r2, r3, #31
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000fda:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00c      	beq.n	8000ffe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ff2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000ffc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d00d      	beq.n	8001050 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2204      	movs	r2, #4
 8001038:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e047      	b.n	80010e0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 020e 	bic.w	r2, r2, #14
 800105e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0201 	bic.w	r2, r2, #1
 800106e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800107a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800107e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108c:	2101      	movs	r1, #1
 800108e:	fa01 f202 	lsl.w	r2, r1, r2
 8001092:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800109c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00c      	beq.n	80010c0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	4798      	blx	r3
    }
  }
  return status;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010fa:	e15a      	b.n	80013b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 814c 	beq.w	80013ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b01      	cmp	r3, #1
 800111e:	d005      	beq.n	800112c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001128:	2b02      	cmp	r3, #2
 800112a:	d130      	bne.n	800118e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001162:	2201      	movs	r2, #1
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	091b      	lsrs	r3, r3, #4
 8001178:	f003 0201 	and.w	r2, r3, #1
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b03      	cmp	r3, #3
 8001198:	d017      	beq.n	80011ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d123      	bne.n	800121e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	08da      	lsrs	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3208      	adds	r2, #8
 80011de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	220f      	movs	r2, #15
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	691a      	ldr	r2, [r3, #16]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	08da      	lsrs	r2, r3, #3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3208      	adds	r2, #8
 8001218:	6939      	ldr	r1, [r7, #16]
 800121a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	2203      	movs	r2, #3
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0203 	and.w	r2, r3, #3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80a6 	beq.w	80013ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001260:	4b5b      	ldr	r3, [pc, #364]	@ (80013d0 <HAL_GPIO_Init+0x2e4>)
 8001262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001264:	4a5a      	ldr	r2, [pc, #360]	@ (80013d0 <HAL_GPIO_Init+0x2e4>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6613      	str	r3, [r2, #96]	@ 0x60
 800126c:	4b58      	ldr	r3, [pc, #352]	@ (80013d0 <HAL_GPIO_Init+0x2e4>)
 800126e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001278:	4a56      	ldr	r2, [pc, #344]	@ (80013d4 <HAL_GPIO_Init+0x2e8>)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012a2:	d01f      	beq.n	80012e4 <HAL_GPIO_Init+0x1f8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a4c      	ldr	r2, [pc, #304]	@ (80013d8 <HAL_GPIO_Init+0x2ec>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d019      	beq.n	80012e0 <HAL_GPIO_Init+0x1f4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a4b      	ldr	r2, [pc, #300]	@ (80013dc <HAL_GPIO_Init+0x2f0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d013      	beq.n	80012dc <HAL_GPIO_Init+0x1f0>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a4a      	ldr	r2, [pc, #296]	@ (80013e0 <HAL_GPIO_Init+0x2f4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d00d      	beq.n	80012d8 <HAL_GPIO_Init+0x1ec>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a49      	ldr	r2, [pc, #292]	@ (80013e4 <HAL_GPIO_Init+0x2f8>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d007      	beq.n	80012d4 <HAL_GPIO_Init+0x1e8>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a48      	ldr	r2, [pc, #288]	@ (80013e8 <HAL_GPIO_Init+0x2fc>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d101      	bne.n	80012d0 <HAL_GPIO_Init+0x1e4>
 80012cc:	2305      	movs	r3, #5
 80012ce:	e00a      	b.n	80012e6 <HAL_GPIO_Init+0x1fa>
 80012d0:	2306      	movs	r3, #6
 80012d2:	e008      	b.n	80012e6 <HAL_GPIO_Init+0x1fa>
 80012d4:	2304      	movs	r3, #4
 80012d6:	e006      	b.n	80012e6 <HAL_GPIO_Init+0x1fa>
 80012d8:	2303      	movs	r3, #3
 80012da:	e004      	b.n	80012e6 <HAL_GPIO_Init+0x1fa>
 80012dc:	2302      	movs	r3, #2
 80012de:	e002      	b.n	80012e6 <HAL_GPIO_Init+0x1fa>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_GPIO_Init+0x1fa>
 80012e4:	2300      	movs	r3, #0
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	f002 0203 	and.w	r2, r2, #3
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	4093      	lsls	r3, r2
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f6:	4937      	ldr	r1, [pc, #220]	@ (80013d4 <HAL_GPIO_Init+0x2e8>)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001304:	4b39      	ldr	r3, [pc, #228]	@ (80013ec <HAL_GPIO_Init+0x300>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001328:	4a30      	ldr	r2, [pc, #192]	@ (80013ec <HAL_GPIO_Init+0x300>)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800132e:	4b2f      	ldr	r3, [pc, #188]	@ (80013ec <HAL_GPIO_Init+0x300>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001352:	4a26      	ldr	r2, [pc, #152]	@ (80013ec <HAL_GPIO_Init+0x300>)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001358:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <HAL_GPIO_Init+0x300>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800137c:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <HAL_GPIO_Init+0x300>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <HAL_GPIO_Init+0x300>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013a6:	4a11      	ldr	r2, [pc, #68]	@ (80013ec <HAL_GPIO_Init+0x300>)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f47f ae9d 	bne.w	80010fc <HAL_GPIO_Init+0x10>
  }
}
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010000 	.word	0x40010000
 80013d8:	48000400 	.word	0x48000400
 80013dc:	48000800 	.word	0x48000800
 80013e0:	48000c00 	.word	0x48000c00
 80013e4:	48001000 	.word	0x48001000
 80013e8:	48001400 	.word	0x48001400
 80013ec:	40010400 	.word	0x40010400

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800140c:	e002      	b.n	8001414 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4013      	ands	r3, r2
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	43d9      	mvns	r1, r3
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	400b      	ands	r3, r1
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800145e:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001460:	695a      	ldr	r2, [r3, #20]
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800146a:	4a05      	ldr	r2, [pc, #20]	@ (8001480 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f8e0 	bl	8000638 <HAL_GPIO_EXTI_Callback>
  }
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40010400 	.word	0x40010400

08001484 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d141      	bne.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001492:	4b4b      	ldr	r3, [pc, #300]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800149a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800149e:	d131      	bne.n	8001504 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014a0:	4b47      	ldr	r3, [pc, #284]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014a6:	4a46      	ldr	r2, [pc, #280]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b0:	4b43      	ldr	r3, [pc, #268]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014b8:	4a41      	ldr	r2, [pc, #260]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014c0:	4b40      	ldr	r3, [pc, #256]	@ (80015c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2232      	movs	r2, #50	@ 0x32
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	4a3f      	ldr	r2, [pc, #252]	@ (80015c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014cc:	fba2 2303 	umull	r2, r3, r2, r3
 80014d0:	0c9b      	lsrs	r3, r3, #18
 80014d2:	3301      	adds	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014d6:	e002      	b.n	80014de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3b01      	subs	r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014de:	4b38      	ldr	r3, [pc, #224]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ea:	d102      	bne.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f2      	bne.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014f2:	4b33      	ldr	r3, [pc, #204]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014fe:	d158      	bne.n	80015b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e057      	b.n	80015b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001504:	4b2e      	ldr	r3, [pc, #184]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800150a:	4a2d      	ldr	r2, [pc, #180]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001510:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001514:	e04d      	b.n	80015b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800151c:	d141      	bne.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800151e:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800152a:	d131      	bne.n	8001590 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800152c:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001532:	4a23      	ldr	r2, [pc, #140]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001538:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800153c:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001544:	4a1e      	ldr	r2, [pc, #120]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800154c:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2232      	movs	r2, #50	@ 0x32
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	4a1c      	ldr	r2, [pc, #112]	@ (80015c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	0c9b      	lsrs	r3, r3, #18
 800155e:	3301      	adds	r3, #1
 8001560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001562:	e002      	b.n	800156a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3b01      	subs	r3, #1
 8001568:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001576:	d102      	bne.n	800157e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f2      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800158a:	d112      	bne.n	80015b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e011      	b.n	80015b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001590:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800159c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015a0:	e007      	b.n	80015b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015a2:	4b07      	ldr	r3, [pc, #28]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015aa:	4a05      	ldr	r2, [pc, #20]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40007000 	.word	0x40007000
 80015c4:	20000008 	.word	0x20000008
 80015c8:	431bde83 	.word	0x431bde83

080015cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	4a04      	ldr	r2, [pc, #16]	@ (80015e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015da:	6093      	str	r3, [r2, #8]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40007000 	.word	0x40007000

080015ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e2fe      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d075      	beq.n	80016f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800160a:	4b97      	ldr	r3, [pc, #604]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001614:	4b94      	ldr	r3, [pc, #592]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	2b0c      	cmp	r3, #12
 8001622:	d102      	bne.n	800162a <HAL_RCC_OscConfig+0x3e>
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d002      	beq.n	8001630 <HAL_RCC_OscConfig+0x44>
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b08      	cmp	r3, #8
 800162e:	d10b      	bne.n	8001648 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	4b8d      	ldr	r3, [pc, #564]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d05b      	beq.n	80016f4 <HAL_RCC_OscConfig+0x108>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d157      	bne.n	80016f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e2d9      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001650:	d106      	bne.n	8001660 <HAL_RCC_OscConfig+0x74>
 8001652:	4b85      	ldr	r3, [pc, #532]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a84      	ldr	r2, [pc, #528]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e01d      	b.n	800169c <HAL_RCC_OscConfig+0xb0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x98>
 800166a:	4b7f      	ldr	r3, [pc, #508]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a7e      	ldr	r2, [pc, #504]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b7c      	ldr	r3, [pc, #496]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a7b      	ldr	r2, [pc, #492]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e00b      	b.n	800169c <HAL_RCC_OscConfig+0xb0>
 8001684:	4b78      	ldr	r3, [pc, #480]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a77      	ldr	r2, [pc, #476]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 800168a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b75      	ldr	r3, [pc, #468]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a74      	ldr	r2, [pc, #464]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800169a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fb46 	bl	8000d34 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fb42 	bl	8000d34 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	@ 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e29e      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016be:	4b6a      	ldr	r3, [pc, #424]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0xc0>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fb32 	bl	8000d34 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fb2e 	bl	8000d34 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	@ 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e28a      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016e6:	4b60      	ldr	r3, [pc, #384]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0xe8>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d075      	beq.n	80017ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001702:	4b59      	ldr	r3, [pc, #356]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800170c:	4b56      	ldr	r3, [pc, #344]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b0c      	cmp	r3, #12
 800171a:	d102      	bne.n	8001722 <HAL_RCC_OscConfig+0x136>
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d002      	beq.n	8001728 <HAL_RCC_OscConfig+0x13c>
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b04      	cmp	r3, #4
 8001726:	d11f      	bne.n	8001768 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001728:	4b4f      	ldr	r3, [pc, #316]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_OscConfig+0x154>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e25d      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b49      	ldr	r3, [pc, #292]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	061b      	lsls	r3, r3, #24
 800174e:	4946      	ldr	r1, [pc, #280]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001754:	4b45      	ldr	r3, [pc, #276]	@ (800186c <HAL_RCC_OscConfig+0x280>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fa9f 	bl	8000c9c <HAL_InitTick>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d043      	beq.n	80017ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e249      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d023      	beq.n	80017b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001770:	4b3d      	ldr	r3, [pc, #244]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a3c      	ldr	r2, [pc, #240]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800177a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fada 	bl	8000d34 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001784:	f7ff fad6 	bl	8000d34 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e232      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001796:	4b34      	ldr	r3, [pc, #208]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a2:	4b31      	ldr	r3, [pc, #196]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	061b      	lsls	r3, r3, #24
 80017b0:	492d      	ldr	r1, [pc, #180]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	604b      	str	r3, [r1, #4]
 80017b6:	e01a      	b.n	80017ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 80017be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fab6 	bl	8000d34 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017cc:	f7ff fab2 	bl	8000d34 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e20e      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017de:	4b22      	ldr	r3, [pc, #136]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x1e0>
 80017ea:	e000      	b.n	80017ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d041      	beq.n	800187e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d01c      	beq.n	800183c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001802:	4b19      	ldr	r3, [pc, #100]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001808:	4a17      	ldr	r2, [pc, #92]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001812:	f7ff fa8f 	bl	8000d34 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181a:	f7ff fa8b 	bl	8000d34 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e1e7      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800182c:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 800182e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0ef      	beq.n	800181a <HAL_RCC_OscConfig+0x22e>
 800183a:	e020      	b.n	800187e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 800183e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001842:	4a09      	ldr	r2, [pc, #36]	@ (8001868 <HAL_RCC_OscConfig+0x27c>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff fa72 	bl	8000d34 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001852:	e00d      	b.n	8001870 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff fa6e 	bl	8000d34 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d906      	bls.n	8001870 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e1ca      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001870:	4b8c      	ldr	r3, [pc, #560]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 8001872:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ea      	bne.n	8001854 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80a6 	beq.w	80019d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001890:	4b84      	ldr	r3, [pc, #528]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2b4>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x2b6>
 80018a0:	2300      	movs	r3, #0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00d      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018aa:	4a7e      	ldr	r2, [pc, #504]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018b2:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018be:	2301      	movs	r3, #1
 80018c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c2:	4b79      	ldr	r3, [pc, #484]	@ (8001aa8 <HAL_RCC_OscConfig+0x4bc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d118      	bne.n	8001900 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ce:	4b76      	ldr	r3, [pc, #472]	@ (8001aa8 <HAL_RCC_OscConfig+0x4bc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a75      	ldr	r2, [pc, #468]	@ (8001aa8 <HAL_RCC_OscConfig+0x4bc>)
 80018d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018da:	f7ff fa2b 	bl	8000d34 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e2:	f7ff fa27 	bl	8000d34 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e183      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f4:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa8 <HAL_RCC_OscConfig+0x4bc>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d108      	bne.n	800191a <HAL_RCC_OscConfig+0x32e>
 8001908:	4b66      	ldr	r3, [pc, #408]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 800190a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800190e:	4a65      	ldr	r2, [pc, #404]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001918:	e024      	b.n	8001964 <HAL_RCC_OscConfig+0x378>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b05      	cmp	r3, #5
 8001920:	d110      	bne.n	8001944 <HAL_RCC_OscConfig+0x358>
 8001922:	4b60      	ldr	r3, [pc, #384]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 8001924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001928:	4a5e      	ldr	r2, [pc, #376]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001932:	4b5c      	ldr	r3, [pc, #368]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 8001934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001938:	4a5a      	ldr	r2, [pc, #360]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001942:	e00f      	b.n	8001964 <HAL_RCC_OscConfig+0x378>
 8001944:	4b57      	ldr	r3, [pc, #348]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 8001946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800194a:	4a56      	ldr	r2, [pc, #344]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001954:	4b53      	ldr	r3, [pc, #332]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 8001956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800195a:	4a52      	ldr	r2, [pc, #328]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 800195c:	f023 0304 	bic.w	r3, r3, #4
 8001960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d016      	beq.n	800199a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196c:	f7ff f9e2 	bl	8000d34 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff f9de 	bl	8000d34 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e138      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198a:	4b46      	ldr	r3, [pc, #280]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 800198c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ed      	beq.n	8001974 <HAL_RCC_OscConfig+0x388>
 8001998:	e015      	b.n	80019c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199a:	f7ff f9cb 	bl	8000d34 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff f9c7 	bl	8000d34 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e121      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b8:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 80019ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ed      	bne.n	80019a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019c6:	7ffb      	ldrb	r3, [r7, #31]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019cc:	4b35      	ldr	r3, [pc, #212]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d0:	4a34      	ldr	r2, [pc, #208]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d03c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d01c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019ec:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 80019ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019f2:	4a2c      	ldr	r2, [pc, #176]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fc:	f7ff f99a 	bl	8000d34 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a04:	f7ff f996 	bl	8000d34 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e0f2      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a16:	4b23      	ldr	r3, [pc, #140]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 8001a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ef      	beq.n	8001a04 <HAL_RCC_OscConfig+0x418>
 8001a24:	e01b      	b.n	8001a5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a26:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 8001a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	f7ff f97d 	bl	8000d34 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a3e:	f7ff f979 	bl	8000d34 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e0d5      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a50:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 8001a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1ef      	bne.n	8001a3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80c9 	beq.w	8001bfa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a68:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b0c      	cmp	r3, #12
 8001a72:	f000 8083 	beq.w	8001b7c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d15e      	bne.n	8001b3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a08      	ldr	r2, [pc, #32]	@ (8001aa4 <HAL_RCC_OscConfig+0x4b8>)
 8001a84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f953 	bl	8000d34 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a90:	e00c      	b.n	8001aac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a92:	f7ff f94f 	bl	8000d34 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d905      	bls.n	8001aac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e0ab      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aac:	4b55      	ldr	r3, [pc, #340]	@ (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ec      	bne.n	8001a92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab8:	4b52      	ldr	r3, [pc, #328]	@ (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	4b52      	ldr	r3, [pc, #328]	@ (8001c08 <HAL_RCC_OscConfig+0x61c>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6a11      	ldr	r1, [r2, #32]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ac8:	3a01      	subs	r2, #1
 8001aca:	0112      	lsls	r2, r2, #4
 8001acc:	4311      	orrs	r1, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001ad2:	0212      	lsls	r2, r2, #8
 8001ad4:	4311      	orrs	r1, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ada:	0852      	lsrs	r2, r2, #1
 8001adc:	3a01      	subs	r2, #1
 8001ade:	0552      	lsls	r2, r2, #21
 8001ae0:	4311      	orrs	r1, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ae6:	0852      	lsrs	r2, r2, #1
 8001ae8:	3a01      	subs	r2, #1
 8001aea:	0652      	lsls	r2, r2, #25
 8001aec:	4311      	orrs	r1, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001af2:	06d2      	lsls	r2, r2, #27
 8001af4:	430a      	orrs	r2, r1
 8001af6:	4943      	ldr	r1, [pc, #268]	@ (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afc:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a40      	ldr	r2, [pc, #256]	@ (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b08:	4b3e      	ldr	r3, [pc, #248]	@ (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4a3d      	ldr	r2, [pc, #244]	@ (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff f90e 	bl	8000d34 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff f90a 	bl	8000d34 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e066      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2e:	4b35      	ldr	r3, [pc, #212]	@ (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x530>
 8001b3a:	e05e      	b.n	8001bfa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3c:	4b31      	ldr	r3, [pc, #196]	@ (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a30      	ldr	r2, [pc, #192]	@ (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff f8f4 	bl	8000d34 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff f8f0 	bl	8000d34 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e04c      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b62:	4b28      	ldr	r3, [pc, #160]	@ (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b6e:	4b25      	ldr	r3, [pc, #148]	@ (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	4924      	ldr	r1, [pc, #144]	@ (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001b74:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <HAL_RCC_OscConfig+0x620>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	60cb      	str	r3, [r1, #12]
 8001b7a:	e03e      	b.n	8001bfa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e039      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b88:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 0203 	and.w	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d12c      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d123      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d11b      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d113      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d109      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	019f800c 	.word	0x019f800c
 8001c0c:	feeefffc 	.word	0xfeeefffc

08001c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e11e      	b.n	8001e66 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c28:	4b91      	ldr	r3, [pc, #580]	@ (8001e70 <HAL_RCC_ClockConfig+0x260>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d910      	bls.n	8001c58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b8e      	ldr	r3, [pc, #568]	@ (8001e70 <HAL_RCC_ClockConfig+0x260>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 020f 	bic.w	r2, r3, #15
 8001c3e:	498c      	ldr	r1, [pc, #560]	@ (8001e70 <HAL_RCC_ClockConfig+0x260>)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	4b8a      	ldr	r3, [pc, #552]	@ (8001e70 <HAL_RCC_ClockConfig+0x260>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e106      	b.n	8001e66 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d073      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d129      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6c:	4b81      	ldr	r3, [pc, #516]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0f4      	b.n	8001e66 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c7c:	f000 f99e 	bl	8001fbc <RCC_GetSysClockFreqFromPLLSource>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4a7c      	ldr	r2, [pc, #496]	@ (8001e78 <HAL_RCC_ClockConfig+0x268>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d93f      	bls.n	8001d0a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d009      	beq.n	8001caa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d033      	beq.n	8001d0a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d12f      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001caa:	4b72      	ldr	r3, [pc, #456]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cb2:	4a70      	ldr	r2, [pc, #448]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cba:	2380      	movs	r3, #128	@ 0x80
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e024      	b.n	8001d0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d107      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc8:	4b6a      	ldr	r3, [pc, #424]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0c6      	b.n	8001e66 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd8:	4b66      	ldr	r3, [pc, #408]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0be      	b.n	8001e66 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ce8:	f000 f8ce 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4a61      	ldr	r2, [pc, #388]	@ (8001e78 <HAL_RCC_ClockConfig+0x268>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d909      	bls.n	8001d0a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cfe:	4a5d      	ldr	r2, [pc, #372]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f023 0203 	bic.w	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4957      	ldr	r1, [pc, #348]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d1c:	f7ff f80a 	bl	8000d34 <HAL_GetTick>
 8001d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d24:	f7ff f806 	bl	8000d34 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e095      	b.n	8001e66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 020c 	and.w	r2, r3, #12
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d1eb      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d023      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d64:	4b43      	ldr	r3, [pc, #268]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4a42      	ldr	r2, [pc, #264]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001d6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d6e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d84:	4a3b      	ldr	r2, [pc, #236]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001d86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b39      	ldr	r3, [pc, #228]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4936      	ldr	r1, [pc, #216]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b80      	cmp	r3, #128	@ 0x80
 8001da4:	d105      	bne.n	8001db2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001da6:	4b33      	ldr	r3, [pc, #204]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	4a32      	ldr	r2, [pc, #200]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001dac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001db0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001db2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e70 <HAL_RCC_ClockConfig+0x260>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d21d      	bcs.n	8001dfc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e70 <HAL_RCC_ClockConfig+0x260>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 020f 	bic.w	r2, r3, #15
 8001dc8:	4929      	ldr	r1, [pc, #164]	@ (8001e70 <HAL_RCC_ClockConfig+0x260>)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dd0:	f7fe ffb0 	bl	8000d34 <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7fe ffac 	bl	8000d34 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e03b      	b.n	8001e66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dee:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <HAL_RCC_ClockConfig+0x260>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d1ed      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e08:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4917      	ldr	r1, [pc, #92]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e26:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	490f      	ldr	r1, [pc, #60]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e3a:	f000 f825 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <HAL_RCC_ClockConfig+0x264>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	490c      	ldr	r1, [pc, #48]	@ (8001e7c <HAL_RCC_ClockConfig+0x26c>)
 8001e4c:	5ccb      	ldrb	r3, [r1, r3]
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	fa22 f303 	lsr.w	r3, r2, r3
 8001e56:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <HAL_RCC_ClockConfig+0x270>)
 8001e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_RCC_ClockConfig+0x274>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe ff1c 	bl	8000c9c <HAL_InitTick>
 8001e64:	4603      	mov	r3, r0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40021000 	.word	0x40021000
 8001e78:	04c4b400 	.word	0x04c4b400
 8001e7c:	080048c0 	.word	0x080048c0
 8001e80:	20000008 	.word	0x20000008
 8001e84:	2000000c 	.word	0x2000000c

08001e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d102      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	e047      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ea0:	4b27      	ldr	r3, [pc, #156]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d102      	bne.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eac:	4b26      	ldr	r3, [pc, #152]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	e03e      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001eb2:	4b23      	ldr	r3, [pc, #140]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b0c      	cmp	r3, #12
 8001ebc:	d136      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ebe:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d10c      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001edc:	4a1a      	ldr	r2, [pc, #104]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	4a16      	ldr	r2, [pc, #88]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee6:	68d2      	ldr	r2, [r2, #12]
 8001ee8:	0a12      	lsrs	r2, r2, #8
 8001eea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001eee:	fb02 f303 	mul.w	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
      break;
 8001ef4:	e00c      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ef6:	4a13      	ldr	r2, [pc, #76]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	4a10      	ldr	r2, [pc, #64]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f00:	68d2      	ldr	r2, [r2, #12]
 8001f02:	0a12      	lsrs	r2, r2, #8
 8001f04:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	617b      	str	r3, [r7, #20]
      break;
 8001f0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0e5b      	lsrs	r3, r3, #25
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	e001      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f30:	693b      	ldr	r3, [r7, #16]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	00f42400 	.word	0x00f42400
 8001f48:	016e3600 	.word	0x016e3600

08001f4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f50:	4b03      	ldr	r3, [pc, #12]	@ (8001f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000008 	.word	0x20000008

08001f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f68:	f7ff fff0 	bl	8001f4c <HAL_RCC_GetHCLKFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	4904      	ldr	r1, [pc, #16]	@ (8001f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	080048d0 	.word	0x080048d0

08001f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f94:	f7ff ffda 	bl	8001f4c <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0adb      	lsrs	r3, r3, #11
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4904      	ldr	r1, [pc, #16]	@ (8001fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	080048d0 	.word	0x080048d0

08001fbc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800203c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d10c      	bne.n	8001ffa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fe0:	4a17      	ldr	r2, [pc, #92]	@ (8002040 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	4a14      	ldr	r2, [pc, #80]	@ (800203c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fea:	68d2      	ldr	r2, [r2, #12]
 8001fec:	0a12      	lsrs	r2, r2, #8
 8001fee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	617b      	str	r3, [r7, #20]
    break;
 8001ff8:	e00c      	b.n	8002014 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ffa:	4a12      	ldr	r2, [pc, #72]	@ (8002044 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	4a0e      	ldr	r2, [pc, #56]	@ (800203c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002004:	68d2      	ldr	r2, [r2, #12]
 8002006:	0a12      	lsrs	r2, r2, #8
 8002008:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800200c:	fb02 f303 	mul.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
    break;
 8002012:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002014:	4b09      	ldr	r3, [pc, #36]	@ (800203c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0e5b      	lsrs	r3, r3, #25
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	3301      	adds	r3, #1
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800202e:	687b      	ldr	r3, [r7, #4]
}
 8002030:	4618      	mov	r0, r3
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	40021000 	.word	0x40021000
 8002040:	016e3600 	.word	0x016e3600
 8002044:	00f42400 	.word	0x00f42400

08002048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002050:	2300      	movs	r3, #0
 8002052:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002054:	2300      	movs	r3, #0
 8002056:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 8098 	beq.w	8002196 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206a:	4b43      	ldr	r3, [pc, #268]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10d      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	4b40      	ldr	r3, [pc, #256]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207a:	4a3f      	ldr	r2, [pc, #252]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002080:	6593      	str	r3, [r2, #88]	@ 0x58
 8002082:	4b3d      	ldr	r3, [pc, #244]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208e:	2301      	movs	r3, #1
 8002090:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002092:	4b3a      	ldr	r3, [pc, #232]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a39      	ldr	r2, [pc, #228]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800209c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800209e:	f7fe fe49 	bl	8000d34 <HAL_GetTick>
 80020a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020a4:	e009      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a6:	f7fe fe45 	bl	8000d34 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d902      	bls.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	74fb      	strb	r3, [r7, #19]
        break;
 80020b8:	e005      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ba:	4b30      	ldr	r3, [pc, #192]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0ef      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80020c6:	7cfb      	ldrb	r3, [r7, #19]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d159      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d01e      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d019      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020e8:	4b23      	ldr	r3, [pc, #140]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020f4:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002104:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210a:	4a1b      	ldr	r2, [pc, #108]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800210c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002114:	4a18      	ldr	r2, [pc, #96]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d016      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7fe fe05 	bl	8000d34 <HAL_GetTick>
 800212a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212c:	e00b      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fe01 	bl	8000d34 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d902      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	74fb      	strb	r3, [r7, #19]
            break;
 8002144:	e006      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002146:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ec      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10b      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800215a:	4b07      	ldr	r3, [pc, #28]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	4903      	ldr	r1, [pc, #12]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002170:	e008      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002172:	7cfb      	ldrb	r3, [r7, #19]
 8002174:	74bb      	strb	r3, [r7, #18]
 8002176:	e005      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002178:	40021000 	.word	0x40021000
 800217c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002184:	7c7b      	ldrb	r3, [r7, #17]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4ba6      	ldr	r3, [pc, #664]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218e:	4aa5      	ldr	r2, [pc, #660]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002194:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a2:	4ba0      	ldr	r3, [pc, #640]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a8:	f023 0203 	bic.w	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	499c      	ldr	r1, [pc, #624]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c4:	4b97      	ldr	r3, [pc, #604]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	f023 020c 	bic.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	4994      	ldr	r1, [pc, #592]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021e6:	4b8f      	ldr	r3, [pc, #572]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	498b      	ldr	r1, [pc, #556]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002208:	4b86      	ldr	r3, [pc, #536]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	4983      	ldr	r1, [pc, #524]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800222a:	4b7e      	ldr	r3, [pc, #504]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002230:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	497a      	ldr	r1, [pc, #488]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800224c:	4b75      	ldr	r3, [pc, #468]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002252:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	4972      	ldr	r1, [pc, #456]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800226e:	4b6d      	ldr	r3, [pc, #436]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002274:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	4969      	ldr	r1, [pc, #420]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002290:	4b64      	ldr	r3, [pc, #400]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002296:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4961      	ldr	r1, [pc, #388]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	4958      	ldr	r1, [pc, #352]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d015      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022d4:	4b53      	ldr	r3, [pc, #332]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e2:	4950      	ldr	r1, [pc, #320]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022f2:	d105      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022fe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002308:	2b00      	cmp	r3, #0
 800230a:	d015      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800230c:	4b45      	ldr	r3, [pc, #276]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002312:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231a:	4942      	ldr	r1, [pc, #264]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800232a:	d105      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800232c:	4b3d      	ldr	r3, [pc, #244]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a3c      	ldr	r2, [pc, #240]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002336:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d015      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002344:	4b37      	ldr	r3, [pc, #220]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	4934      	ldr	r1, [pc, #208]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002362:	d105      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002364:	4b2f      	ldr	r3, [pc, #188]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4a2e      	ldr	r2, [pc, #184]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800236a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800236e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d015      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800237c:	4b29      	ldr	r3, [pc, #164]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002382:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800238a:	4926      	ldr	r1, [pc, #152]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002396:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800239a:	d105      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800239c:	4b21      	ldr	r3, [pc, #132]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4a20      	ldr	r2, [pc, #128]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d015      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c2:	4918      	ldr	r1, [pc, #96]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023d2:	d105      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d4:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a12      	ldr	r2, [pc, #72]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fa:	490a      	ldr	r1, [pc, #40]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002406:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800240a:	d105      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800240c:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a04      	ldr	r2, [pc, #16]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002412:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002416:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002418:	7cbb      	ldrb	r3, [r7, #18]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000

08002428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e042      	b.n	80024c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002440:	2b00      	cmp	r3, #0
 8002442:	d106      	bne.n	8002452 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7fe faa7 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2224      	movs	r2, #36	@ 0x24
 8002456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0201 	bic.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fee4 	bl	8003240 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fc15 	bl	8002ca8 <UART_SetConfig>
 800247e:	4603      	mov	r3, r0
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e01b      	b.n	80024c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 ff63 	bl	8003384 <UART_CheckIdleState>
 80024be:	4603      	mov	r3, r0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	@ 0x28
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024de:	2b20      	cmp	r3, #32
 80024e0:	d17b      	bne.n	80025da <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <HAL_UART_Transmit+0x26>
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e074      	b.n	80025dc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2221      	movs	r2, #33	@ 0x21
 80024fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002502:	f7fe fc17 	bl	8000d34 <HAL_GetTick>
 8002506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	88fa      	ldrh	r2, [r7, #6]
 800250c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	88fa      	ldrh	r2, [r7, #6]
 8002514:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002520:	d108      	bne.n	8002534 <HAL_UART_Transmit+0x6c>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d104      	bne.n	8002534 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	e003      	b.n	800253c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800253c:	e030      	b.n	80025a0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2200      	movs	r2, #0
 8002546:	2180      	movs	r1, #128	@ 0x80
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 ffc5 	bl	80034d8 <UART_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e03d      	b.n	80025dc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002574:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	3302      	adds	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e007      	b.n	800258e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	3301      	adds	r3, #1
 800258c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1c8      	bne.n	800253e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2200      	movs	r2, #0
 80025b4:	2140      	movs	r1, #64	@ 0x40
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 ff8e 	bl	80034d8 <UART_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e006      	b.n	80025dc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e000      	b.n	80025dc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80025da:	2302      	movs	r3, #2
  }
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b0ba      	sub	sp, #232	@ 0xe8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800260a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800260e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002612:	4013      	ands	r3, r2
 8002614:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d11b      	bne.n	8002658 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d015      	beq.n	8002658 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800262c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800263c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8300 	beq.w	8002c4e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
      }
      return;
 8002656:	e2fa      	b.n	8002c4e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8123 	beq.w	80028a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002662:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002666:	4b8d      	ldr	r3, [pc, #564]	@ (800289c <HAL_UART_IRQHandler+0x2b8>)
 8002668:	4013      	ands	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800266e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002672:	4b8b      	ldr	r3, [pc, #556]	@ (80028a0 <HAL_UART_IRQHandler+0x2bc>)
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8116 	beq.w	80028a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800267c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d011      	beq.n	80026ac <HAL_UART_IRQHandler+0xc8>
 8002688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800268c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00b      	beq.n	80026ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2201      	movs	r2, #1
 800269a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d011      	beq.n	80026dc <HAL_UART_IRQHandler+0xf8>
 80026b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00b      	beq.n	80026dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2202      	movs	r2, #2
 80026ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d2:	f043 0204 	orr.w	r2, r3, #4
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d011      	beq.n	800270c <HAL_UART_IRQHandler+0x128>
 80026e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00b      	beq.n	800270c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2204      	movs	r2, #4
 80026fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002702:	f043 0202 	orr.w	r2, r3, #2
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800270c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d017      	beq.n	8002748 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002724:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002728:	4b5c      	ldr	r3, [pc, #368]	@ (800289c <HAL_UART_IRQHandler+0x2b8>)
 800272a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00b      	beq.n	8002748 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2208      	movs	r2, #8
 8002736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273e:	f043 0208 	orr.w	r2, r3, #8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800274c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002750:	2b00      	cmp	r3, #0
 8002752:	d012      	beq.n	800277a <HAL_UART_IRQHandler+0x196>
 8002754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002758:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00c      	beq.n	800277a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002768:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002770:	f043 0220 	orr.w	r2, r3, #32
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8266 	beq.w	8002c52 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b00      	cmp	r3, #0
 8002790:	d013      	beq.n	80027ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	2b00      	cmp	r3, #0
 800279c:	d105      	bne.n	80027aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800279e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ce:	2b40      	cmp	r3, #64	@ 0x40
 80027d0:	d005      	beq.n	80027de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d054      	beq.n	8002888 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fee7 	bl	80035b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ee:	2b40      	cmp	r3, #64	@ 0x40
 80027f0:	d146      	bne.n	8002880 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3308      	adds	r3, #8
 80027f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002800:	e853 3f00 	ldrex	r3, [r3]
 8002804:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002808:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800280c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002810:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	3308      	adds	r3, #8
 800281a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800281e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002822:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002826:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800282a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800282e:	e841 2300 	strex	r3, r2, [r1]
 8002832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1d9      	bne.n	80027f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002844:	2b00      	cmp	r3, #0
 8002846:	d017      	beq.n	8002878 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800284e:	4a15      	ldr	r2, [pc, #84]	@ (80028a4 <HAL_UART_IRQHandler+0x2c0>)
 8002850:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe fbdf 	bl	800101c <HAL_DMA_Abort_IT>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d019      	beq.n	8002898 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800286a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002872:	4610      	mov	r0, r2
 8002874:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002876:	e00f      	b.n	8002898 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f9ff 	bl	8002c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800287e:	e00b      	b.n	8002898 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f9fb 	bl	8002c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002886:	e007      	b.n	8002898 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f9f7 	bl	8002c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002896:	e1dc      	b.n	8002c52 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002898:	bf00      	nop
    return;
 800289a:	e1da      	b.n	8002c52 <HAL_UART_IRQHandler+0x66e>
 800289c:	10000001 	.word	0x10000001
 80028a0:	04000120 	.word	0x04000120
 80028a4:	0800367f 	.word	0x0800367f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	f040 8170 	bne.w	8002b92 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8169 	beq.w	8002b92 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8162 	beq.w	8002b92 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2210      	movs	r2, #16
 80028d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e0:	2b40      	cmp	r3, #64	@ 0x40
 80028e2:	f040 80d8 	bne.w	8002a96 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80af 	beq.w	8002a5c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002904:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002908:	429a      	cmp	r2, r3
 800290a:	f080 80a7 	bcs.w	8002a5c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002914:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 8087 	bne.w	8002a3a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002934:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002938:	e853 3f00 	ldrex	r3, [r3]
 800293c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002940:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002948:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002956:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800295a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002962:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002966:	e841 2300 	strex	r3, r2, [r1]
 800296a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800296e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1da      	bne.n	800292c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3308      	adds	r3, #8
 800297c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002980:	e853 3f00 	ldrex	r3, [r3]
 8002984:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002986:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3308      	adds	r3, #8
 8002996:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800299a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800299e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80029a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80029a6:	e841 2300 	strex	r3, r2, [r1]
 80029aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80029ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1e1      	bne.n	8002976 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3308      	adds	r3, #8
 80029b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029bc:	e853 3f00 	ldrex	r3, [r3]
 80029c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80029c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3308      	adds	r3, #8
 80029d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80029d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80029dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029de:	e841 2300 	strex	r3, r2, [r1]
 80029e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80029e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1e3      	bne.n	80029b2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a00:	e853 3f00 	ldrex	r3, [r3]
 8002a04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a08:	f023 0310 	bic.w	r3, r3, #16
 8002a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a22:	e841 2300 	strex	r3, r2, [r1]
 8002a26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1e4      	bne.n	80029f8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe fa98 	bl	8000f6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f91b 	bl	8002c90 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002a5a:	e0fc      	b.n	8002c56 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a66:	429a      	cmp	r2, r3
 8002a68:	f040 80f5 	bne.w	8002c56 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	f040 80eb 	bne.w	8002c56 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f8fe 	bl	8002c90 <HAL_UARTEx_RxEventCallback>
      return;
 8002a94:	e0df      	b.n	8002c56 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80d1 	beq.w	8002c5a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80cc 	beq.w	8002c5a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aca:	e853 3f00 	ldrex	r3, [r3]
 8002ace:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ae6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002aea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002aec:	e841 2300 	strex	r3, r2, [r1]
 8002af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1e4      	bne.n	8002ac2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3308      	adds	r3, #8
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b02:	e853 3f00 	ldrex	r3, [r3]
 8002b06:	623b      	str	r3, [r7, #32]
   return(result);
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3308      	adds	r3, #8
 8002b1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b20:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b28:	e841 2300 	strex	r3, r2, [r1]
 8002b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e1      	bne.n	8002af8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	e853 3f00 	ldrex	r3, [r3]
 8002b54:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f023 0310 	bic.w	r3, r3, #16
 8002b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	69b9      	ldr	r1, [r7, #24]
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	617b      	str	r3, [r7, #20]
   return(result);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e4      	bne.n	8002b48 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f880 	bl	8002c90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b90:	e063      	b.n	8002c5a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00e      	beq.n	8002bbc <HAL_UART_IRQHandler+0x5d8>
 8002b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002bb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fd9f 	bl	80036f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bba:	e051      	b.n	8002c60 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d014      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d03a      	beq.n	8002c5e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
    }
    return;
 8002bf0:	e035      	b.n	8002c5e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_UART_IRQHandler+0x62e>
 8002bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fd49 	bl	80036a2 <UART_EndTransmit_IT>
    return;
 8002c10:	e026      	b.n	8002c60 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_UART_IRQHandler+0x64e>
 8002c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c22:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fd78 	bl	8003720 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c30:	e016      	b.n	8002c60 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d010      	beq.n	8002c60 <HAL_UART_IRQHandler+0x67c>
 8002c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	da0c      	bge.n	8002c60 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fd60 	bl	800370c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c4c:	e008      	b.n	8002c60 <HAL_UART_IRQHandler+0x67c>
      return;
 8002c4e:	bf00      	nop
 8002c50:	e006      	b.n	8002c60 <HAL_UART_IRQHandler+0x67c>
    return;
 8002c52:	bf00      	nop
 8002c54:	e004      	b.n	8002c60 <HAL_UART_IRQHandler+0x67c>
      return;
 8002c56:	bf00      	nop
 8002c58:	e002      	b.n	8002c60 <HAL_UART_IRQHandler+0x67c>
      return;
 8002c5a:	bf00      	nop
 8002c5c:	e000      	b.n	8002c60 <HAL_UART_IRQHandler+0x67c>
    return;
 8002c5e:	bf00      	nop
  }
}
 8002c60:	37e8      	adds	r7, #232	@ 0xe8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop

08002c68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cac:	b08c      	sub	sp, #48	@ 0x30
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4bab      	ldr	r3, [pc, #684]	@ (8002f84 <UART_SetConfig+0x2dc>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4aa0      	ldr	r2, [pc, #640]	@ (8002f88 <UART_SetConfig+0x2e0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d004      	beq.n	8002d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d10:	4313      	orrs	r3, r2
 8002d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002d1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d32:	f023 010f 	bic.w	r1, r3, #15
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a91      	ldr	r2, [pc, #580]	@ (8002f8c <UART_SetConfig+0x2e4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d125      	bne.n	8002d98 <UART_SetConfig+0xf0>
 8002d4c:	4b90      	ldr	r3, [pc, #576]	@ (8002f90 <UART_SetConfig+0x2e8>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d81a      	bhi.n	8002d90 <UART_SetConfig+0xe8>
 8002d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d60 <UART_SetConfig+0xb8>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002d71 	.word	0x08002d71
 8002d64:	08002d81 	.word	0x08002d81
 8002d68:	08002d79 	.word	0x08002d79
 8002d6c:	08002d89 	.word	0x08002d89
 8002d70:	2301      	movs	r3, #1
 8002d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d76:	e0d6      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d7e:	e0d2      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002d80:	2304      	movs	r3, #4
 8002d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d86:	e0ce      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002d88:	2308      	movs	r3, #8
 8002d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d8e:	e0ca      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002d90:	2310      	movs	r3, #16
 8002d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d96:	e0c6      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a7d      	ldr	r2, [pc, #500]	@ (8002f94 <UART_SetConfig+0x2ec>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d138      	bne.n	8002e14 <UART_SetConfig+0x16c>
 8002da2:	4b7b      	ldr	r3, [pc, #492]	@ (8002f90 <UART_SetConfig+0x2e8>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da8:	f003 030c 	and.w	r3, r3, #12
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d82d      	bhi.n	8002e0c <UART_SetConfig+0x164>
 8002db0:	a201      	add	r2, pc, #4	@ (adr r2, 8002db8 <UART_SetConfig+0x110>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002ded 	.word	0x08002ded
 8002dbc:	08002e0d 	.word	0x08002e0d
 8002dc0:	08002e0d 	.word	0x08002e0d
 8002dc4:	08002e0d 	.word	0x08002e0d
 8002dc8:	08002dfd 	.word	0x08002dfd
 8002dcc:	08002e0d 	.word	0x08002e0d
 8002dd0:	08002e0d 	.word	0x08002e0d
 8002dd4:	08002e0d 	.word	0x08002e0d
 8002dd8:	08002df5 	.word	0x08002df5
 8002ddc:	08002e0d 	.word	0x08002e0d
 8002de0:	08002e0d 	.word	0x08002e0d
 8002de4:	08002e0d 	.word	0x08002e0d
 8002de8:	08002e05 	.word	0x08002e05
 8002dec:	2300      	movs	r3, #0
 8002dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002df2:	e098      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002df4:	2302      	movs	r3, #2
 8002df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dfa:	e094      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e02:	e090      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002e04:	2308      	movs	r3, #8
 8002e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e0a:	e08c      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002e0c:	2310      	movs	r3, #16
 8002e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e12:	e088      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a5f      	ldr	r2, [pc, #380]	@ (8002f98 <UART_SetConfig+0x2f0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d125      	bne.n	8002e6a <UART_SetConfig+0x1c2>
 8002e1e:	4b5c      	ldr	r3, [pc, #368]	@ (8002f90 <UART_SetConfig+0x2e8>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e28:	2b30      	cmp	r3, #48	@ 0x30
 8002e2a:	d016      	beq.n	8002e5a <UART_SetConfig+0x1b2>
 8002e2c:	2b30      	cmp	r3, #48	@ 0x30
 8002e2e:	d818      	bhi.n	8002e62 <UART_SetConfig+0x1ba>
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d00a      	beq.n	8002e4a <UART_SetConfig+0x1a2>
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d814      	bhi.n	8002e62 <UART_SetConfig+0x1ba>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <UART_SetConfig+0x19a>
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d008      	beq.n	8002e52 <UART_SetConfig+0x1aa>
 8002e40:	e00f      	b.n	8002e62 <UART_SetConfig+0x1ba>
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e48:	e06d      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e50:	e069      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002e52:	2304      	movs	r3, #4
 8002e54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e58:	e065      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e60:	e061      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002e62:	2310      	movs	r3, #16
 8002e64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e68:	e05d      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a4b      	ldr	r2, [pc, #300]	@ (8002f9c <UART_SetConfig+0x2f4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d125      	bne.n	8002ec0 <UART_SetConfig+0x218>
 8002e74:	4b46      	ldr	r3, [pc, #280]	@ (8002f90 <UART_SetConfig+0x2e8>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002e7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e80:	d016      	beq.n	8002eb0 <UART_SetConfig+0x208>
 8002e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e84:	d818      	bhi.n	8002eb8 <UART_SetConfig+0x210>
 8002e86:	2b80      	cmp	r3, #128	@ 0x80
 8002e88:	d00a      	beq.n	8002ea0 <UART_SetConfig+0x1f8>
 8002e8a:	2b80      	cmp	r3, #128	@ 0x80
 8002e8c:	d814      	bhi.n	8002eb8 <UART_SetConfig+0x210>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <UART_SetConfig+0x1f0>
 8002e92:	2b40      	cmp	r3, #64	@ 0x40
 8002e94:	d008      	beq.n	8002ea8 <UART_SetConfig+0x200>
 8002e96:	e00f      	b.n	8002eb8 <UART_SetConfig+0x210>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e9e:	e042      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ea6:	e03e      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eae:	e03a      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002eb0:	2308      	movs	r3, #8
 8002eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eb6:	e036      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002eb8:	2310      	movs	r3, #16
 8002eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ebe:	e032      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a30      	ldr	r2, [pc, #192]	@ (8002f88 <UART_SetConfig+0x2e0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d12a      	bne.n	8002f20 <UART_SetConfig+0x278>
 8002eca:	4b31      	ldr	r3, [pc, #196]	@ (8002f90 <UART_SetConfig+0x2e8>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ed4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ed8:	d01a      	beq.n	8002f10 <UART_SetConfig+0x268>
 8002eda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ede:	d81b      	bhi.n	8002f18 <UART_SetConfig+0x270>
 8002ee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ee4:	d00c      	beq.n	8002f00 <UART_SetConfig+0x258>
 8002ee6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eea:	d815      	bhi.n	8002f18 <UART_SetConfig+0x270>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <UART_SetConfig+0x250>
 8002ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef4:	d008      	beq.n	8002f08 <UART_SetConfig+0x260>
 8002ef6:	e00f      	b.n	8002f18 <UART_SetConfig+0x270>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002efe:	e012      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002f00:	2302      	movs	r3, #2
 8002f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f06:	e00e      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f0e:	e00a      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002f10:	2308      	movs	r3, #8
 8002f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f16:	e006      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002f18:	2310      	movs	r3, #16
 8002f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f1e:	e002      	b.n	8002f26 <UART_SetConfig+0x27e>
 8002f20:	2310      	movs	r3, #16
 8002f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a17      	ldr	r2, [pc, #92]	@ (8002f88 <UART_SetConfig+0x2e0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	f040 80a8 	bne.w	8003082 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d834      	bhi.n	8002fa4 <UART_SetConfig+0x2fc>
 8002f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f40 <UART_SetConfig+0x298>)
 8002f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f40:	08002f65 	.word	0x08002f65
 8002f44:	08002fa5 	.word	0x08002fa5
 8002f48:	08002f6d 	.word	0x08002f6d
 8002f4c:	08002fa5 	.word	0x08002fa5
 8002f50:	08002f73 	.word	0x08002f73
 8002f54:	08002fa5 	.word	0x08002fa5
 8002f58:	08002fa5 	.word	0x08002fa5
 8002f5c:	08002fa5 	.word	0x08002fa5
 8002f60:	08002f7b 	.word	0x08002f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f64:	f7fe fffe 	bl	8001f64 <HAL_RCC_GetPCLK1Freq>
 8002f68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f6a:	e021      	b.n	8002fb0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <UART_SetConfig+0x2f8>)
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f70:	e01e      	b.n	8002fb0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f72:	f7fe ff89 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8002f76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f78:	e01a      	b.n	8002fb0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f80:	e016      	b.n	8002fb0 <UART_SetConfig+0x308>
 8002f82:	bf00      	nop
 8002f84:	cfff69f3 	.word	0xcfff69f3
 8002f88:	40008000 	.word	0x40008000
 8002f8c:	40013800 	.word	0x40013800
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40004400 	.word	0x40004400
 8002f98:	40004800 	.word	0x40004800
 8002f9c:	40004c00 	.word	0x40004c00
 8002fa0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002fae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 812a 	beq.w	800320c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	4a9e      	ldr	r2, [pc, #632]	@ (8003238 <UART_SetConfig+0x590>)
 8002fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d305      	bcc.n	8002fe8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d903      	bls.n	8002ff0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002fee:	e10d      	b.n	800320c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	60fa      	str	r2, [r7, #12]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	4a8e      	ldr	r2, [pc, #568]	@ (8003238 <UART_SetConfig+0x590>)
 8002ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003002:	b29b      	uxth	r3, r3
 8003004:	2200      	movs	r2, #0
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800300e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003012:	f7fd f955 	bl	80002c0 <__aeabi_uldivmod>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	020b      	lsls	r3, r1, #8
 8003028:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800302c:	0202      	lsls	r2, r0, #8
 800302e:	6979      	ldr	r1, [r7, #20]
 8003030:	6849      	ldr	r1, [r1, #4]
 8003032:	0849      	lsrs	r1, r1, #1
 8003034:	2000      	movs	r0, #0
 8003036:	460c      	mov	r4, r1
 8003038:	4605      	mov	r5, r0
 800303a:	eb12 0804 	adds.w	r8, r2, r4
 800303e:	eb43 0905 	adc.w	r9, r3, r5
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	469a      	mov	sl, r3
 800304a:	4693      	mov	fp, r2
 800304c:	4652      	mov	r2, sl
 800304e:	465b      	mov	r3, fp
 8003050:	4640      	mov	r0, r8
 8003052:	4649      	mov	r1, r9
 8003054:	f7fd f934 	bl	80002c0 <__aeabi_uldivmod>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4613      	mov	r3, r2
 800305e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003066:	d308      	bcc.n	800307a <UART_SetConfig+0x3d2>
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800306e:	d204      	bcs.n	800307a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6a3a      	ldr	r2, [r7, #32]
 8003076:	60da      	str	r2, [r3, #12]
 8003078:	e0c8      	b.n	800320c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003080:	e0c4      	b.n	800320c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800308a:	d167      	bne.n	800315c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800308c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003090:	2b08      	cmp	r3, #8
 8003092:	d828      	bhi.n	80030e6 <UART_SetConfig+0x43e>
 8003094:	a201      	add	r2, pc, #4	@ (adr r2, 800309c <UART_SetConfig+0x3f4>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030c1 	.word	0x080030c1
 80030a0:	080030c9 	.word	0x080030c9
 80030a4:	080030d1 	.word	0x080030d1
 80030a8:	080030e7 	.word	0x080030e7
 80030ac:	080030d7 	.word	0x080030d7
 80030b0:	080030e7 	.word	0x080030e7
 80030b4:	080030e7 	.word	0x080030e7
 80030b8:	080030e7 	.word	0x080030e7
 80030bc:	080030df 	.word	0x080030df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030c0:	f7fe ff50 	bl	8001f64 <HAL_RCC_GetPCLK1Freq>
 80030c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030c6:	e014      	b.n	80030f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030c8:	f7fe ff62 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 80030cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030ce:	e010      	b.n	80030f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030d0:	4b5a      	ldr	r3, [pc, #360]	@ (800323c <UART_SetConfig+0x594>)
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030d4:	e00d      	b.n	80030f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030d6:	f7fe fed7 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 80030da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030dc:	e009      	b.n	80030f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030e4:	e005      	b.n	80030f2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80030f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8089 	beq.w	800320c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	4a4e      	ldr	r2, [pc, #312]	@ (8003238 <UART_SetConfig+0x590>)
 8003100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003104:	461a      	mov	r2, r3
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	fbb3 f3f2 	udiv	r3, r3, r2
 800310c:	005a      	lsls	r2, r3, #1
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	085b      	lsrs	r3, r3, #1
 8003114:	441a      	add	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	d916      	bls.n	8003154 <UART_SetConfig+0x4ac>
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800312c:	d212      	bcs.n	8003154 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	b29b      	uxth	r3, r3
 8003132:	f023 030f 	bic.w	r3, r3, #15
 8003136:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	085b      	lsrs	r3, r3, #1
 800313c:	b29b      	uxth	r3, r3
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	b29a      	uxth	r2, r3
 8003144:	8bfb      	ldrh	r3, [r7, #30]
 8003146:	4313      	orrs	r3, r2
 8003148:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	8bfa      	ldrh	r2, [r7, #30]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	e05b      	b.n	800320c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800315a:	e057      	b.n	800320c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800315c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003160:	2b08      	cmp	r3, #8
 8003162:	d828      	bhi.n	80031b6 <UART_SetConfig+0x50e>
 8003164:	a201      	add	r2, pc, #4	@ (adr r2, 800316c <UART_SetConfig+0x4c4>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	08003191 	.word	0x08003191
 8003170:	08003199 	.word	0x08003199
 8003174:	080031a1 	.word	0x080031a1
 8003178:	080031b7 	.word	0x080031b7
 800317c:	080031a7 	.word	0x080031a7
 8003180:	080031b7 	.word	0x080031b7
 8003184:	080031b7 	.word	0x080031b7
 8003188:	080031b7 	.word	0x080031b7
 800318c:	080031af 	.word	0x080031af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003190:	f7fe fee8 	bl	8001f64 <HAL_RCC_GetPCLK1Freq>
 8003194:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003196:	e014      	b.n	80031c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003198:	f7fe fefa 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 800319c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800319e:	e010      	b.n	80031c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031a0:	4b26      	ldr	r3, [pc, #152]	@ (800323c <UART_SetConfig+0x594>)
 80031a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031a4:	e00d      	b.n	80031c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a6:	f7fe fe6f 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 80031aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031ac:	e009      	b.n	80031c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031b4:	e005      	b.n	80031c2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031c0:	bf00      	nop
    }

    if (pclk != 0U)
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d021      	beq.n	800320c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003238 <UART_SetConfig+0x590>)
 80031ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031d2:	461a      	mov	r2, r3
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	441a      	add	r2, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	2b0f      	cmp	r3, #15
 80031f0:	d909      	bls.n	8003206 <UART_SetConfig+0x55e>
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f8:	d205      	bcs.n	8003206 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	e002      	b.n	800320c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2201      	movs	r2, #1
 8003210:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2201      	movs	r2, #1
 8003218:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2200      	movs	r2, #0
 8003220:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2200      	movs	r2, #0
 8003226:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003228:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800322c:	4618      	mov	r0, r3
 800322e:	3730      	adds	r7, #48	@ 0x30
 8003230:	46bd      	mov	sp, r7
 8003232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003236:	bf00      	nop
 8003238:	080048d8 	.word	0x080048d8
 800323c:	00f42400 	.word	0x00f42400

08003240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01a      	beq.n	8003356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800333e:	d10a      	bne.n	8003356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	605a      	str	r2, [r3, #4]
  }
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b098      	sub	sp, #96	@ 0x60
 8003388:	af02      	add	r7, sp, #8
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003394:	f7fd fcce 	bl	8000d34 <HAL_GetTick>
 8003398:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d12f      	bne.n	8003408 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b0:	2200      	movs	r2, #0
 80033b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f88e 	bl	80034d8 <UART_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d022      	beq.n	8003408 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ca:	e853 3f00 	ldrex	r3, [r3]
 80033ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e6      	bne.n	80033c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e063      	b.n	80034d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b04      	cmp	r3, #4
 8003414:	d149      	bne.n	80034aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003416:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341e:	2200      	movs	r2, #0
 8003420:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f857 	bl	80034d8 <UART_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d03c      	beq.n	80034aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	e853 3f00 	ldrex	r3, [r3]
 800343c:	623b      	str	r3, [r7, #32]
   return(result);
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003444:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800344e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003450:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003452:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003456:	e841 2300 	strex	r3, r2, [r1]
 800345a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800345c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e6      	bne.n	8003430 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3308      	adds	r3, #8
 8003468:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	60fb      	str	r3, [r7, #12]
   return(result);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	64bb      	str	r3, [r7, #72]	@ 0x48
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3308      	adds	r3, #8
 8003480:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003482:	61fa      	str	r2, [r7, #28]
 8003484:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	69b9      	ldr	r1, [r7, #24]
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	617b      	str	r3, [r7, #20]
   return(result);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e5      	bne.n	8003462 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e012      	b.n	80034d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3758      	adds	r7, #88	@ 0x58
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e8:	e04f      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034f0:	d04b      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f2:	f7fd fc1f 	bl	8000d34 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d302      	bcc.n	8003508 <UART_WaitOnFlagUntilTimeout+0x30>
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e04e      	b.n	80035aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d037      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0xb2>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b80      	cmp	r3, #128	@ 0x80
 800351e:	d034      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b40      	cmp	r3, #64	@ 0x40
 8003524:	d031      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b08      	cmp	r3, #8
 8003532:	d110      	bne.n	8003556 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2208      	movs	r2, #8
 800353a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f838 	bl	80035b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2208      	movs	r2, #8
 8003546:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e029      	b.n	80035aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003560:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003564:	d111      	bne.n	800358a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800356e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f81e 	bl	80035b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e00f      	b.n	80035aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	bf0c      	ite	eq
 800359a:	2301      	moveq	r3, #1
 800359c:	2300      	movne	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d0a0      	beq.n	80034ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b095      	sub	sp, #84	@ 0x54
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80035da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e6      	bne.n	80035ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3308      	adds	r3, #8
 80035f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3308      	adds	r3, #8
 800360e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003610:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003612:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e3      	bne.n	80035ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003628:	2b01      	cmp	r3, #1
 800362a:	d118      	bne.n	800365e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	60bb      	str	r3, [r7, #8]
   return(result);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f023 0310 	bic.w	r3, r3, #16
 8003640:	647b      	str	r3, [r7, #68]	@ 0x44
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6979      	ldr	r1, [r7, #20]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	613b      	str	r3, [r7, #16]
   return(result);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e6      	bne.n	800362c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003672:	bf00      	nop
 8003674:	3754      	adds	r7, #84	@ 0x54
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff faf1 	bl	8002c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b088      	sub	sp, #32
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6979      	ldr	r1, [r7, #20]
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	613b      	str	r3, [r7, #16]
   return(result);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e6      	bne.n	80036aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fabc 	bl	8002c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036f0:	bf00      	nop
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_UARTEx_DisableFifoMode+0x16>
 8003746:	2302      	movs	r3, #2
 8003748:	e027      	b.n	800379a <HAL_UARTEx_DisableFifoMode+0x66>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2224      	movs	r2, #36	@ 0x24
 8003756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003778:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e02d      	b.n	800381a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2224      	movs	r2, #36	@ 0x24
 80037ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f850 	bl	80038a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003836:	2302      	movs	r3, #2
 8003838:	e02d      	b.n	8003896 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2224      	movs	r2, #36	@ 0x24
 8003846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f812 	bl	80038a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d108      	bne.n	80038c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80038c0:	e031      	b.n	8003926 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80038c2:	2308      	movs	r3, #8
 80038c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80038c6:	2308      	movs	r3, #8
 80038c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	0e5b      	lsrs	r3, r3, #25
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	0f5b      	lsrs	r3, r3, #29
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038ea:	7bbb      	ldrb	r3, [r7, #14]
 80038ec:	7b3a      	ldrb	r2, [r7, #12]
 80038ee:	4911      	ldr	r1, [pc, #68]	@ (8003934 <UARTEx_SetNbDataToProcess+0x94>)
 80038f0:	5c8a      	ldrb	r2, [r1, r2]
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038f6:	7b3a      	ldrb	r2, [r7, #12]
 80038f8:	490f      	ldr	r1, [pc, #60]	@ (8003938 <UARTEx_SetNbDataToProcess+0x98>)
 80038fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8003900:	b29a      	uxth	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	7b7a      	ldrb	r2, [r7, #13]
 800390c:	4909      	ldr	r1, [pc, #36]	@ (8003934 <UARTEx_SetNbDataToProcess+0x94>)
 800390e:	5c8a      	ldrb	r2, [r1, r2]
 8003910:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003914:	7b7a      	ldrb	r2, [r7, #13]
 8003916:	4908      	ldr	r1, [pc, #32]	@ (8003938 <UARTEx_SetNbDataToProcess+0x98>)
 8003918:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800391a:	fb93 f3f2 	sdiv	r3, r3, r2
 800391e:	b29a      	uxth	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	080048f0 	.word	0x080048f0
 8003938:	080048f8 	.word	0x080048f8

0800393c <std>:
 800393c:	2300      	movs	r3, #0
 800393e:	b510      	push	{r4, lr}
 8003940:	4604      	mov	r4, r0
 8003942:	e9c0 3300 	strd	r3, r3, [r0]
 8003946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800394a:	6083      	str	r3, [r0, #8]
 800394c:	8181      	strh	r1, [r0, #12]
 800394e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003950:	81c2      	strh	r2, [r0, #14]
 8003952:	6183      	str	r3, [r0, #24]
 8003954:	4619      	mov	r1, r3
 8003956:	2208      	movs	r2, #8
 8003958:	305c      	adds	r0, #92	@ 0x5c
 800395a:	f000 f9f9 	bl	8003d50 <memset>
 800395e:	4b0d      	ldr	r3, [pc, #52]	@ (8003994 <std+0x58>)
 8003960:	6263      	str	r3, [r4, #36]	@ 0x24
 8003962:	4b0d      	ldr	r3, [pc, #52]	@ (8003998 <std+0x5c>)
 8003964:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003966:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <std+0x60>)
 8003968:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800396a:	4b0d      	ldr	r3, [pc, #52]	@ (80039a0 <std+0x64>)
 800396c:	6323      	str	r3, [r4, #48]	@ 0x30
 800396e:	4b0d      	ldr	r3, [pc, #52]	@ (80039a4 <std+0x68>)
 8003970:	6224      	str	r4, [r4, #32]
 8003972:	429c      	cmp	r4, r3
 8003974:	d006      	beq.n	8003984 <std+0x48>
 8003976:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800397a:	4294      	cmp	r4, r2
 800397c:	d002      	beq.n	8003984 <std+0x48>
 800397e:	33d0      	adds	r3, #208	@ 0xd0
 8003980:	429c      	cmp	r4, r3
 8003982:	d105      	bne.n	8003990 <std+0x54>
 8003984:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800398c:	f000 ba58 	b.w	8003e40 <__retarget_lock_init_recursive>
 8003990:	bd10      	pop	{r4, pc}
 8003992:	bf00      	nop
 8003994:	08003ba1 	.word	0x08003ba1
 8003998:	08003bc3 	.word	0x08003bc3
 800399c:	08003bfb 	.word	0x08003bfb
 80039a0:	08003c1f 	.word	0x08003c1f
 80039a4:	2000012c 	.word	0x2000012c

080039a8 <stdio_exit_handler>:
 80039a8:	4a02      	ldr	r2, [pc, #8]	@ (80039b4 <stdio_exit_handler+0xc>)
 80039aa:	4903      	ldr	r1, [pc, #12]	@ (80039b8 <stdio_exit_handler+0x10>)
 80039ac:	4803      	ldr	r0, [pc, #12]	@ (80039bc <stdio_exit_handler+0x14>)
 80039ae:	f000 b869 	b.w	8003a84 <_fwalk_sglue>
 80039b2:	bf00      	nop
 80039b4:	20000014 	.word	0x20000014
 80039b8:	080046dd 	.word	0x080046dd
 80039bc:	20000024 	.word	0x20000024

080039c0 <cleanup_stdio>:
 80039c0:	6841      	ldr	r1, [r0, #4]
 80039c2:	4b0c      	ldr	r3, [pc, #48]	@ (80039f4 <cleanup_stdio+0x34>)
 80039c4:	4299      	cmp	r1, r3
 80039c6:	b510      	push	{r4, lr}
 80039c8:	4604      	mov	r4, r0
 80039ca:	d001      	beq.n	80039d0 <cleanup_stdio+0x10>
 80039cc:	f000 fe86 	bl	80046dc <_fflush_r>
 80039d0:	68a1      	ldr	r1, [r4, #8]
 80039d2:	4b09      	ldr	r3, [pc, #36]	@ (80039f8 <cleanup_stdio+0x38>)
 80039d4:	4299      	cmp	r1, r3
 80039d6:	d002      	beq.n	80039de <cleanup_stdio+0x1e>
 80039d8:	4620      	mov	r0, r4
 80039da:	f000 fe7f 	bl	80046dc <_fflush_r>
 80039de:	68e1      	ldr	r1, [r4, #12]
 80039e0:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <cleanup_stdio+0x3c>)
 80039e2:	4299      	cmp	r1, r3
 80039e4:	d004      	beq.n	80039f0 <cleanup_stdio+0x30>
 80039e6:	4620      	mov	r0, r4
 80039e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039ec:	f000 be76 	b.w	80046dc <_fflush_r>
 80039f0:	bd10      	pop	{r4, pc}
 80039f2:	bf00      	nop
 80039f4:	2000012c 	.word	0x2000012c
 80039f8:	20000194 	.word	0x20000194
 80039fc:	200001fc 	.word	0x200001fc

08003a00 <global_stdio_init.part.0>:
 8003a00:	b510      	push	{r4, lr}
 8003a02:	4b0b      	ldr	r3, [pc, #44]	@ (8003a30 <global_stdio_init.part.0+0x30>)
 8003a04:	4c0b      	ldr	r4, [pc, #44]	@ (8003a34 <global_stdio_init.part.0+0x34>)
 8003a06:	4a0c      	ldr	r2, [pc, #48]	@ (8003a38 <global_stdio_init.part.0+0x38>)
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2104      	movs	r1, #4
 8003a10:	f7ff ff94 	bl	800393c <std>
 8003a14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003a18:	2201      	movs	r2, #1
 8003a1a:	2109      	movs	r1, #9
 8003a1c:	f7ff ff8e 	bl	800393c <std>
 8003a20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a24:	2202      	movs	r2, #2
 8003a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a2a:	2112      	movs	r1, #18
 8003a2c:	f7ff bf86 	b.w	800393c <std>
 8003a30:	20000264 	.word	0x20000264
 8003a34:	2000012c 	.word	0x2000012c
 8003a38:	080039a9 	.word	0x080039a9

08003a3c <__sfp_lock_acquire>:
 8003a3c:	4801      	ldr	r0, [pc, #4]	@ (8003a44 <__sfp_lock_acquire+0x8>)
 8003a3e:	f000 ba00 	b.w	8003e42 <__retarget_lock_acquire_recursive>
 8003a42:	bf00      	nop
 8003a44:	2000026d 	.word	0x2000026d

08003a48 <__sfp_lock_release>:
 8003a48:	4801      	ldr	r0, [pc, #4]	@ (8003a50 <__sfp_lock_release+0x8>)
 8003a4a:	f000 b9fb 	b.w	8003e44 <__retarget_lock_release_recursive>
 8003a4e:	bf00      	nop
 8003a50:	2000026d 	.word	0x2000026d

08003a54 <__sinit>:
 8003a54:	b510      	push	{r4, lr}
 8003a56:	4604      	mov	r4, r0
 8003a58:	f7ff fff0 	bl	8003a3c <__sfp_lock_acquire>
 8003a5c:	6a23      	ldr	r3, [r4, #32]
 8003a5e:	b11b      	cbz	r3, 8003a68 <__sinit+0x14>
 8003a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a64:	f7ff bff0 	b.w	8003a48 <__sfp_lock_release>
 8003a68:	4b04      	ldr	r3, [pc, #16]	@ (8003a7c <__sinit+0x28>)
 8003a6a:	6223      	str	r3, [r4, #32]
 8003a6c:	4b04      	ldr	r3, [pc, #16]	@ (8003a80 <__sinit+0x2c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f5      	bne.n	8003a60 <__sinit+0xc>
 8003a74:	f7ff ffc4 	bl	8003a00 <global_stdio_init.part.0>
 8003a78:	e7f2      	b.n	8003a60 <__sinit+0xc>
 8003a7a:	bf00      	nop
 8003a7c:	080039c1 	.word	0x080039c1
 8003a80:	20000264 	.word	0x20000264

08003a84 <_fwalk_sglue>:
 8003a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a88:	4607      	mov	r7, r0
 8003a8a:	4688      	mov	r8, r1
 8003a8c:	4614      	mov	r4, r2
 8003a8e:	2600      	movs	r6, #0
 8003a90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a94:	f1b9 0901 	subs.w	r9, r9, #1
 8003a98:	d505      	bpl.n	8003aa6 <_fwalk_sglue+0x22>
 8003a9a:	6824      	ldr	r4, [r4, #0]
 8003a9c:	2c00      	cmp	r4, #0
 8003a9e:	d1f7      	bne.n	8003a90 <_fwalk_sglue+0xc>
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aa6:	89ab      	ldrh	r3, [r5, #12]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d907      	bls.n	8003abc <_fwalk_sglue+0x38>
 8003aac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	d003      	beq.n	8003abc <_fwalk_sglue+0x38>
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	47c0      	blx	r8
 8003aba:	4306      	orrs	r6, r0
 8003abc:	3568      	adds	r5, #104	@ 0x68
 8003abe:	e7e9      	b.n	8003a94 <_fwalk_sglue+0x10>

08003ac0 <iprintf>:
 8003ac0:	b40f      	push	{r0, r1, r2, r3}
 8003ac2:	b507      	push	{r0, r1, r2, lr}
 8003ac4:	4906      	ldr	r1, [pc, #24]	@ (8003ae0 <iprintf+0x20>)
 8003ac6:	ab04      	add	r3, sp, #16
 8003ac8:	6808      	ldr	r0, [r1, #0]
 8003aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ace:	6881      	ldr	r1, [r0, #8]
 8003ad0:	9301      	str	r3, [sp, #4]
 8003ad2:	f000 fadb 	bl	800408c <_vfiprintf_r>
 8003ad6:	b003      	add	sp, #12
 8003ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003adc:	b004      	add	sp, #16
 8003ade:	4770      	bx	lr
 8003ae0:	20000020 	.word	0x20000020

08003ae4 <_puts_r>:
 8003ae4:	6a03      	ldr	r3, [r0, #32]
 8003ae6:	b570      	push	{r4, r5, r6, lr}
 8003ae8:	6884      	ldr	r4, [r0, #8]
 8003aea:	4605      	mov	r5, r0
 8003aec:	460e      	mov	r6, r1
 8003aee:	b90b      	cbnz	r3, 8003af4 <_puts_r+0x10>
 8003af0:	f7ff ffb0 	bl	8003a54 <__sinit>
 8003af4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003af6:	07db      	lsls	r3, r3, #31
 8003af8:	d405      	bmi.n	8003b06 <_puts_r+0x22>
 8003afa:	89a3      	ldrh	r3, [r4, #12]
 8003afc:	0598      	lsls	r0, r3, #22
 8003afe:	d402      	bmi.n	8003b06 <_puts_r+0x22>
 8003b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b02:	f000 f99e 	bl	8003e42 <__retarget_lock_acquire_recursive>
 8003b06:	89a3      	ldrh	r3, [r4, #12]
 8003b08:	0719      	lsls	r1, r3, #28
 8003b0a:	d502      	bpl.n	8003b12 <_puts_r+0x2e>
 8003b0c:	6923      	ldr	r3, [r4, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d135      	bne.n	8003b7e <_puts_r+0x9a>
 8003b12:	4621      	mov	r1, r4
 8003b14:	4628      	mov	r0, r5
 8003b16:	f000 f8c5 	bl	8003ca4 <__swsetup_r>
 8003b1a:	b380      	cbz	r0, 8003b7e <_puts_r+0x9a>
 8003b1c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003b20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b22:	07da      	lsls	r2, r3, #31
 8003b24:	d405      	bmi.n	8003b32 <_puts_r+0x4e>
 8003b26:	89a3      	ldrh	r3, [r4, #12]
 8003b28:	059b      	lsls	r3, r3, #22
 8003b2a:	d402      	bmi.n	8003b32 <_puts_r+0x4e>
 8003b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b2e:	f000 f989 	bl	8003e44 <__retarget_lock_release_recursive>
 8003b32:	4628      	mov	r0, r5
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	da04      	bge.n	8003b44 <_puts_r+0x60>
 8003b3a:	69a2      	ldr	r2, [r4, #24]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	dc17      	bgt.n	8003b70 <_puts_r+0x8c>
 8003b40:	290a      	cmp	r1, #10
 8003b42:	d015      	beq.n	8003b70 <_puts_r+0x8c>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	6022      	str	r2, [r4, #0]
 8003b4a:	7019      	strb	r1, [r3, #0]
 8003b4c:	68a3      	ldr	r3, [r4, #8]
 8003b4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b52:	3b01      	subs	r3, #1
 8003b54:	60a3      	str	r3, [r4, #8]
 8003b56:	2900      	cmp	r1, #0
 8003b58:	d1ed      	bne.n	8003b36 <_puts_r+0x52>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	da11      	bge.n	8003b82 <_puts_r+0x9e>
 8003b5e:	4622      	mov	r2, r4
 8003b60:	210a      	movs	r1, #10
 8003b62:	4628      	mov	r0, r5
 8003b64:	f000 f85f 	bl	8003c26 <__swbuf_r>
 8003b68:	3001      	adds	r0, #1
 8003b6a:	d0d7      	beq.n	8003b1c <_puts_r+0x38>
 8003b6c:	250a      	movs	r5, #10
 8003b6e:	e7d7      	b.n	8003b20 <_puts_r+0x3c>
 8003b70:	4622      	mov	r2, r4
 8003b72:	4628      	mov	r0, r5
 8003b74:	f000 f857 	bl	8003c26 <__swbuf_r>
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d1e7      	bne.n	8003b4c <_puts_r+0x68>
 8003b7c:	e7ce      	b.n	8003b1c <_puts_r+0x38>
 8003b7e:	3e01      	subs	r6, #1
 8003b80:	e7e4      	b.n	8003b4c <_puts_r+0x68>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	6022      	str	r2, [r4, #0]
 8003b88:	220a      	movs	r2, #10
 8003b8a:	701a      	strb	r2, [r3, #0]
 8003b8c:	e7ee      	b.n	8003b6c <_puts_r+0x88>
	...

08003b90 <puts>:
 8003b90:	4b02      	ldr	r3, [pc, #8]	@ (8003b9c <puts+0xc>)
 8003b92:	4601      	mov	r1, r0
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	f7ff bfa5 	b.w	8003ae4 <_puts_r>
 8003b9a:	bf00      	nop
 8003b9c:	20000020 	.word	0x20000020

08003ba0 <__sread>:
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba8:	f000 f8fc 	bl	8003da4 <_read_r>
 8003bac:	2800      	cmp	r0, #0
 8003bae:	bfab      	itete	ge
 8003bb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8003bb4:	181b      	addge	r3, r3, r0
 8003bb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003bba:	bfac      	ite	ge
 8003bbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003bbe:	81a3      	strhlt	r3, [r4, #12]
 8003bc0:	bd10      	pop	{r4, pc}

08003bc2 <__swrite>:
 8003bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc6:	461f      	mov	r7, r3
 8003bc8:	898b      	ldrh	r3, [r1, #12]
 8003bca:	05db      	lsls	r3, r3, #23
 8003bcc:	4605      	mov	r5, r0
 8003bce:	460c      	mov	r4, r1
 8003bd0:	4616      	mov	r6, r2
 8003bd2:	d505      	bpl.n	8003be0 <__swrite+0x1e>
 8003bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bd8:	2302      	movs	r3, #2
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f000 f8d0 	bl	8003d80 <_lseek_r>
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003be6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bea:	81a3      	strh	r3, [r4, #12]
 8003bec:	4632      	mov	r2, r6
 8003bee:	463b      	mov	r3, r7
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf6:	f000 b8e7 	b.w	8003dc8 <_write_r>

08003bfa <__sseek>:
 8003bfa:	b510      	push	{r4, lr}
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c02:	f000 f8bd 	bl	8003d80 <_lseek_r>
 8003c06:	1c43      	adds	r3, r0, #1
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	bf15      	itete	ne
 8003c0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003c0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003c12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003c16:	81a3      	strheq	r3, [r4, #12]
 8003c18:	bf18      	it	ne
 8003c1a:	81a3      	strhne	r3, [r4, #12]
 8003c1c:	bd10      	pop	{r4, pc}

08003c1e <__sclose>:
 8003c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c22:	f000 b89d 	b.w	8003d60 <_close_r>

08003c26 <__swbuf_r>:
 8003c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c28:	460e      	mov	r6, r1
 8003c2a:	4614      	mov	r4, r2
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	b118      	cbz	r0, 8003c38 <__swbuf_r+0x12>
 8003c30:	6a03      	ldr	r3, [r0, #32]
 8003c32:	b90b      	cbnz	r3, 8003c38 <__swbuf_r+0x12>
 8003c34:	f7ff ff0e 	bl	8003a54 <__sinit>
 8003c38:	69a3      	ldr	r3, [r4, #24]
 8003c3a:	60a3      	str	r3, [r4, #8]
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	071a      	lsls	r2, r3, #28
 8003c40:	d501      	bpl.n	8003c46 <__swbuf_r+0x20>
 8003c42:	6923      	ldr	r3, [r4, #16]
 8003c44:	b943      	cbnz	r3, 8003c58 <__swbuf_r+0x32>
 8003c46:	4621      	mov	r1, r4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f000 f82b 	bl	8003ca4 <__swsetup_r>
 8003c4e:	b118      	cbz	r0, 8003c58 <__swbuf_r+0x32>
 8003c50:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003c54:	4638      	mov	r0, r7
 8003c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	6922      	ldr	r2, [r4, #16]
 8003c5c:	1a98      	subs	r0, r3, r2
 8003c5e:	6963      	ldr	r3, [r4, #20]
 8003c60:	b2f6      	uxtb	r6, r6
 8003c62:	4283      	cmp	r3, r0
 8003c64:	4637      	mov	r7, r6
 8003c66:	dc05      	bgt.n	8003c74 <__swbuf_r+0x4e>
 8003c68:	4621      	mov	r1, r4
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f000 fd36 	bl	80046dc <_fflush_r>
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d1ed      	bne.n	8003c50 <__swbuf_r+0x2a>
 8003c74:	68a3      	ldr	r3, [r4, #8]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	60a3      	str	r3, [r4, #8]
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	6022      	str	r2, [r4, #0]
 8003c80:	701e      	strb	r6, [r3, #0]
 8003c82:	6962      	ldr	r2, [r4, #20]
 8003c84:	1c43      	adds	r3, r0, #1
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d004      	beq.n	8003c94 <__swbuf_r+0x6e>
 8003c8a:	89a3      	ldrh	r3, [r4, #12]
 8003c8c:	07db      	lsls	r3, r3, #31
 8003c8e:	d5e1      	bpl.n	8003c54 <__swbuf_r+0x2e>
 8003c90:	2e0a      	cmp	r6, #10
 8003c92:	d1df      	bne.n	8003c54 <__swbuf_r+0x2e>
 8003c94:	4621      	mov	r1, r4
 8003c96:	4628      	mov	r0, r5
 8003c98:	f000 fd20 	bl	80046dc <_fflush_r>
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	d0d9      	beq.n	8003c54 <__swbuf_r+0x2e>
 8003ca0:	e7d6      	b.n	8003c50 <__swbuf_r+0x2a>
	...

08003ca4 <__swsetup_r>:
 8003ca4:	b538      	push	{r3, r4, r5, lr}
 8003ca6:	4b29      	ldr	r3, [pc, #164]	@ (8003d4c <__swsetup_r+0xa8>)
 8003ca8:	4605      	mov	r5, r0
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	460c      	mov	r4, r1
 8003cae:	b118      	cbz	r0, 8003cb8 <__swsetup_r+0x14>
 8003cb0:	6a03      	ldr	r3, [r0, #32]
 8003cb2:	b90b      	cbnz	r3, 8003cb8 <__swsetup_r+0x14>
 8003cb4:	f7ff fece 	bl	8003a54 <__sinit>
 8003cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cbc:	0719      	lsls	r1, r3, #28
 8003cbe:	d422      	bmi.n	8003d06 <__swsetup_r+0x62>
 8003cc0:	06da      	lsls	r2, r3, #27
 8003cc2:	d407      	bmi.n	8003cd4 <__swsetup_r+0x30>
 8003cc4:	2209      	movs	r2, #9
 8003cc6:	602a      	str	r2, [r5, #0]
 8003cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ccc:	81a3      	strh	r3, [r4, #12]
 8003cce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cd2:	e033      	b.n	8003d3c <__swsetup_r+0x98>
 8003cd4:	0758      	lsls	r0, r3, #29
 8003cd6:	d512      	bpl.n	8003cfe <__swsetup_r+0x5a>
 8003cd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003cda:	b141      	cbz	r1, 8003cee <__swsetup_r+0x4a>
 8003cdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ce0:	4299      	cmp	r1, r3
 8003ce2:	d002      	beq.n	8003cea <__swsetup_r+0x46>
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	f000 f8af 	bl	8003e48 <_free_r>
 8003cea:	2300      	movs	r3, #0
 8003cec:	6363      	str	r3, [r4, #52]	@ 0x34
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003cf4:	81a3      	strh	r3, [r4, #12]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	6063      	str	r3, [r4, #4]
 8003cfa:	6923      	ldr	r3, [r4, #16]
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	89a3      	ldrh	r3, [r4, #12]
 8003d00:	f043 0308 	orr.w	r3, r3, #8
 8003d04:	81a3      	strh	r3, [r4, #12]
 8003d06:	6923      	ldr	r3, [r4, #16]
 8003d08:	b94b      	cbnz	r3, 8003d1e <__swsetup_r+0x7a>
 8003d0a:	89a3      	ldrh	r3, [r4, #12]
 8003d0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d14:	d003      	beq.n	8003d1e <__swsetup_r+0x7a>
 8003d16:	4621      	mov	r1, r4
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f000 fd2d 	bl	8004778 <__smakebuf_r>
 8003d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d22:	f013 0201 	ands.w	r2, r3, #1
 8003d26:	d00a      	beq.n	8003d3e <__swsetup_r+0x9a>
 8003d28:	2200      	movs	r2, #0
 8003d2a:	60a2      	str	r2, [r4, #8]
 8003d2c:	6962      	ldr	r2, [r4, #20]
 8003d2e:	4252      	negs	r2, r2
 8003d30:	61a2      	str	r2, [r4, #24]
 8003d32:	6922      	ldr	r2, [r4, #16]
 8003d34:	b942      	cbnz	r2, 8003d48 <__swsetup_r+0xa4>
 8003d36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003d3a:	d1c5      	bne.n	8003cc8 <__swsetup_r+0x24>
 8003d3c:	bd38      	pop	{r3, r4, r5, pc}
 8003d3e:	0799      	lsls	r1, r3, #30
 8003d40:	bf58      	it	pl
 8003d42:	6962      	ldrpl	r2, [r4, #20]
 8003d44:	60a2      	str	r2, [r4, #8]
 8003d46:	e7f4      	b.n	8003d32 <__swsetup_r+0x8e>
 8003d48:	2000      	movs	r0, #0
 8003d4a:	e7f7      	b.n	8003d3c <__swsetup_r+0x98>
 8003d4c:	20000020 	.word	0x20000020

08003d50 <memset>:
 8003d50:	4402      	add	r2, r0
 8003d52:	4603      	mov	r3, r0
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d100      	bne.n	8003d5a <memset+0xa>
 8003d58:	4770      	bx	lr
 8003d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d5e:	e7f9      	b.n	8003d54 <memset+0x4>

08003d60 <_close_r>:
 8003d60:	b538      	push	{r3, r4, r5, lr}
 8003d62:	4d06      	ldr	r5, [pc, #24]	@ (8003d7c <_close_r+0x1c>)
 8003d64:	2300      	movs	r3, #0
 8003d66:	4604      	mov	r4, r0
 8003d68:	4608      	mov	r0, r1
 8003d6a:	602b      	str	r3, [r5, #0]
 8003d6c:	f7fc fed7 	bl	8000b1e <_close>
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	d102      	bne.n	8003d7a <_close_r+0x1a>
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	b103      	cbz	r3, 8003d7a <_close_r+0x1a>
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	bd38      	pop	{r3, r4, r5, pc}
 8003d7c:	20000268 	.word	0x20000268

08003d80 <_lseek_r>:
 8003d80:	b538      	push	{r3, r4, r5, lr}
 8003d82:	4d07      	ldr	r5, [pc, #28]	@ (8003da0 <_lseek_r+0x20>)
 8003d84:	4604      	mov	r4, r0
 8003d86:	4608      	mov	r0, r1
 8003d88:	4611      	mov	r1, r2
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	602a      	str	r2, [r5, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f7fc feec 	bl	8000b6c <_lseek>
 8003d94:	1c43      	adds	r3, r0, #1
 8003d96:	d102      	bne.n	8003d9e <_lseek_r+0x1e>
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	b103      	cbz	r3, 8003d9e <_lseek_r+0x1e>
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	bd38      	pop	{r3, r4, r5, pc}
 8003da0:	20000268 	.word	0x20000268

08003da4 <_read_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	4d07      	ldr	r5, [pc, #28]	@ (8003dc4 <_read_r+0x20>)
 8003da8:	4604      	mov	r4, r0
 8003daa:	4608      	mov	r0, r1
 8003dac:	4611      	mov	r1, r2
 8003dae:	2200      	movs	r2, #0
 8003db0:	602a      	str	r2, [r5, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f7fc fe96 	bl	8000ae4 <_read>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d102      	bne.n	8003dc2 <_read_r+0x1e>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	b103      	cbz	r3, 8003dc2 <_read_r+0x1e>
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	bd38      	pop	{r3, r4, r5, pc}
 8003dc4:	20000268 	.word	0x20000268

08003dc8 <_write_r>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	4d07      	ldr	r5, [pc, #28]	@ (8003de8 <_write_r+0x20>)
 8003dcc:	4604      	mov	r4, r0
 8003dce:	4608      	mov	r0, r1
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	602a      	str	r2, [r5, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f7fc fc08 	bl	80005ec <_write>
 8003ddc:	1c43      	adds	r3, r0, #1
 8003dde:	d102      	bne.n	8003de6 <_write_r+0x1e>
 8003de0:	682b      	ldr	r3, [r5, #0]
 8003de2:	b103      	cbz	r3, 8003de6 <_write_r+0x1e>
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
 8003de8:	20000268 	.word	0x20000268

08003dec <__errno>:
 8003dec:	4b01      	ldr	r3, [pc, #4]	@ (8003df4 <__errno+0x8>)
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000020 	.word	0x20000020

08003df8 <__libc_init_array>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	4d0d      	ldr	r5, [pc, #52]	@ (8003e30 <__libc_init_array+0x38>)
 8003dfc:	4c0d      	ldr	r4, [pc, #52]	@ (8003e34 <__libc_init_array+0x3c>)
 8003dfe:	1b64      	subs	r4, r4, r5
 8003e00:	10a4      	asrs	r4, r4, #2
 8003e02:	2600      	movs	r6, #0
 8003e04:	42a6      	cmp	r6, r4
 8003e06:	d109      	bne.n	8003e1c <__libc_init_array+0x24>
 8003e08:	4d0b      	ldr	r5, [pc, #44]	@ (8003e38 <__libc_init_array+0x40>)
 8003e0a:	4c0c      	ldr	r4, [pc, #48]	@ (8003e3c <__libc_init_array+0x44>)
 8003e0c:	f000 fd22 	bl	8004854 <_init>
 8003e10:	1b64      	subs	r4, r4, r5
 8003e12:	10a4      	asrs	r4, r4, #2
 8003e14:	2600      	movs	r6, #0
 8003e16:	42a6      	cmp	r6, r4
 8003e18:	d105      	bne.n	8003e26 <__libc_init_array+0x2e>
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e20:	4798      	blx	r3
 8003e22:	3601      	adds	r6, #1
 8003e24:	e7ee      	b.n	8003e04 <__libc_init_array+0xc>
 8003e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2a:	4798      	blx	r3
 8003e2c:	3601      	adds	r6, #1
 8003e2e:	e7f2      	b.n	8003e16 <__libc_init_array+0x1e>
 8003e30:	0800493c 	.word	0x0800493c
 8003e34:	0800493c 	.word	0x0800493c
 8003e38:	0800493c 	.word	0x0800493c
 8003e3c:	08004940 	.word	0x08004940

08003e40 <__retarget_lock_init_recursive>:
 8003e40:	4770      	bx	lr

08003e42 <__retarget_lock_acquire_recursive>:
 8003e42:	4770      	bx	lr

08003e44 <__retarget_lock_release_recursive>:
 8003e44:	4770      	bx	lr
	...

08003e48 <_free_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4605      	mov	r5, r0
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	d041      	beq.n	8003ed4 <_free_r+0x8c>
 8003e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e54:	1f0c      	subs	r4, r1, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	bfb8      	it	lt
 8003e5a:	18e4      	addlt	r4, r4, r3
 8003e5c:	f000 f8e0 	bl	8004020 <__malloc_lock>
 8003e60:	4a1d      	ldr	r2, [pc, #116]	@ (8003ed8 <_free_r+0x90>)
 8003e62:	6813      	ldr	r3, [r2, #0]
 8003e64:	b933      	cbnz	r3, 8003e74 <_free_r+0x2c>
 8003e66:	6063      	str	r3, [r4, #4]
 8003e68:	6014      	str	r4, [r2, #0]
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e70:	f000 b8dc 	b.w	800402c <__malloc_unlock>
 8003e74:	42a3      	cmp	r3, r4
 8003e76:	d908      	bls.n	8003e8a <_free_r+0x42>
 8003e78:	6820      	ldr	r0, [r4, #0]
 8003e7a:	1821      	adds	r1, r4, r0
 8003e7c:	428b      	cmp	r3, r1
 8003e7e:	bf01      	itttt	eq
 8003e80:	6819      	ldreq	r1, [r3, #0]
 8003e82:	685b      	ldreq	r3, [r3, #4]
 8003e84:	1809      	addeq	r1, r1, r0
 8003e86:	6021      	streq	r1, [r4, #0]
 8003e88:	e7ed      	b.n	8003e66 <_free_r+0x1e>
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	b10b      	cbz	r3, 8003e94 <_free_r+0x4c>
 8003e90:	42a3      	cmp	r3, r4
 8003e92:	d9fa      	bls.n	8003e8a <_free_r+0x42>
 8003e94:	6811      	ldr	r1, [r2, #0]
 8003e96:	1850      	adds	r0, r2, r1
 8003e98:	42a0      	cmp	r0, r4
 8003e9a:	d10b      	bne.n	8003eb4 <_free_r+0x6c>
 8003e9c:	6820      	ldr	r0, [r4, #0]
 8003e9e:	4401      	add	r1, r0
 8003ea0:	1850      	adds	r0, r2, r1
 8003ea2:	4283      	cmp	r3, r0
 8003ea4:	6011      	str	r1, [r2, #0]
 8003ea6:	d1e0      	bne.n	8003e6a <_free_r+0x22>
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	6053      	str	r3, [r2, #4]
 8003eae:	4408      	add	r0, r1
 8003eb0:	6010      	str	r0, [r2, #0]
 8003eb2:	e7da      	b.n	8003e6a <_free_r+0x22>
 8003eb4:	d902      	bls.n	8003ebc <_free_r+0x74>
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	602b      	str	r3, [r5, #0]
 8003eba:	e7d6      	b.n	8003e6a <_free_r+0x22>
 8003ebc:	6820      	ldr	r0, [r4, #0]
 8003ebe:	1821      	adds	r1, r4, r0
 8003ec0:	428b      	cmp	r3, r1
 8003ec2:	bf04      	itt	eq
 8003ec4:	6819      	ldreq	r1, [r3, #0]
 8003ec6:	685b      	ldreq	r3, [r3, #4]
 8003ec8:	6063      	str	r3, [r4, #4]
 8003eca:	bf04      	itt	eq
 8003ecc:	1809      	addeq	r1, r1, r0
 8003ece:	6021      	streq	r1, [r4, #0]
 8003ed0:	6054      	str	r4, [r2, #4]
 8003ed2:	e7ca      	b.n	8003e6a <_free_r+0x22>
 8003ed4:	bd38      	pop	{r3, r4, r5, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000274 	.word	0x20000274

08003edc <sbrk_aligned>:
 8003edc:	b570      	push	{r4, r5, r6, lr}
 8003ede:	4e0f      	ldr	r6, [pc, #60]	@ (8003f1c <sbrk_aligned+0x40>)
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	6831      	ldr	r1, [r6, #0]
 8003ee4:	4605      	mov	r5, r0
 8003ee6:	b911      	cbnz	r1, 8003eee <sbrk_aligned+0x12>
 8003ee8:	f000 fca4 	bl	8004834 <_sbrk_r>
 8003eec:	6030      	str	r0, [r6, #0]
 8003eee:	4621      	mov	r1, r4
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f000 fc9f 	bl	8004834 <_sbrk_r>
 8003ef6:	1c43      	adds	r3, r0, #1
 8003ef8:	d103      	bne.n	8003f02 <sbrk_aligned+0x26>
 8003efa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003efe:	4620      	mov	r0, r4
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
 8003f02:	1cc4      	adds	r4, r0, #3
 8003f04:	f024 0403 	bic.w	r4, r4, #3
 8003f08:	42a0      	cmp	r0, r4
 8003f0a:	d0f8      	beq.n	8003efe <sbrk_aligned+0x22>
 8003f0c:	1a21      	subs	r1, r4, r0
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f000 fc90 	bl	8004834 <_sbrk_r>
 8003f14:	3001      	adds	r0, #1
 8003f16:	d1f2      	bne.n	8003efe <sbrk_aligned+0x22>
 8003f18:	e7ef      	b.n	8003efa <sbrk_aligned+0x1e>
 8003f1a:	bf00      	nop
 8003f1c:	20000270 	.word	0x20000270

08003f20 <_malloc_r>:
 8003f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f24:	1ccd      	adds	r5, r1, #3
 8003f26:	f025 0503 	bic.w	r5, r5, #3
 8003f2a:	3508      	adds	r5, #8
 8003f2c:	2d0c      	cmp	r5, #12
 8003f2e:	bf38      	it	cc
 8003f30:	250c      	movcc	r5, #12
 8003f32:	2d00      	cmp	r5, #0
 8003f34:	4606      	mov	r6, r0
 8003f36:	db01      	blt.n	8003f3c <_malloc_r+0x1c>
 8003f38:	42a9      	cmp	r1, r5
 8003f3a:	d904      	bls.n	8003f46 <_malloc_r+0x26>
 8003f3c:	230c      	movs	r3, #12
 8003f3e:	6033      	str	r3, [r6, #0]
 8003f40:	2000      	movs	r0, #0
 8003f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800401c <_malloc_r+0xfc>
 8003f4a:	f000 f869 	bl	8004020 <__malloc_lock>
 8003f4e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f52:	461c      	mov	r4, r3
 8003f54:	bb44      	cbnz	r4, 8003fa8 <_malloc_r+0x88>
 8003f56:	4629      	mov	r1, r5
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f7ff ffbf 	bl	8003edc <sbrk_aligned>
 8003f5e:	1c43      	adds	r3, r0, #1
 8003f60:	4604      	mov	r4, r0
 8003f62:	d158      	bne.n	8004016 <_malloc_r+0xf6>
 8003f64:	f8d8 4000 	ldr.w	r4, [r8]
 8003f68:	4627      	mov	r7, r4
 8003f6a:	2f00      	cmp	r7, #0
 8003f6c:	d143      	bne.n	8003ff6 <_malloc_r+0xd6>
 8003f6e:	2c00      	cmp	r4, #0
 8003f70:	d04b      	beq.n	800400a <_malloc_r+0xea>
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	4639      	mov	r1, r7
 8003f76:	4630      	mov	r0, r6
 8003f78:	eb04 0903 	add.w	r9, r4, r3
 8003f7c:	f000 fc5a 	bl	8004834 <_sbrk_r>
 8003f80:	4581      	cmp	r9, r0
 8003f82:	d142      	bne.n	800400a <_malloc_r+0xea>
 8003f84:	6821      	ldr	r1, [r4, #0]
 8003f86:	1a6d      	subs	r5, r5, r1
 8003f88:	4629      	mov	r1, r5
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	f7ff ffa6 	bl	8003edc <sbrk_aligned>
 8003f90:	3001      	adds	r0, #1
 8003f92:	d03a      	beq.n	800400a <_malloc_r+0xea>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	442b      	add	r3, r5
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	bb62      	cbnz	r2, 8003ffc <_malloc_r+0xdc>
 8003fa2:	f8c8 7000 	str.w	r7, [r8]
 8003fa6:	e00f      	b.n	8003fc8 <_malloc_r+0xa8>
 8003fa8:	6822      	ldr	r2, [r4, #0]
 8003faa:	1b52      	subs	r2, r2, r5
 8003fac:	d420      	bmi.n	8003ff0 <_malloc_r+0xd0>
 8003fae:	2a0b      	cmp	r2, #11
 8003fb0:	d917      	bls.n	8003fe2 <_malloc_r+0xc2>
 8003fb2:	1961      	adds	r1, r4, r5
 8003fb4:	42a3      	cmp	r3, r4
 8003fb6:	6025      	str	r5, [r4, #0]
 8003fb8:	bf18      	it	ne
 8003fba:	6059      	strne	r1, [r3, #4]
 8003fbc:	6863      	ldr	r3, [r4, #4]
 8003fbe:	bf08      	it	eq
 8003fc0:	f8c8 1000 	streq.w	r1, [r8]
 8003fc4:	5162      	str	r2, [r4, r5]
 8003fc6:	604b      	str	r3, [r1, #4]
 8003fc8:	4630      	mov	r0, r6
 8003fca:	f000 f82f 	bl	800402c <__malloc_unlock>
 8003fce:	f104 000b 	add.w	r0, r4, #11
 8003fd2:	1d23      	adds	r3, r4, #4
 8003fd4:	f020 0007 	bic.w	r0, r0, #7
 8003fd8:	1ac2      	subs	r2, r0, r3
 8003fda:	bf1c      	itt	ne
 8003fdc:	1a1b      	subne	r3, r3, r0
 8003fde:	50a3      	strne	r3, [r4, r2]
 8003fe0:	e7af      	b.n	8003f42 <_malloc_r+0x22>
 8003fe2:	6862      	ldr	r2, [r4, #4]
 8003fe4:	42a3      	cmp	r3, r4
 8003fe6:	bf0c      	ite	eq
 8003fe8:	f8c8 2000 	streq.w	r2, [r8]
 8003fec:	605a      	strne	r2, [r3, #4]
 8003fee:	e7eb      	b.n	8003fc8 <_malloc_r+0xa8>
 8003ff0:	4623      	mov	r3, r4
 8003ff2:	6864      	ldr	r4, [r4, #4]
 8003ff4:	e7ae      	b.n	8003f54 <_malloc_r+0x34>
 8003ff6:	463c      	mov	r4, r7
 8003ff8:	687f      	ldr	r7, [r7, #4]
 8003ffa:	e7b6      	b.n	8003f6a <_malloc_r+0x4a>
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	42a3      	cmp	r3, r4
 8004002:	d1fb      	bne.n	8003ffc <_malloc_r+0xdc>
 8004004:	2300      	movs	r3, #0
 8004006:	6053      	str	r3, [r2, #4]
 8004008:	e7de      	b.n	8003fc8 <_malloc_r+0xa8>
 800400a:	230c      	movs	r3, #12
 800400c:	6033      	str	r3, [r6, #0]
 800400e:	4630      	mov	r0, r6
 8004010:	f000 f80c 	bl	800402c <__malloc_unlock>
 8004014:	e794      	b.n	8003f40 <_malloc_r+0x20>
 8004016:	6005      	str	r5, [r0, #0]
 8004018:	e7d6      	b.n	8003fc8 <_malloc_r+0xa8>
 800401a:	bf00      	nop
 800401c:	20000274 	.word	0x20000274

08004020 <__malloc_lock>:
 8004020:	4801      	ldr	r0, [pc, #4]	@ (8004028 <__malloc_lock+0x8>)
 8004022:	f7ff bf0e 	b.w	8003e42 <__retarget_lock_acquire_recursive>
 8004026:	bf00      	nop
 8004028:	2000026c 	.word	0x2000026c

0800402c <__malloc_unlock>:
 800402c:	4801      	ldr	r0, [pc, #4]	@ (8004034 <__malloc_unlock+0x8>)
 800402e:	f7ff bf09 	b.w	8003e44 <__retarget_lock_release_recursive>
 8004032:	bf00      	nop
 8004034:	2000026c 	.word	0x2000026c

08004038 <__sfputc_r>:
 8004038:	6893      	ldr	r3, [r2, #8]
 800403a:	3b01      	subs	r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	b410      	push	{r4}
 8004040:	6093      	str	r3, [r2, #8]
 8004042:	da08      	bge.n	8004056 <__sfputc_r+0x1e>
 8004044:	6994      	ldr	r4, [r2, #24]
 8004046:	42a3      	cmp	r3, r4
 8004048:	db01      	blt.n	800404e <__sfputc_r+0x16>
 800404a:	290a      	cmp	r1, #10
 800404c:	d103      	bne.n	8004056 <__sfputc_r+0x1e>
 800404e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004052:	f7ff bde8 	b.w	8003c26 <__swbuf_r>
 8004056:	6813      	ldr	r3, [r2, #0]
 8004058:	1c58      	adds	r0, r3, #1
 800405a:	6010      	str	r0, [r2, #0]
 800405c:	7019      	strb	r1, [r3, #0]
 800405e:	4608      	mov	r0, r1
 8004060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004064:	4770      	bx	lr

08004066 <__sfputs_r>:
 8004066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004068:	4606      	mov	r6, r0
 800406a:	460f      	mov	r7, r1
 800406c:	4614      	mov	r4, r2
 800406e:	18d5      	adds	r5, r2, r3
 8004070:	42ac      	cmp	r4, r5
 8004072:	d101      	bne.n	8004078 <__sfputs_r+0x12>
 8004074:	2000      	movs	r0, #0
 8004076:	e007      	b.n	8004088 <__sfputs_r+0x22>
 8004078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800407c:	463a      	mov	r2, r7
 800407e:	4630      	mov	r0, r6
 8004080:	f7ff ffda 	bl	8004038 <__sfputc_r>
 8004084:	1c43      	adds	r3, r0, #1
 8004086:	d1f3      	bne.n	8004070 <__sfputs_r+0xa>
 8004088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800408c <_vfiprintf_r>:
 800408c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004090:	460d      	mov	r5, r1
 8004092:	b09d      	sub	sp, #116	@ 0x74
 8004094:	4614      	mov	r4, r2
 8004096:	4698      	mov	r8, r3
 8004098:	4606      	mov	r6, r0
 800409a:	b118      	cbz	r0, 80040a4 <_vfiprintf_r+0x18>
 800409c:	6a03      	ldr	r3, [r0, #32]
 800409e:	b90b      	cbnz	r3, 80040a4 <_vfiprintf_r+0x18>
 80040a0:	f7ff fcd8 	bl	8003a54 <__sinit>
 80040a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040a6:	07d9      	lsls	r1, r3, #31
 80040a8:	d405      	bmi.n	80040b6 <_vfiprintf_r+0x2a>
 80040aa:	89ab      	ldrh	r3, [r5, #12]
 80040ac:	059a      	lsls	r2, r3, #22
 80040ae:	d402      	bmi.n	80040b6 <_vfiprintf_r+0x2a>
 80040b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040b2:	f7ff fec6 	bl	8003e42 <__retarget_lock_acquire_recursive>
 80040b6:	89ab      	ldrh	r3, [r5, #12]
 80040b8:	071b      	lsls	r3, r3, #28
 80040ba:	d501      	bpl.n	80040c0 <_vfiprintf_r+0x34>
 80040bc:	692b      	ldr	r3, [r5, #16]
 80040be:	b99b      	cbnz	r3, 80040e8 <_vfiprintf_r+0x5c>
 80040c0:	4629      	mov	r1, r5
 80040c2:	4630      	mov	r0, r6
 80040c4:	f7ff fdee 	bl	8003ca4 <__swsetup_r>
 80040c8:	b170      	cbz	r0, 80040e8 <_vfiprintf_r+0x5c>
 80040ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040cc:	07dc      	lsls	r4, r3, #31
 80040ce:	d504      	bpl.n	80040da <_vfiprintf_r+0x4e>
 80040d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040d4:	b01d      	add	sp, #116	@ 0x74
 80040d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040da:	89ab      	ldrh	r3, [r5, #12]
 80040dc:	0598      	lsls	r0, r3, #22
 80040de:	d4f7      	bmi.n	80040d0 <_vfiprintf_r+0x44>
 80040e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040e2:	f7ff feaf 	bl	8003e44 <__retarget_lock_release_recursive>
 80040e6:	e7f3      	b.n	80040d0 <_vfiprintf_r+0x44>
 80040e8:	2300      	movs	r3, #0
 80040ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80040ec:	2320      	movs	r3, #32
 80040ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80040f6:	2330      	movs	r3, #48	@ 0x30
 80040f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80042a8 <_vfiprintf_r+0x21c>
 80040fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004100:	f04f 0901 	mov.w	r9, #1
 8004104:	4623      	mov	r3, r4
 8004106:	469a      	mov	sl, r3
 8004108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800410c:	b10a      	cbz	r2, 8004112 <_vfiprintf_r+0x86>
 800410e:	2a25      	cmp	r2, #37	@ 0x25
 8004110:	d1f9      	bne.n	8004106 <_vfiprintf_r+0x7a>
 8004112:	ebba 0b04 	subs.w	fp, sl, r4
 8004116:	d00b      	beq.n	8004130 <_vfiprintf_r+0xa4>
 8004118:	465b      	mov	r3, fp
 800411a:	4622      	mov	r2, r4
 800411c:	4629      	mov	r1, r5
 800411e:	4630      	mov	r0, r6
 8004120:	f7ff ffa1 	bl	8004066 <__sfputs_r>
 8004124:	3001      	adds	r0, #1
 8004126:	f000 80a7 	beq.w	8004278 <_vfiprintf_r+0x1ec>
 800412a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800412c:	445a      	add	r2, fp
 800412e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004130:	f89a 3000 	ldrb.w	r3, [sl]
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 809f 	beq.w	8004278 <_vfiprintf_r+0x1ec>
 800413a:	2300      	movs	r3, #0
 800413c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004144:	f10a 0a01 	add.w	sl, sl, #1
 8004148:	9304      	str	r3, [sp, #16]
 800414a:	9307      	str	r3, [sp, #28]
 800414c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004150:	931a      	str	r3, [sp, #104]	@ 0x68
 8004152:	4654      	mov	r4, sl
 8004154:	2205      	movs	r2, #5
 8004156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800415a:	4853      	ldr	r0, [pc, #332]	@ (80042a8 <_vfiprintf_r+0x21c>)
 800415c:	f7fc f860 	bl	8000220 <memchr>
 8004160:	9a04      	ldr	r2, [sp, #16]
 8004162:	b9d8      	cbnz	r0, 800419c <_vfiprintf_r+0x110>
 8004164:	06d1      	lsls	r1, r2, #27
 8004166:	bf44      	itt	mi
 8004168:	2320      	movmi	r3, #32
 800416a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800416e:	0713      	lsls	r3, r2, #28
 8004170:	bf44      	itt	mi
 8004172:	232b      	movmi	r3, #43	@ 0x2b
 8004174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004178:	f89a 3000 	ldrb.w	r3, [sl]
 800417c:	2b2a      	cmp	r3, #42	@ 0x2a
 800417e:	d015      	beq.n	80041ac <_vfiprintf_r+0x120>
 8004180:	9a07      	ldr	r2, [sp, #28]
 8004182:	4654      	mov	r4, sl
 8004184:	2000      	movs	r0, #0
 8004186:	f04f 0c0a 	mov.w	ip, #10
 800418a:	4621      	mov	r1, r4
 800418c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004190:	3b30      	subs	r3, #48	@ 0x30
 8004192:	2b09      	cmp	r3, #9
 8004194:	d94b      	bls.n	800422e <_vfiprintf_r+0x1a2>
 8004196:	b1b0      	cbz	r0, 80041c6 <_vfiprintf_r+0x13a>
 8004198:	9207      	str	r2, [sp, #28]
 800419a:	e014      	b.n	80041c6 <_vfiprintf_r+0x13a>
 800419c:	eba0 0308 	sub.w	r3, r0, r8
 80041a0:	fa09 f303 	lsl.w	r3, r9, r3
 80041a4:	4313      	orrs	r3, r2
 80041a6:	9304      	str	r3, [sp, #16]
 80041a8:	46a2      	mov	sl, r4
 80041aa:	e7d2      	b.n	8004152 <_vfiprintf_r+0xc6>
 80041ac:	9b03      	ldr	r3, [sp, #12]
 80041ae:	1d19      	adds	r1, r3, #4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	9103      	str	r1, [sp, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bfbb      	ittet	lt
 80041b8:	425b      	neglt	r3, r3
 80041ba:	f042 0202 	orrlt.w	r2, r2, #2
 80041be:	9307      	strge	r3, [sp, #28]
 80041c0:	9307      	strlt	r3, [sp, #28]
 80041c2:	bfb8      	it	lt
 80041c4:	9204      	strlt	r2, [sp, #16]
 80041c6:	7823      	ldrb	r3, [r4, #0]
 80041c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80041ca:	d10a      	bne.n	80041e2 <_vfiprintf_r+0x156>
 80041cc:	7863      	ldrb	r3, [r4, #1]
 80041ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80041d0:	d132      	bne.n	8004238 <_vfiprintf_r+0x1ac>
 80041d2:	9b03      	ldr	r3, [sp, #12]
 80041d4:	1d1a      	adds	r2, r3, #4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	9203      	str	r2, [sp, #12]
 80041da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80041de:	3402      	adds	r4, #2
 80041e0:	9305      	str	r3, [sp, #20]
 80041e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80042b8 <_vfiprintf_r+0x22c>
 80041e6:	7821      	ldrb	r1, [r4, #0]
 80041e8:	2203      	movs	r2, #3
 80041ea:	4650      	mov	r0, sl
 80041ec:	f7fc f818 	bl	8000220 <memchr>
 80041f0:	b138      	cbz	r0, 8004202 <_vfiprintf_r+0x176>
 80041f2:	9b04      	ldr	r3, [sp, #16]
 80041f4:	eba0 000a 	sub.w	r0, r0, sl
 80041f8:	2240      	movs	r2, #64	@ 0x40
 80041fa:	4082      	lsls	r2, r0
 80041fc:	4313      	orrs	r3, r2
 80041fe:	3401      	adds	r4, #1
 8004200:	9304      	str	r3, [sp, #16]
 8004202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004206:	4829      	ldr	r0, [pc, #164]	@ (80042ac <_vfiprintf_r+0x220>)
 8004208:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800420c:	2206      	movs	r2, #6
 800420e:	f7fc f807 	bl	8000220 <memchr>
 8004212:	2800      	cmp	r0, #0
 8004214:	d03f      	beq.n	8004296 <_vfiprintf_r+0x20a>
 8004216:	4b26      	ldr	r3, [pc, #152]	@ (80042b0 <_vfiprintf_r+0x224>)
 8004218:	bb1b      	cbnz	r3, 8004262 <_vfiprintf_r+0x1d6>
 800421a:	9b03      	ldr	r3, [sp, #12]
 800421c:	3307      	adds	r3, #7
 800421e:	f023 0307 	bic.w	r3, r3, #7
 8004222:	3308      	adds	r3, #8
 8004224:	9303      	str	r3, [sp, #12]
 8004226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004228:	443b      	add	r3, r7
 800422a:	9309      	str	r3, [sp, #36]	@ 0x24
 800422c:	e76a      	b.n	8004104 <_vfiprintf_r+0x78>
 800422e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004232:	460c      	mov	r4, r1
 8004234:	2001      	movs	r0, #1
 8004236:	e7a8      	b.n	800418a <_vfiprintf_r+0xfe>
 8004238:	2300      	movs	r3, #0
 800423a:	3401      	adds	r4, #1
 800423c:	9305      	str	r3, [sp, #20]
 800423e:	4619      	mov	r1, r3
 8004240:	f04f 0c0a 	mov.w	ip, #10
 8004244:	4620      	mov	r0, r4
 8004246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800424a:	3a30      	subs	r2, #48	@ 0x30
 800424c:	2a09      	cmp	r2, #9
 800424e:	d903      	bls.n	8004258 <_vfiprintf_r+0x1cc>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0c6      	beq.n	80041e2 <_vfiprintf_r+0x156>
 8004254:	9105      	str	r1, [sp, #20]
 8004256:	e7c4      	b.n	80041e2 <_vfiprintf_r+0x156>
 8004258:	fb0c 2101 	mla	r1, ip, r1, r2
 800425c:	4604      	mov	r4, r0
 800425e:	2301      	movs	r3, #1
 8004260:	e7f0      	b.n	8004244 <_vfiprintf_r+0x1b8>
 8004262:	ab03      	add	r3, sp, #12
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	462a      	mov	r2, r5
 8004268:	4b12      	ldr	r3, [pc, #72]	@ (80042b4 <_vfiprintf_r+0x228>)
 800426a:	a904      	add	r1, sp, #16
 800426c:	4630      	mov	r0, r6
 800426e:	f3af 8000 	nop.w
 8004272:	4607      	mov	r7, r0
 8004274:	1c78      	adds	r0, r7, #1
 8004276:	d1d6      	bne.n	8004226 <_vfiprintf_r+0x19a>
 8004278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800427a:	07d9      	lsls	r1, r3, #31
 800427c:	d405      	bmi.n	800428a <_vfiprintf_r+0x1fe>
 800427e:	89ab      	ldrh	r3, [r5, #12]
 8004280:	059a      	lsls	r2, r3, #22
 8004282:	d402      	bmi.n	800428a <_vfiprintf_r+0x1fe>
 8004284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004286:	f7ff fddd 	bl	8003e44 <__retarget_lock_release_recursive>
 800428a:	89ab      	ldrh	r3, [r5, #12]
 800428c:	065b      	lsls	r3, r3, #25
 800428e:	f53f af1f 	bmi.w	80040d0 <_vfiprintf_r+0x44>
 8004292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004294:	e71e      	b.n	80040d4 <_vfiprintf_r+0x48>
 8004296:	ab03      	add	r3, sp, #12
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	462a      	mov	r2, r5
 800429c:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <_vfiprintf_r+0x228>)
 800429e:	a904      	add	r1, sp, #16
 80042a0:	4630      	mov	r0, r6
 80042a2:	f000 f879 	bl	8004398 <_printf_i>
 80042a6:	e7e4      	b.n	8004272 <_vfiprintf_r+0x1e6>
 80042a8:	08004900 	.word	0x08004900
 80042ac:	0800490a 	.word	0x0800490a
 80042b0:	00000000 	.word	0x00000000
 80042b4:	08004067 	.word	0x08004067
 80042b8:	08004906 	.word	0x08004906

080042bc <_printf_common>:
 80042bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c0:	4616      	mov	r6, r2
 80042c2:	4698      	mov	r8, r3
 80042c4:	688a      	ldr	r2, [r1, #8]
 80042c6:	690b      	ldr	r3, [r1, #16]
 80042c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042cc:	4293      	cmp	r3, r2
 80042ce:	bfb8      	it	lt
 80042d0:	4613      	movlt	r3, r2
 80042d2:	6033      	str	r3, [r6, #0]
 80042d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042d8:	4607      	mov	r7, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	b10a      	cbz	r2, 80042e2 <_printf_common+0x26>
 80042de:	3301      	adds	r3, #1
 80042e0:	6033      	str	r3, [r6, #0]
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	0699      	lsls	r1, r3, #26
 80042e6:	bf42      	ittt	mi
 80042e8:	6833      	ldrmi	r3, [r6, #0]
 80042ea:	3302      	addmi	r3, #2
 80042ec:	6033      	strmi	r3, [r6, #0]
 80042ee:	6825      	ldr	r5, [r4, #0]
 80042f0:	f015 0506 	ands.w	r5, r5, #6
 80042f4:	d106      	bne.n	8004304 <_printf_common+0x48>
 80042f6:	f104 0a19 	add.w	sl, r4, #25
 80042fa:	68e3      	ldr	r3, [r4, #12]
 80042fc:	6832      	ldr	r2, [r6, #0]
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	42ab      	cmp	r3, r5
 8004302:	dc26      	bgt.n	8004352 <_printf_common+0x96>
 8004304:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004308:	6822      	ldr	r2, [r4, #0]
 800430a:	3b00      	subs	r3, #0
 800430c:	bf18      	it	ne
 800430e:	2301      	movne	r3, #1
 8004310:	0692      	lsls	r2, r2, #26
 8004312:	d42b      	bmi.n	800436c <_printf_common+0xb0>
 8004314:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004318:	4641      	mov	r1, r8
 800431a:	4638      	mov	r0, r7
 800431c:	47c8      	blx	r9
 800431e:	3001      	adds	r0, #1
 8004320:	d01e      	beq.n	8004360 <_printf_common+0xa4>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	6922      	ldr	r2, [r4, #16]
 8004326:	f003 0306 	and.w	r3, r3, #6
 800432a:	2b04      	cmp	r3, #4
 800432c:	bf02      	ittt	eq
 800432e:	68e5      	ldreq	r5, [r4, #12]
 8004330:	6833      	ldreq	r3, [r6, #0]
 8004332:	1aed      	subeq	r5, r5, r3
 8004334:	68a3      	ldr	r3, [r4, #8]
 8004336:	bf0c      	ite	eq
 8004338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800433c:	2500      	movne	r5, #0
 800433e:	4293      	cmp	r3, r2
 8004340:	bfc4      	itt	gt
 8004342:	1a9b      	subgt	r3, r3, r2
 8004344:	18ed      	addgt	r5, r5, r3
 8004346:	2600      	movs	r6, #0
 8004348:	341a      	adds	r4, #26
 800434a:	42b5      	cmp	r5, r6
 800434c:	d11a      	bne.n	8004384 <_printf_common+0xc8>
 800434e:	2000      	movs	r0, #0
 8004350:	e008      	b.n	8004364 <_printf_common+0xa8>
 8004352:	2301      	movs	r3, #1
 8004354:	4652      	mov	r2, sl
 8004356:	4641      	mov	r1, r8
 8004358:	4638      	mov	r0, r7
 800435a:	47c8      	blx	r9
 800435c:	3001      	adds	r0, #1
 800435e:	d103      	bne.n	8004368 <_printf_common+0xac>
 8004360:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004368:	3501      	adds	r5, #1
 800436a:	e7c6      	b.n	80042fa <_printf_common+0x3e>
 800436c:	18e1      	adds	r1, r4, r3
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	2030      	movs	r0, #48	@ 0x30
 8004372:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004376:	4422      	add	r2, r4
 8004378:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800437c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004380:	3302      	adds	r3, #2
 8004382:	e7c7      	b.n	8004314 <_printf_common+0x58>
 8004384:	2301      	movs	r3, #1
 8004386:	4622      	mov	r2, r4
 8004388:	4641      	mov	r1, r8
 800438a:	4638      	mov	r0, r7
 800438c:	47c8      	blx	r9
 800438e:	3001      	adds	r0, #1
 8004390:	d0e6      	beq.n	8004360 <_printf_common+0xa4>
 8004392:	3601      	adds	r6, #1
 8004394:	e7d9      	b.n	800434a <_printf_common+0x8e>
	...

08004398 <_printf_i>:
 8004398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800439c:	7e0f      	ldrb	r7, [r1, #24]
 800439e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043a0:	2f78      	cmp	r7, #120	@ 0x78
 80043a2:	4691      	mov	r9, r2
 80043a4:	4680      	mov	r8, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	469a      	mov	sl, r3
 80043aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043ae:	d807      	bhi.n	80043c0 <_printf_i+0x28>
 80043b0:	2f62      	cmp	r7, #98	@ 0x62
 80043b2:	d80a      	bhi.n	80043ca <_printf_i+0x32>
 80043b4:	2f00      	cmp	r7, #0
 80043b6:	f000 80d1 	beq.w	800455c <_printf_i+0x1c4>
 80043ba:	2f58      	cmp	r7, #88	@ 0x58
 80043bc:	f000 80b8 	beq.w	8004530 <_printf_i+0x198>
 80043c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80043c8:	e03a      	b.n	8004440 <_printf_i+0xa8>
 80043ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043ce:	2b15      	cmp	r3, #21
 80043d0:	d8f6      	bhi.n	80043c0 <_printf_i+0x28>
 80043d2:	a101      	add	r1, pc, #4	@ (adr r1, 80043d8 <_printf_i+0x40>)
 80043d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043d8:	08004431 	.word	0x08004431
 80043dc:	08004445 	.word	0x08004445
 80043e0:	080043c1 	.word	0x080043c1
 80043e4:	080043c1 	.word	0x080043c1
 80043e8:	080043c1 	.word	0x080043c1
 80043ec:	080043c1 	.word	0x080043c1
 80043f0:	08004445 	.word	0x08004445
 80043f4:	080043c1 	.word	0x080043c1
 80043f8:	080043c1 	.word	0x080043c1
 80043fc:	080043c1 	.word	0x080043c1
 8004400:	080043c1 	.word	0x080043c1
 8004404:	08004543 	.word	0x08004543
 8004408:	0800446f 	.word	0x0800446f
 800440c:	080044fd 	.word	0x080044fd
 8004410:	080043c1 	.word	0x080043c1
 8004414:	080043c1 	.word	0x080043c1
 8004418:	08004565 	.word	0x08004565
 800441c:	080043c1 	.word	0x080043c1
 8004420:	0800446f 	.word	0x0800446f
 8004424:	080043c1 	.word	0x080043c1
 8004428:	080043c1 	.word	0x080043c1
 800442c:	08004505 	.word	0x08004505
 8004430:	6833      	ldr	r3, [r6, #0]
 8004432:	1d1a      	adds	r2, r3, #4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6032      	str	r2, [r6, #0]
 8004438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800443c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004440:	2301      	movs	r3, #1
 8004442:	e09c      	b.n	800457e <_printf_i+0x1e6>
 8004444:	6833      	ldr	r3, [r6, #0]
 8004446:	6820      	ldr	r0, [r4, #0]
 8004448:	1d19      	adds	r1, r3, #4
 800444a:	6031      	str	r1, [r6, #0]
 800444c:	0606      	lsls	r6, r0, #24
 800444e:	d501      	bpl.n	8004454 <_printf_i+0xbc>
 8004450:	681d      	ldr	r5, [r3, #0]
 8004452:	e003      	b.n	800445c <_printf_i+0xc4>
 8004454:	0645      	lsls	r5, r0, #25
 8004456:	d5fb      	bpl.n	8004450 <_printf_i+0xb8>
 8004458:	f9b3 5000 	ldrsh.w	r5, [r3]
 800445c:	2d00      	cmp	r5, #0
 800445e:	da03      	bge.n	8004468 <_printf_i+0xd0>
 8004460:	232d      	movs	r3, #45	@ 0x2d
 8004462:	426d      	negs	r5, r5
 8004464:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004468:	4858      	ldr	r0, [pc, #352]	@ (80045cc <_printf_i+0x234>)
 800446a:	230a      	movs	r3, #10
 800446c:	e011      	b.n	8004492 <_printf_i+0xfa>
 800446e:	6821      	ldr	r1, [r4, #0]
 8004470:	6833      	ldr	r3, [r6, #0]
 8004472:	0608      	lsls	r0, r1, #24
 8004474:	f853 5b04 	ldr.w	r5, [r3], #4
 8004478:	d402      	bmi.n	8004480 <_printf_i+0xe8>
 800447a:	0649      	lsls	r1, r1, #25
 800447c:	bf48      	it	mi
 800447e:	b2ad      	uxthmi	r5, r5
 8004480:	2f6f      	cmp	r7, #111	@ 0x6f
 8004482:	4852      	ldr	r0, [pc, #328]	@ (80045cc <_printf_i+0x234>)
 8004484:	6033      	str	r3, [r6, #0]
 8004486:	bf14      	ite	ne
 8004488:	230a      	movne	r3, #10
 800448a:	2308      	moveq	r3, #8
 800448c:	2100      	movs	r1, #0
 800448e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004492:	6866      	ldr	r6, [r4, #4]
 8004494:	60a6      	str	r6, [r4, #8]
 8004496:	2e00      	cmp	r6, #0
 8004498:	db05      	blt.n	80044a6 <_printf_i+0x10e>
 800449a:	6821      	ldr	r1, [r4, #0]
 800449c:	432e      	orrs	r6, r5
 800449e:	f021 0104 	bic.w	r1, r1, #4
 80044a2:	6021      	str	r1, [r4, #0]
 80044a4:	d04b      	beq.n	800453e <_printf_i+0x1a6>
 80044a6:	4616      	mov	r6, r2
 80044a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80044ac:	fb03 5711 	mls	r7, r3, r1, r5
 80044b0:	5dc7      	ldrb	r7, [r0, r7]
 80044b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044b6:	462f      	mov	r7, r5
 80044b8:	42bb      	cmp	r3, r7
 80044ba:	460d      	mov	r5, r1
 80044bc:	d9f4      	bls.n	80044a8 <_printf_i+0x110>
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d10b      	bne.n	80044da <_printf_i+0x142>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	07df      	lsls	r7, r3, #31
 80044c6:	d508      	bpl.n	80044da <_printf_i+0x142>
 80044c8:	6923      	ldr	r3, [r4, #16]
 80044ca:	6861      	ldr	r1, [r4, #4]
 80044cc:	4299      	cmp	r1, r3
 80044ce:	bfde      	ittt	le
 80044d0:	2330      	movle	r3, #48	@ 0x30
 80044d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044d6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80044da:	1b92      	subs	r2, r2, r6
 80044dc:	6122      	str	r2, [r4, #16]
 80044de:	f8cd a000 	str.w	sl, [sp]
 80044e2:	464b      	mov	r3, r9
 80044e4:	aa03      	add	r2, sp, #12
 80044e6:	4621      	mov	r1, r4
 80044e8:	4640      	mov	r0, r8
 80044ea:	f7ff fee7 	bl	80042bc <_printf_common>
 80044ee:	3001      	adds	r0, #1
 80044f0:	d14a      	bne.n	8004588 <_printf_i+0x1f0>
 80044f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044f6:	b004      	add	sp, #16
 80044f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	f043 0320 	orr.w	r3, r3, #32
 8004502:	6023      	str	r3, [r4, #0]
 8004504:	4832      	ldr	r0, [pc, #200]	@ (80045d0 <_printf_i+0x238>)
 8004506:	2778      	movs	r7, #120	@ 0x78
 8004508:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	6831      	ldr	r1, [r6, #0]
 8004510:	061f      	lsls	r7, r3, #24
 8004512:	f851 5b04 	ldr.w	r5, [r1], #4
 8004516:	d402      	bmi.n	800451e <_printf_i+0x186>
 8004518:	065f      	lsls	r7, r3, #25
 800451a:	bf48      	it	mi
 800451c:	b2ad      	uxthmi	r5, r5
 800451e:	6031      	str	r1, [r6, #0]
 8004520:	07d9      	lsls	r1, r3, #31
 8004522:	bf44      	itt	mi
 8004524:	f043 0320 	orrmi.w	r3, r3, #32
 8004528:	6023      	strmi	r3, [r4, #0]
 800452a:	b11d      	cbz	r5, 8004534 <_printf_i+0x19c>
 800452c:	2310      	movs	r3, #16
 800452e:	e7ad      	b.n	800448c <_printf_i+0xf4>
 8004530:	4826      	ldr	r0, [pc, #152]	@ (80045cc <_printf_i+0x234>)
 8004532:	e7e9      	b.n	8004508 <_printf_i+0x170>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	f023 0320 	bic.w	r3, r3, #32
 800453a:	6023      	str	r3, [r4, #0]
 800453c:	e7f6      	b.n	800452c <_printf_i+0x194>
 800453e:	4616      	mov	r6, r2
 8004540:	e7bd      	b.n	80044be <_printf_i+0x126>
 8004542:	6833      	ldr	r3, [r6, #0]
 8004544:	6825      	ldr	r5, [r4, #0]
 8004546:	6961      	ldr	r1, [r4, #20]
 8004548:	1d18      	adds	r0, r3, #4
 800454a:	6030      	str	r0, [r6, #0]
 800454c:	062e      	lsls	r6, r5, #24
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	d501      	bpl.n	8004556 <_printf_i+0x1be>
 8004552:	6019      	str	r1, [r3, #0]
 8004554:	e002      	b.n	800455c <_printf_i+0x1c4>
 8004556:	0668      	lsls	r0, r5, #25
 8004558:	d5fb      	bpl.n	8004552 <_printf_i+0x1ba>
 800455a:	8019      	strh	r1, [r3, #0]
 800455c:	2300      	movs	r3, #0
 800455e:	6123      	str	r3, [r4, #16]
 8004560:	4616      	mov	r6, r2
 8004562:	e7bc      	b.n	80044de <_printf_i+0x146>
 8004564:	6833      	ldr	r3, [r6, #0]
 8004566:	1d1a      	adds	r2, r3, #4
 8004568:	6032      	str	r2, [r6, #0]
 800456a:	681e      	ldr	r6, [r3, #0]
 800456c:	6862      	ldr	r2, [r4, #4]
 800456e:	2100      	movs	r1, #0
 8004570:	4630      	mov	r0, r6
 8004572:	f7fb fe55 	bl	8000220 <memchr>
 8004576:	b108      	cbz	r0, 800457c <_printf_i+0x1e4>
 8004578:	1b80      	subs	r0, r0, r6
 800457a:	6060      	str	r0, [r4, #4]
 800457c:	6863      	ldr	r3, [r4, #4]
 800457e:	6123      	str	r3, [r4, #16]
 8004580:	2300      	movs	r3, #0
 8004582:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004586:	e7aa      	b.n	80044de <_printf_i+0x146>
 8004588:	6923      	ldr	r3, [r4, #16]
 800458a:	4632      	mov	r2, r6
 800458c:	4649      	mov	r1, r9
 800458e:	4640      	mov	r0, r8
 8004590:	47d0      	blx	sl
 8004592:	3001      	adds	r0, #1
 8004594:	d0ad      	beq.n	80044f2 <_printf_i+0x15a>
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	079b      	lsls	r3, r3, #30
 800459a:	d413      	bmi.n	80045c4 <_printf_i+0x22c>
 800459c:	68e0      	ldr	r0, [r4, #12]
 800459e:	9b03      	ldr	r3, [sp, #12]
 80045a0:	4298      	cmp	r0, r3
 80045a2:	bfb8      	it	lt
 80045a4:	4618      	movlt	r0, r3
 80045a6:	e7a6      	b.n	80044f6 <_printf_i+0x15e>
 80045a8:	2301      	movs	r3, #1
 80045aa:	4632      	mov	r2, r6
 80045ac:	4649      	mov	r1, r9
 80045ae:	4640      	mov	r0, r8
 80045b0:	47d0      	blx	sl
 80045b2:	3001      	adds	r0, #1
 80045b4:	d09d      	beq.n	80044f2 <_printf_i+0x15a>
 80045b6:	3501      	adds	r5, #1
 80045b8:	68e3      	ldr	r3, [r4, #12]
 80045ba:	9903      	ldr	r1, [sp, #12]
 80045bc:	1a5b      	subs	r3, r3, r1
 80045be:	42ab      	cmp	r3, r5
 80045c0:	dcf2      	bgt.n	80045a8 <_printf_i+0x210>
 80045c2:	e7eb      	b.n	800459c <_printf_i+0x204>
 80045c4:	2500      	movs	r5, #0
 80045c6:	f104 0619 	add.w	r6, r4, #25
 80045ca:	e7f5      	b.n	80045b8 <_printf_i+0x220>
 80045cc:	08004911 	.word	0x08004911
 80045d0:	08004922 	.word	0x08004922

080045d4 <__sflush_r>:
 80045d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045dc:	0716      	lsls	r6, r2, #28
 80045de:	4605      	mov	r5, r0
 80045e0:	460c      	mov	r4, r1
 80045e2:	d454      	bmi.n	800468e <__sflush_r+0xba>
 80045e4:	684b      	ldr	r3, [r1, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	dc02      	bgt.n	80045f0 <__sflush_r+0x1c>
 80045ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	dd48      	ble.n	8004682 <__sflush_r+0xae>
 80045f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045f2:	2e00      	cmp	r6, #0
 80045f4:	d045      	beq.n	8004682 <__sflush_r+0xae>
 80045f6:	2300      	movs	r3, #0
 80045f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80045fc:	682f      	ldr	r7, [r5, #0]
 80045fe:	6a21      	ldr	r1, [r4, #32]
 8004600:	602b      	str	r3, [r5, #0]
 8004602:	d030      	beq.n	8004666 <__sflush_r+0x92>
 8004604:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	0759      	lsls	r1, r3, #29
 800460a:	d505      	bpl.n	8004618 <__sflush_r+0x44>
 800460c:	6863      	ldr	r3, [r4, #4]
 800460e:	1ad2      	subs	r2, r2, r3
 8004610:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004612:	b10b      	cbz	r3, 8004618 <__sflush_r+0x44>
 8004614:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004616:	1ad2      	subs	r2, r2, r3
 8004618:	2300      	movs	r3, #0
 800461a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800461c:	6a21      	ldr	r1, [r4, #32]
 800461e:	4628      	mov	r0, r5
 8004620:	47b0      	blx	r6
 8004622:	1c43      	adds	r3, r0, #1
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	d106      	bne.n	8004636 <__sflush_r+0x62>
 8004628:	6829      	ldr	r1, [r5, #0]
 800462a:	291d      	cmp	r1, #29
 800462c:	d82b      	bhi.n	8004686 <__sflush_r+0xb2>
 800462e:	4a2a      	ldr	r2, [pc, #168]	@ (80046d8 <__sflush_r+0x104>)
 8004630:	40ca      	lsrs	r2, r1
 8004632:	07d6      	lsls	r6, r2, #31
 8004634:	d527      	bpl.n	8004686 <__sflush_r+0xb2>
 8004636:	2200      	movs	r2, #0
 8004638:	6062      	str	r2, [r4, #4]
 800463a:	04d9      	lsls	r1, r3, #19
 800463c:	6922      	ldr	r2, [r4, #16]
 800463e:	6022      	str	r2, [r4, #0]
 8004640:	d504      	bpl.n	800464c <__sflush_r+0x78>
 8004642:	1c42      	adds	r2, r0, #1
 8004644:	d101      	bne.n	800464a <__sflush_r+0x76>
 8004646:	682b      	ldr	r3, [r5, #0]
 8004648:	b903      	cbnz	r3, 800464c <__sflush_r+0x78>
 800464a:	6560      	str	r0, [r4, #84]	@ 0x54
 800464c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800464e:	602f      	str	r7, [r5, #0]
 8004650:	b1b9      	cbz	r1, 8004682 <__sflush_r+0xae>
 8004652:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004656:	4299      	cmp	r1, r3
 8004658:	d002      	beq.n	8004660 <__sflush_r+0x8c>
 800465a:	4628      	mov	r0, r5
 800465c:	f7ff fbf4 	bl	8003e48 <_free_r>
 8004660:	2300      	movs	r3, #0
 8004662:	6363      	str	r3, [r4, #52]	@ 0x34
 8004664:	e00d      	b.n	8004682 <__sflush_r+0xae>
 8004666:	2301      	movs	r3, #1
 8004668:	4628      	mov	r0, r5
 800466a:	47b0      	blx	r6
 800466c:	4602      	mov	r2, r0
 800466e:	1c50      	adds	r0, r2, #1
 8004670:	d1c9      	bne.n	8004606 <__sflush_r+0x32>
 8004672:	682b      	ldr	r3, [r5, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0c6      	beq.n	8004606 <__sflush_r+0x32>
 8004678:	2b1d      	cmp	r3, #29
 800467a:	d001      	beq.n	8004680 <__sflush_r+0xac>
 800467c:	2b16      	cmp	r3, #22
 800467e:	d11e      	bne.n	80046be <__sflush_r+0xea>
 8004680:	602f      	str	r7, [r5, #0]
 8004682:	2000      	movs	r0, #0
 8004684:	e022      	b.n	80046cc <__sflush_r+0xf8>
 8004686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800468a:	b21b      	sxth	r3, r3
 800468c:	e01b      	b.n	80046c6 <__sflush_r+0xf2>
 800468e:	690f      	ldr	r7, [r1, #16]
 8004690:	2f00      	cmp	r7, #0
 8004692:	d0f6      	beq.n	8004682 <__sflush_r+0xae>
 8004694:	0793      	lsls	r3, r2, #30
 8004696:	680e      	ldr	r6, [r1, #0]
 8004698:	bf08      	it	eq
 800469a:	694b      	ldreq	r3, [r1, #20]
 800469c:	600f      	str	r7, [r1, #0]
 800469e:	bf18      	it	ne
 80046a0:	2300      	movne	r3, #0
 80046a2:	eba6 0807 	sub.w	r8, r6, r7
 80046a6:	608b      	str	r3, [r1, #8]
 80046a8:	f1b8 0f00 	cmp.w	r8, #0
 80046ac:	dde9      	ble.n	8004682 <__sflush_r+0xae>
 80046ae:	6a21      	ldr	r1, [r4, #32]
 80046b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80046b2:	4643      	mov	r3, r8
 80046b4:	463a      	mov	r2, r7
 80046b6:	4628      	mov	r0, r5
 80046b8:	47b0      	blx	r6
 80046ba:	2800      	cmp	r0, #0
 80046bc:	dc08      	bgt.n	80046d0 <__sflush_r+0xfc>
 80046be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046c6:	81a3      	strh	r3, [r4, #12]
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046d0:	4407      	add	r7, r0
 80046d2:	eba8 0800 	sub.w	r8, r8, r0
 80046d6:	e7e7      	b.n	80046a8 <__sflush_r+0xd4>
 80046d8:	20400001 	.word	0x20400001

080046dc <_fflush_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	690b      	ldr	r3, [r1, #16]
 80046e0:	4605      	mov	r5, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	b913      	cbnz	r3, 80046ec <_fflush_r+0x10>
 80046e6:	2500      	movs	r5, #0
 80046e8:	4628      	mov	r0, r5
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
 80046ec:	b118      	cbz	r0, 80046f6 <_fflush_r+0x1a>
 80046ee:	6a03      	ldr	r3, [r0, #32]
 80046f0:	b90b      	cbnz	r3, 80046f6 <_fflush_r+0x1a>
 80046f2:	f7ff f9af 	bl	8003a54 <__sinit>
 80046f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f3      	beq.n	80046e6 <_fflush_r+0xa>
 80046fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004700:	07d0      	lsls	r0, r2, #31
 8004702:	d404      	bmi.n	800470e <_fflush_r+0x32>
 8004704:	0599      	lsls	r1, r3, #22
 8004706:	d402      	bmi.n	800470e <_fflush_r+0x32>
 8004708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800470a:	f7ff fb9a 	bl	8003e42 <__retarget_lock_acquire_recursive>
 800470e:	4628      	mov	r0, r5
 8004710:	4621      	mov	r1, r4
 8004712:	f7ff ff5f 	bl	80045d4 <__sflush_r>
 8004716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004718:	07da      	lsls	r2, r3, #31
 800471a:	4605      	mov	r5, r0
 800471c:	d4e4      	bmi.n	80046e8 <_fflush_r+0xc>
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	059b      	lsls	r3, r3, #22
 8004722:	d4e1      	bmi.n	80046e8 <_fflush_r+0xc>
 8004724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004726:	f7ff fb8d 	bl	8003e44 <__retarget_lock_release_recursive>
 800472a:	e7dd      	b.n	80046e8 <_fflush_r+0xc>

0800472c <__swhatbuf_r>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	460c      	mov	r4, r1
 8004730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004734:	2900      	cmp	r1, #0
 8004736:	b096      	sub	sp, #88	@ 0x58
 8004738:	4615      	mov	r5, r2
 800473a:	461e      	mov	r6, r3
 800473c:	da0d      	bge.n	800475a <__swhatbuf_r+0x2e>
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004744:	f04f 0100 	mov.w	r1, #0
 8004748:	bf14      	ite	ne
 800474a:	2340      	movne	r3, #64	@ 0x40
 800474c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004750:	2000      	movs	r0, #0
 8004752:	6031      	str	r1, [r6, #0]
 8004754:	602b      	str	r3, [r5, #0]
 8004756:	b016      	add	sp, #88	@ 0x58
 8004758:	bd70      	pop	{r4, r5, r6, pc}
 800475a:	466a      	mov	r2, sp
 800475c:	f000 f848 	bl	80047f0 <_fstat_r>
 8004760:	2800      	cmp	r0, #0
 8004762:	dbec      	blt.n	800473e <__swhatbuf_r+0x12>
 8004764:	9901      	ldr	r1, [sp, #4]
 8004766:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800476a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800476e:	4259      	negs	r1, r3
 8004770:	4159      	adcs	r1, r3
 8004772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004776:	e7eb      	b.n	8004750 <__swhatbuf_r+0x24>

08004778 <__smakebuf_r>:
 8004778:	898b      	ldrh	r3, [r1, #12]
 800477a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800477c:	079d      	lsls	r5, r3, #30
 800477e:	4606      	mov	r6, r0
 8004780:	460c      	mov	r4, r1
 8004782:	d507      	bpl.n	8004794 <__smakebuf_r+0x1c>
 8004784:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	6123      	str	r3, [r4, #16]
 800478c:	2301      	movs	r3, #1
 800478e:	6163      	str	r3, [r4, #20]
 8004790:	b003      	add	sp, #12
 8004792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004794:	ab01      	add	r3, sp, #4
 8004796:	466a      	mov	r2, sp
 8004798:	f7ff ffc8 	bl	800472c <__swhatbuf_r>
 800479c:	9f00      	ldr	r7, [sp, #0]
 800479e:	4605      	mov	r5, r0
 80047a0:	4639      	mov	r1, r7
 80047a2:	4630      	mov	r0, r6
 80047a4:	f7ff fbbc 	bl	8003f20 <_malloc_r>
 80047a8:	b948      	cbnz	r0, 80047be <__smakebuf_r+0x46>
 80047aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ae:	059a      	lsls	r2, r3, #22
 80047b0:	d4ee      	bmi.n	8004790 <__smakebuf_r+0x18>
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	f043 0302 	orr.w	r3, r3, #2
 80047ba:	81a3      	strh	r3, [r4, #12]
 80047bc:	e7e2      	b.n	8004784 <__smakebuf_r+0xc>
 80047be:	89a3      	ldrh	r3, [r4, #12]
 80047c0:	6020      	str	r0, [r4, #0]
 80047c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c6:	81a3      	strh	r3, [r4, #12]
 80047c8:	9b01      	ldr	r3, [sp, #4]
 80047ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80047ce:	b15b      	cbz	r3, 80047e8 <__smakebuf_r+0x70>
 80047d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047d4:	4630      	mov	r0, r6
 80047d6:	f000 f81d 	bl	8004814 <_isatty_r>
 80047da:	b128      	cbz	r0, 80047e8 <__smakebuf_r+0x70>
 80047dc:	89a3      	ldrh	r3, [r4, #12]
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	81a3      	strh	r3, [r4, #12]
 80047e8:	89a3      	ldrh	r3, [r4, #12]
 80047ea:	431d      	orrs	r5, r3
 80047ec:	81a5      	strh	r5, [r4, #12]
 80047ee:	e7cf      	b.n	8004790 <__smakebuf_r+0x18>

080047f0 <_fstat_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4d07      	ldr	r5, [pc, #28]	@ (8004810 <_fstat_r+0x20>)
 80047f4:	2300      	movs	r3, #0
 80047f6:	4604      	mov	r4, r0
 80047f8:	4608      	mov	r0, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	602b      	str	r3, [r5, #0]
 80047fe:	f7fc f99a 	bl	8000b36 <_fstat>
 8004802:	1c43      	adds	r3, r0, #1
 8004804:	d102      	bne.n	800480c <_fstat_r+0x1c>
 8004806:	682b      	ldr	r3, [r5, #0]
 8004808:	b103      	cbz	r3, 800480c <_fstat_r+0x1c>
 800480a:	6023      	str	r3, [r4, #0]
 800480c:	bd38      	pop	{r3, r4, r5, pc}
 800480e:	bf00      	nop
 8004810:	20000268 	.word	0x20000268

08004814 <_isatty_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4d06      	ldr	r5, [pc, #24]	@ (8004830 <_isatty_r+0x1c>)
 8004818:	2300      	movs	r3, #0
 800481a:	4604      	mov	r4, r0
 800481c:	4608      	mov	r0, r1
 800481e:	602b      	str	r3, [r5, #0]
 8004820:	f7fc f999 	bl	8000b56 <_isatty>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d102      	bne.n	800482e <_isatty_r+0x1a>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	b103      	cbz	r3, 800482e <_isatty_r+0x1a>
 800482c:	6023      	str	r3, [r4, #0]
 800482e:	bd38      	pop	{r3, r4, r5, pc}
 8004830:	20000268 	.word	0x20000268

08004834 <_sbrk_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4d06      	ldr	r5, [pc, #24]	@ (8004850 <_sbrk_r+0x1c>)
 8004838:	2300      	movs	r3, #0
 800483a:	4604      	mov	r4, r0
 800483c:	4608      	mov	r0, r1
 800483e:	602b      	str	r3, [r5, #0]
 8004840:	f7fc f9a2 	bl	8000b88 <_sbrk>
 8004844:	1c43      	adds	r3, r0, #1
 8004846:	d102      	bne.n	800484e <_sbrk_r+0x1a>
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	b103      	cbz	r3, 800484e <_sbrk_r+0x1a>
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	bd38      	pop	{r3, r4, r5, pc}
 8004850:	20000268 	.word	0x20000268

08004854 <_init>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr

08004860 <_fini>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr
